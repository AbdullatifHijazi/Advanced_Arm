
STLib_MegaProject1_F446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007380  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  08007544  08007544  00017544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a18  08007a18  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08007a18  08007a18  00017a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a20  08007a20  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a20  08007a20  00017a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a24  08007a24  00017a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08007a28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  20000018  08007a40  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  08007a40  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f93d  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002538  00000000  00000000  0002f9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d48  00000000  00000000  00031f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a60  00000000  00000000  00032c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021f9f  00000000  00000000  000336a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012046  00000000  00000000  00055647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cce12  00000000  00000000  0006768d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000036f8  00000000  00000000  001344a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000093  00000000  00000000  00137b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000018 	.word	0x20000018
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800752c 	.word	0x0800752c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000001c 	.word	0x2000001c
 8000200:	0800752c 	.word	0x0800752c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <SPITransmit>:
static uint8_t MaxBufferSize = 30;

/* Private Functions */

static inline void SPITransmit(uint8_t *Buf, uint16_t Size)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	460b      	mov	r3, r1
 800050a:	807b      	strh	r3, [r7, #2]
	for (uint16_t LoopCounter = 0; LoopCounter < Size; LoopCounter++)
 800050c:	2300      	movs	r3, #0
 800050e:	81fb      	strh	r3, [r7, #14]
 8000510:	e00b      	b.n	800052a <SPITransmit+0x2a>
	{
		HAL_SPI_Transmit(&hspi2, &Buf[LoopCounter], 1U, HAL_MAX_DELAY);
 8000512:	89fb      	ldrh	r3, [r7, #14]
 8000514:	687a      	ldr	r2, [r7, #4]
 8000516:	18d1      	adds	r1, r2, r3
 8000518:	f04f 33ff 	mov.w	r3, #4294967295
 800051c:	2201      	movs	r2, #1
 800051e:	4807      	ldr	r0, [pc, #28]	; (800053c <SPITransmit+0x3c>)
 8000520:	f005 fd43 	bl	8005faa <HAL_SPI_Transmit>
	for (uint16_t LoopCounter = 0; LoopCounter < Size; LoopCounter++)
 8000524:	89fb      	ldrh	r3, [r7, #14]
 8000526:	3301      	adds	r3, #1
 8000528:	81fb      	strh	r3, [r7, #14]
 800052a:	89fa      	ldrh	r2, [r7, #14]
 800052c:	887b      	ldrh	r3, [r7, #2]
 800052e:	429a      	cmp	r2, r3
 8000530:	d3ef      	bcc.n	8000512 <SPITransmit+0x12>
	}
}
 8000532:	bf00      	nop
 8000534:	bf00      	nop
 8000536:	3710      	adds	r7, #16
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	2000018c 	.word	0x2000018c

08000540 <ComMgr_PrintPassword>:

static inline void ComMgr_PrintPassword(const char Copy_pcPasswordChar, ComMgr_ComProtID_t Copy_ComProtocolID)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	460a      	mov	r2, r1
 800054a:	71fb      	strb	r3, [r7, #7]
 800054c:	4613      	mov	r3, r2
 800054e:	71bb      	strb	r3, [r7, #6]
	char Local_cBackspace = '\b';
 8000550:	2308      	movs	r3, #8
 8000552:	73fb      	strb	r3, [r7, #15]
	char Local_cAsterisk = '*';
 8000554:	232a      	movs	r3, #42	; 0x2a
 8000556:	73bb      	strb	r3, [r7, #14]

	switch (Copy_ComProtocolID)
 8000558:	79bb      	ldrb	r3, [r7, #6]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d002      	beq.n	8000564 <ComMgr_PrintPassword+0x24>
 800055e:	2b01      	cmp	r3, #1
 8000560:	d01b      	beq.n	800059a <ComMgr_PrintPassword+0x5a>
		SPITransmit((uint8_t *) &Copy_pcPasswordChar, 1U);
		SPITransmit((uint8_t *) &Local_cBackspace, 1U);
		HAL_Delay(200);
		SPITransmit((uint8_t *) &Local_cAsterisk, 1U);
		break;
	default: break;
 8000562:	e02f      	b.n	80005c4 <ComMgr_PrintPassword+0x84>
		HAL_UART_Transmit(&huart2, (uint8_t *) &Copy_pcPasswordChar, 1U, HAL_MAX_DELAY);
 8000564:	1df9      	adds	r1, r7, #7
 8000566:	f04f 33ff 	mov.w	r3, #4294967295
 800056a:	2201      	movs	r2, #1
 800056c:	4817      	ldr	r0, [pc, #92]	; (80005cc <ComMgr_PrintPassword+0x8c>)
 800056e:	f006 fb9a 	bl	8006ca6 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t *) &Local_cBackspace, 1U, HAL_MAX_DELAY);
 8000572:	f107 010f 	add.w	r1, r7, #15
 8000576:	f04f 33ff 	mov.w	r3, #4294967295
 800057a:	2201      	movs	r2, #1
 800057c:	4813      	ldr	r0, [pc, #76]	; (80005cc <ComMgr_PrintPassword+0x8c>)
 800057e:	f006 fb92 	bl	8006ca6 <HAL_UART_Transmit>
		HAL_Delay(250);
 8000582:	20fa      	movs	r0, #250	; 0xfa
 8000584:	f001 fd68 	bl	8002058 <HAL_Delay>
		HAL_UART_Transmit(&huart2, (uint8_t *) &Local_cAsterisk, 1U, HAL_MAX_DELAY);
 8000588:	f107 010e 	add.w	r1, r7, #14
 800058c:	f04f 33ff 	mov.w	r3, #4294967295
 8000590:	2201      	movs	r2, #1
 8000592:	480e      	ldr	r0, [pc, #56]	; (80005cc <ComMgr_PrintPassword+0x8c>)
 8000594:	f006 fb87 	bl	8006ca6 <HAL_UART_Transmit>
		break;
 8000598:	e014      	b.n	80005c4 <ComMgr_PrintPassword+0x84>
		SPITransmit((uint8_t *) &Copy_pcPasswordChar, 1U);
 800059a:	1dfb      	adds	r3, r7, #7
 800059c:	2101      	movs	r1, #1
 800059e:	4618      	mov	r0, r3
 80005a0:	f7ff ffae 	bl	8000500 <SPITransmit>
		SPITransmit((uint8_t *) &Local_cBackspace, 1U);
 80005a4:	f107 030f 	add.w	r3, r7, #15
 80005a8:	2101      	movs	r1, #1
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff ffa8 	bl	8000500 <SPITransmit>
		HAL_Delay(200);
 80005b0:	20c8      	movs	r0, #200	; 0xc8
 80005b2:	f001 fd51 	bl	8002058 <HAL_Delay>
		SPITransmit((uint8_t *) &Local_cAsterisk, 1U);
 80005b6:	f107 030e 	add.w	r3, r7, #14
 80005ba:	2101      	movs	r1, #1
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff ff9f 	bl	8000500 <SPITransmit>
		break;
 80005c2:	bf00      	nop
	}
}
 80005c4:	bf00      	nop
 80005c6:	3710      	adds	r7, #16
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	200001e4 	.word	0x200001e4

080005d0 <ComMgr_Print>:

/* Public Functins */

void ComMgr_Print(const char *Copy_pcString, uint8_t Copy_u8StringLength, ComMgr_ComProtID_t Copy_ComProtocolID)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	460b      	mov	r3, r1
 80005da:	70fb      	strb	r3, [r7, #3]
 80005dc:	4613      	mov	r3, r2
 80005de:	70bb      	strb	r3, [r7, #2]
	switch (Copy_ComProtocolID)
 80005e0:	78bb      	ldrb	r3, [r7, #2]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d002      	beq.n	80005ec <ComMgr_Print+0x1c>
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d009      	beq.n	80005fe <ComMgr_Print+0x2e>
	{
	case COMMGR_UART_ID: HAL_UART_Transmit(&huart2, (uint8_t *) Copy_pcString, Copy_u8StringLength, HAL_MAX_DELAY); break;
	case COMMGR_SPI_ID: SPITransmit((uint8_t *) Copy_pcString, Copy_u8StringLength); break;
	default: break;
 80005ea:	e00f      	b.n	800060c <ComMgr_Print+0x3c>
	case COMMGR_UART_ID: HAL_UART_Transmit(&huart2, (uint8_t *) Copy_pcString, Copy_u8StringLength, HAL_MAX_DELAY); break;
 80005ec:	78fb      	ldrb	r3, [r7, #3]
 80005ee:	b29a      	uxth	r2, r3
 80005f0:	f04f 33ff 	mov.w	r3, #4294967295
 80005f4:	6879      	ldr	r1, [r7, #4]
 80005f6:	4807      	ldr	r0, [pc, #28]	; (8000614 <ComMgr_Print+0x44>)
 80005f8:	f006 fb55 	bl	8006ca6 <HAL_UART_Transmit>
 80005fc:	e006      	b.n	800060c <ComMgr_Print+0x3c>
	case COMMGR_SPI_ID: SPITransmit((uint8_t *) Copy_pcString, Copy_u8StringLength); break;
 80005fe:	78fb      	ldrb	r3, [r7, #3]
 8000600:	b29b      	uxth	r3, r3
 8000602:	4619      	mov	r1, r3
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f7ff ff7b 	bl	8000500 <SPITransmit>
 800060a:	bf00      	nop
	}
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	200001e4 	.word	0x200001e4

08000618 <ComMgr_Println>:

void ComMgr_Println(const char *Copy_pcString, uint8_t Copy_u8StringLength, ComMgr_ComProtID_t Copy_ComProtocolID)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	460b      	mov	r3, r1
 8000622:	70fb      	strb	r3, [r7, #3]
 8000624:	4613      	mov	r3, r2
 8000626:	70bb      	strb	r3, [r7, #2]
	char Local_pcNewLine[2] = "\r\n";
 8000628:	f640 230d 	movw	r3, #2573	; 0xa0d
 800062c:	81bb      	strh	r3, [r7, #12]

	switch (Copy_ComProtocolID)
 800062e:	78bb      	ldrb	r3, [r7, #2]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d002      	beq.n	800063a <ComMgr_Println+0x22>
 8000634:	2b01      	cmp	r3, #1
 8000636:	d011      	beq.n	800065c <ComMgr_Println+0x44>
		break;
	case COMMGR_SPI_ID:
		SPITransmit((uint8_t *) Copy_pcString, Copy_u8StringLength);
		SPITransmit((uint8_t *) &Local_pcNewLine, 2U);
		break;
	default: break;
 8000638:	e01d      	b.n	8000676 <ComMgr_Println+0x5e>
		HAL_UART_Transmit(&huart2, (uint8_t *) Copy_pcString, Copy_u8StringLength, HAL_MAX_DELAY);
 800063a:	78fb      	ldrb	r3, [r7, #3]
 800063c:	b29a      	uxth	r2, r3
 800063e:	f04f 33ff 	mov.w	r3, #4294967295
 8000642:	6879      	ldr	r1, [r7, #4]
 8000644:	480e      	ldr	r0, [pc, #56]	; (8000680 <ComMgr_Println+0x68>)
 8000646:	f006 fb2e 	bl	8006ca6 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t *) &Local_pcNewLine, 2U, HAL_MAX_DELAY);
 800064a:	f107 010c 	add.w	r1, r7, #12
 800064e:	f04f 33ff 	mov.w	r3, #4294967295
 8000652:	2202      	movs	r2, #2
 8000654:	480a      	ldr	r0, [pc, #40]	; (8000680 <ComMgr_Println+0x68>)
 8000656:	f006 fb26 	bl	8006ca6 <HAL_UART_Transmit>
		break;
 800065a:	e00c      	b.n	8000676 <ComMgr_Println+0x5e>
		SPITransmit((uint8_t *) Copy_pcString, Copy_u8StringLength);
 800065c:	78fb      	ldrb	r3, [r7, #3]
 800065e:	b29b      	uxth	r3, r3
 8000660:	4619      	mov	r1, r3
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	f7ff ff4c 	bl	8000500 <SPITransmit>
		SPITransmit((uint8_t *) &Local_pcNewLine, 2U);
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2102      	movs	r1, #2
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff ff46 	bl	8000500 <SPITransmit>
		break;
 8000674:	bf00      	nop
	}
}
 8000676:	bf00      	nop
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	200001e4 	.word	0x200001e4

08000684 <ComMgr_Scan>:

void ComMgr_Scan(char *Copy_pcStringBuffer, uint8_t Copy_u8IsPassword, ComMgr_ComProtID_t Copy_ComProtocolID)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	460b      	mov	r3, r1
 800068e:	70fb      	strb	r3, [r7, #3]
 8000690:	4613      	mov	r3, r2
 8000692:	70bb      	strb	r3, [r7, #2]
	uint8_t Local_BufferCounter = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	73fb      	strb	r3, [r7, #15]

	do
	{
		switch (Copy_ComProtocolID)
 8000698:	78bb      	ldrb	r3, [r7, #2]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d002      	beq.n	80006a4 <ComMgr_Scan+0x20>
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d008      	beq.n	80006b4 <ComMgr_Scan+0x30>
		{
		case COMMGR_UART_ID: HAL_UART_Receive(&huart2, (uint8_t *) Copy_pcStringBuffer, 1U, HAL_MAX_DELAY); break;
		case COMMGR_SPI_ID: HAL_SPI_Receive(&hspi2, (uint8_t *) Copy_pcStringBuffer, 1U, HAL_MAX_DELAY); break;
		default: break;
 80006a2:	e00f      	b.n	80006c4 <ComMgr_Scan+0x40>
		case COMMGR_UART_ID: HAL_UART_Receive(&huart2, (uint8_t *) Copy_pcStringBuffer, 1U, HAL_MAX_DELAY); break;
 80006a4:	f04f 33ff 	mov.w	r3, #4294967295
 80006a8:	2201      	movs	r2, #1
 80006aa:	6879      	ldr	r1, [r7, #4]
 80006ac:	4820      	ldr	r0, [pc, #128]	; (8000730 <ComMgr_Scan+0xac>)
 80006ae:	f006 fb8c 	bl	8006dca <HAL_UART_Receive>
 80006b2:	e007      	b.n	80006c4 <ComMgr_Scan+0x40>
		case COMMGR_SPI_ID: HAL_SPI_Receive(&hspi2, (uint8_t *) Copy_pcStringBuffer, 1U, HAL_MAX_DELAY); break;
 80006b4:	f04f 33ff 	mov.w	r3, #4294967295
 80006b8:	2201      	movs	r2, #1
 80006ba:	6879      	ldr	r1, [r7, #4]
 80006bc:	481d      	ldr	r0, [pc, #116]	; (8000734 <ComMgr_Scan+0xb0>)
 80006be:	f005 fdb0 	bl	8006222 <HAL_SPI_Receive>
 80006c2:	bf00      	nop
		}

		if (PASSWORD == Copy_u8IsPassword && *Copy_pcStringBuffer != '\r')
 80006c4:	78fb      	ldrb	r3, [r7, #3]
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d10b      	bne.n	80006e2 <ComMgr_Scan+0x5e>
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b0d      	cmp	r3, #13
 80006d0:	d007      	beq.n	80006e2 <ComMgr_Scan+0x5e>
		{
			ComMgr_PrintPassword(*Copy_pcStringBuffer, Copy_ComProtocolID);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	78ba      	ldrb	r2, [r7, #2]
 80006d8:	4611      	mov	r1, r2
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff ff30 	bl	8000540 <ComMgr_PrintPassword>
 80006e0:	e015      	b.n	800070e <ComMgr_Scan+0x8a>
		}
		else if (NOT_PASSWORD == Copy_u8IsPassword)
 80006e2:	78fb      	ldrb	r3, [r7, #3]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d112      	bne.n	800070e <ComMgr_Scan+0x8a>
		{
			switch (Copy_ComProtocolID)
 80006e8:	78bb      	ldrb	r3, [r7, #2]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d002      	beq.n	80006f4 <ComMgr_Scan+0x70>
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d008      	beq.n	8000704 <ComMgr_Scan+0x80>
			{
			case COMMGR_UART_ID: HAL_UART_Transmit(&huart2, (uint8_t *) Copy_pcStringBuffer, 1U, HAL_MAX_DELAY); break;
			case COMMGR_SPI_ID: SPITransmit((uint8_t *) Copy_pcStringBuffer, 1U); break;
			default: break;
 80006f2:	e00c      	b.n	800070e <ComMgr_Scan+0x8a>
			case COMMGR_UART_ID: HAL_UART_Transmit(&huart2, (uint8_t *) Copy_pcStringBuffer, 1U, HAL_MAX_DELAY); break;
 80006f4:	f04f 33ff 	mov.w	r3, #4294967295
 80006f8:	2201      	movs	r2, #1
 80006fa:	6879      	ldr	r1, [r7, #4]
 80006fc:	480c      	ldr	r0, [pc, #48]	; (8000730 <ComMgr_Scan+0xac>)
 80006fe:	f006 fad2 	bl	8006ca6 <HAL_UART_Transmit>
 8000702:	e004      	b.n	800070e <ComMgr_Scan+0x8a>
			case COMMGR_SPI_ID: SPITransmit((uint8_t *) Copy_pcStringBuffer, 1U); break;
 8000704:	2101      	movs	r1, #1
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f7ff fefa 	bl	8000500 <SPITransmit>
 800070c:	bf00      	nop
			}
		}
	} while ((*Copy_pcStringBuffer++ != '\r') && (Local_BufferCounter++ != MaxBufferSize));
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	1c5a      	adds	r2, r3, #1
 8000712:	607a      	str	r2, [r7, #4]
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2b0d      	cmp	r3, #13
 8000718:	d006      	beq.n	8000728 <ComMgr_Scan+0xa4>
 800071a:	7bfb      	ldrb	r3, [r7, #15]
 800071c:	1c5a      	adds	r2, r3, #1
 800071e:	73fa      	strb	r2, [r7, #15]
 8000720:	4a05      	ldr	r2, [pc, #20]	; (8000738 <ComMgr_Scan+0xb4>)
 8000722:	7812      	ldrb	r2, [r2, #0]
 8000724:	4293      	cmp	r3, r2
 8000726:	d1b7      	bne.n	8000698 <ComMgr_Scan+0x14>
}
 8000728:	bf00      	nop
 800072a:	3710      	adds	r7, #16
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	200001e4 	.word	0x200001e4
 8000734:	2000018c 	.word	0x2000018c
 8000738:	20000000 	.word	0x20000000

0800073c <WriteReg>:
static uint8_t RxCmpltFlag = FLAG_DOWN;

/* Private Functions */

static void WriteReg(uint8_t Copy_u8RegAddress, uint8_t Copy_u8Value)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b086      	sub	sp, #24
 8000740:	af02      	add	r7, sp, #8
 8000742:	4603      	mov	r3, r0
 8000744:	460a      	mov	r2, r1
 8000746:	71fb      	strb	r3, [r7, #7]
 8000748:	4613      	mov	r3, r2
 800074a:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8Tmp[2] = {Copy_u8RegAddress, Copy_u8Value};
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	733b      	strb	r3, [r7, #12]
 8000750:	79bb      	ldrb	r3, [r7, #6]
 8000752:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDR_SHIFTED, Local_u8Tmp, TWO_DATA_TRANSMIT, HAL_MAX_DELAY);
 8000754:	f107 020c 	add.w	r2, r7, #12
 8000758:	f04f 33ff 	mov.w	r3, #4294967295
 800075c:	9300      	str	r3, [sp, #0]
 800075e:	2302      	movs	r3, #2
 8000760:	21d0      	movs	r1, #208	; 0xd0
 8000762:	4803      	ldr	r0, [pc, #12]	; (8000770 <WriteReg+0x34>)
 8000764:	f002 fbba 	bl	8002edc <HAL_I2C_Master_Transmit>
//	HAL_I2C_Master_Transmit_DMA(&hi2c1, SLAVE_ADDR_SHIFTED, Local_u8Tmp, TWO_DATA_TRANSMIT);
//	while (FLAG_DOWN == TxCmpltFlag);
//
//	TxCmpltFlag = FLAG_DOWN;
}
 8000768:	bf00      	nop
 800076a:	3710      	adds	r7, #16
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000078 	.word	0x20000078

08000774 <ReadReg>:

static uint8_t ReadReg(uint8_t Copy_u8RegAddress)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af02      	add	r7, sp, #8
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDR_SHIFTED, &Copy_u8RegAddress, ONE_DATA_TRANSMIT, HAL_MAX_DELAY);
 800077e:	1dfa      	adds	r2, r7, #7
 8000780:	f04f 33ff 	mov.w	r3, #4294967295
 8000784:	9300      	str	r3, [sp, #0]
 8000786:	2301      	movs	r3, #1
 8000788:	21d0      	movs	r1, #208	; 0xd0
 800078a:	4809      	ldr	r0, [pc, #36]	; (80007b0 <ReadReg+0x3c>)
 800078c:	f002 fba6 	bl	8002edc <HAL_I2C_Master_Transmit>
//	HAL_I2C_Master_Transmit_DMA(&hi2c1, SLAVE_ADDR_SHIFTED, &Copy_u8RegAddress, ONE_DATA_TRANSMIT);
//	while (FLAG_DOWN == TxCmpltFlag);
//
//	TxCmpltFlag = FLAG_DOWN;
//
	HAL_I2C_Master_Receive(&hi2c1, SLAVE_ADDR_SHIFTED, &buf, ONE_DATA_RECEIVE, HAL_MAX_DELAY);
 8000790:	f04f 33ff 	mov.w	r3, #4294967295
 8000794:	9300      	str	r3, [sp, #0]
 8000796:	2301      	movs	r3, #1
 8000798:	4a06      	ldr	r2, [pc, #24]	; (80007b4 <ReadReg+0x40>)
 800079a:	21d0      	movs	r1, #208	; 0xd0
 800079c:	4804      	ldr	r0, [pc, #16]	; (80007b0 <ReadReg+0x3c>)
 800079e:	f002 fc9b 	bl	80030d8 <HAL_I2C_Master_Receive>
//	HAL_I2C_Master_Receive_DMA(&hi2c1, SLAVE_ADDR_SHIFTED, &buf, ONE_DATA_RECEIVE);
//	while (FLAG_DOWN == RxCmpltFlag);
//
//	RxCmpltFlag = FLAG_DOWN;

	return buf;
 80007a2:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <ReadReg+0x40>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000078 	.word	0x20000078
 80007b4:	20000034 	.word	0x20000034

080007b8 <BCD2Bin>:

static inline uint8_t BCD2Bin(uint8_t Copy_u8BCDValue)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
	return (((Copy_u8BCDValue >> 4 ) * 10) + (Copy_u8BCDValue & 0x0F));
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	091b      	lsrs	r3, r3, #4
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	461a      	mov	r2, r3
 80007ca:	0092      	lsls	r2, r2, #2
 80007cc:	4413      	add	r3, r2
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	f003 030f 	and.w	r3, r3, #15
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	4413      	add	r3, r2
 80007dc:	b2db      	uxtb	r3, r3
}
 80007de:	4618      	mov	r0, r3
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
	...

080007ec <Bin2BCD>:

static inline uint8_t Bin2BCD(uint8_t Copy_u8BinValue)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	71fb      	strb	r3, [r7, #7]
	return (((Copy_u8BinValue / 10U) << 4) | (Copy_u8BinValue % 10U));
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	4a0c      	ldr	r2, [pc, #48]	; (800082c <Bin2BCD+0x40>)
 80007fa:	fba2 2303 	umull	r2, r3, r2, r3
 80007fe:	08db      	lsrs	r3, r3, #3
 8000800:	b2db      	uxtb	r3, r3
 8000802:	011b      	lsls	r3, r3, #4
 8000804:	b2d8      	uxtb	r0, r3
 8000806:	79fa      	ldrb	r2, [r7, #7]
 8000808:	4b08      	ldr	r3, [pc, #32]	; (800082c <Bin2BCD+0x40>)
 800080a:	fba3 1302 	umull	r1, r3, r3, r2
 800080e:	08d9      	lsrs	r1, r3, #3
 8000810:	460b      	mov	r3, r1
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	440b      	add	r3, r1
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	1ad3      	subs	r3, r2, r3
 800081a:	b2db      	uxtb	r3, r3
 800081c:	4303      	orrs	r3, r0
 800081e:	b2db      	uxtb	r3, r3
}
 8000820:	4618      	mov	r0, r3
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	cccccccd 	.word	0xcccccccd

08000830 <IsTimeValid>:

static inline uint8_t IsTimeValid(const DS1307_Clock_t *Copy_TimeConfig)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	if ((Copy_TimeConfig->Seconds > 59) || (Copy_TimeConfig->Minutes > 59)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2b3b      	cmp	r3, #59	; 0x3b
 800083e:	d823      	bhi.n	8000888 <IsTimeValid+0x58>
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	785b      	ldrb	r3, [r3, #1]
 8000844:	2b3b      	cmp	r3, #59	; 0x3b
 8000846:	d81f      	bhi.n	8000888 <IsTimeValid+0x58>
		|| ((DS1307_24_HOUR == Copy_TimeConfig->TimeFormat) && (Copy_TimeConfig->Hours > 23))
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	78db      	ldrb	r3, [r3, #3]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d103      	bne.n	8000858 <IsTimeValid+0x28>
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	789b      	ldrb	r3, [r3, #2]
 8000854:	2b17      	cmp	r3, #23
 8000856:	d817      	bhi.n	8000888 <IsTimeValid+0x58>
		|| ((DS1307_12_HOUR_AM == Copy_TimeConfig->TimeFormat) && (Copy_TimeConfig->Hours > 12 || Copy_TimeConfig->Hours < 1))
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	78db      	ldrb	r3, [r3, #3]
 800085c:	2b02      	cmp	r3, #2
 800085e:	d107      	bne.n	8000870 <IsTimeValid+0x40>
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	789b      	ldrb	r3, [r3, #2]
 8000864:	2b0c      	cmp	r3, #12
 8000866:	d80f      	bhi.n	8000888 <IsTimeValid+0x58>
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	789b      	ldrb	r3, [r3, #2]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d00b      	beq.n	8000888 <IsTimeValid+0x58>
		|| ((DS1307_12_HOUR_PM == Copy_TimeConfig->TimeFormat) && (Copy_TimeConfig->Hours > 12 || Copy_TimeConfig->Hours < 1))
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	78db      	ldrb	r3, [r3, #3]
 8000874:	2b03      	cmp	r3, #3
 8000876:	d109      	bne.n	800088c <IsTimeValid+0x5c>
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	789b      	ldrb	r3, [r3, #2]
 800087c:	2b0c      	cmp	r3, #12
 800087e:	d803      	bhi.n	8000888 <IsTimeValid+0x58>
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	789b      	ldrb	r3, [r3, #2]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d101      	bne.n	800088c <IsTimeValid+0x5c>
		)
	{
		return INVALID;
 8000888:	2300      	movs	r3, #0
 800088a:	e000      	b.n	800088e <IsTimeValid+0x5e>
	}

	return VALID;
 800088c:	2301      	movs	r3, #1
}
 800088e:	4618      	mov	r0, r3
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <IsDateValid>:

static inline uint8_t IsDateValid(const DS1307_Calender_t *Copy_DateConfig)
{
 800089a:	b480      	push	{r7}
 800089c:	b083      	sub	sp, #12
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
	if ((Copy_DateConfig->DayOfWeek > 7) || (Copy_DateConfig->DayOfWeek < 1)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	2b07      	cmp	r3, #7
 80008a8:	d817      	bhi.n	80008da <IsDateValid+0x40>
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d013      	beq.n	80008da <IsDateValid+0x40>
		|| (Copy_DateConfig->Date > 31) || (Copy_DateConfig->Date < 1)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	785b      	ldrb	r3, [r3, #1]
 80008b6:	2b1f      	cmp	r3, #31
 80008b8:	d80f      	bhi.n	80008da <IsDateValid+0x40>
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	785b      	ldrb	r3, [r3, #1]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d00b      	beq.n	80008da <IsDateValid+0x40>
		|| (Copy_DateConfig->Month > 12) || (Copy_DateConfig->Month < 1)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	789b      	ldrb	r3, [r3, #2]
 80008c6:	2b0c      	cmp	r3, #12
 80008c8:	d807      	bhi.n	80008da <IsDateValid+0x40>
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	789b      	ldrb	r3, [r3, #2]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d003      	beq.n	80008da <IsDateValid+0x40>
		|| (Copy_DateConfig->Year > 99)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	78db      	ldrb	r3, [r3, #3]
 80008d6:	2b63      	cmp	r3, #99	; 0x63
 80008d8:	d901      	bls.n	80008de <IsDateValid+0x44>
		)
	{
		return INVALID;
 80008da:	2300      	movs	r3, #0
 80008dc:	e000      	b.n	80008e0 <IsDateValid+0x46>
	}

	return VALID;
 80008de:	2301      	movs	r3, #1
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <DS1307_u8Init>:
//}

/* Public Functions */

uint8_t DS1307_u8Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
	uint8_t Local_u8ClockState;

	/* Disable the clock halt(Enable the RTC) */
	WriteReg(SECONDS_REG_ADDR, OSCILLATOR_ENABLE);
 80008f2:	2100      	movs	r1, #0
 80008f4:	2000      	movs	r0, #0
 80008f6:	f7ff ff21 	bl	800073c <WriteReg>

	/* Get the clock state */
	Local_u8ClockState = (ReadReg(SECONDS_REG_ADDR) >> CH_POS) & 0x01U;
 80008fa:	2000      	movs	r0, #0
 80008fc:	f7ff ff3a 	bl	8000774 <ReadReg>
 8000900:	4603      	mov	r3, r0
 8000902:	09db      	lsrs	r3, r3, #7
 8000904:	b2db      	uxtb	r3, r3
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	71fb      	strb	r3, [r7, #7]
	/* Check the the clock state, return NOK if it's halted */
	if (OSCILLATOR_DISABLE == Local_u8ClockState)
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	2b01      	cmp	r3, #1
 8000910:	d101      	bne.n	8000916 <DS1307_u8Init+0x2a>
	{
		return NOK;
 8000912:	2302      	movs	r3, #2
 8000914:	e000      	b.n	8000918 <DS1307_u8Init+0x2c>
	}

	return OK;
 8000916:	2301      	movs	r3, #1
}
 8000918:	4618      	mov	r0, r3
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <DS1307_u8SetTime>:

uint8_t DS1307_u8SetTime(const DS1307_Clock_t *Copy_TimeConfig)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8Hour;

	/* Check Time config, then early return if it's not valid */
	if (NULL == Copy_TimeConfig)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d101      	bne.n	8000932 <DS1307_u8SetTime+0x12>
	{
		return NULL_PTR_ERR;
 800092e:	2303      	movs	r3, #3
 8000930:	e035      	b.n	800099e <DS1307_u8SetTime+0x7e>
	}
	if (!IsTimeValid(Copy_TimeConfig))
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f7ff ff7c 	bl	8000830 <IsTimeValid>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d101      	bne.n	8000942 <DS1307_u8SetTime+0x22>
	{
		return NOK;
 800093e:	2302      	movs	r3, #2
 8000940:	e02d      	b.n	800099e <DS1307_u8SetTime+0x7e>
	}

	/* Write the configured seconds to the module */
	WriteReg(SECONDS_REG_ADDR, Bin2BCD(Copy_TimeConfig->Seconds));
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff ff50 	bl	80007ec <Bin2BCD>
 800094c:	4603      	mov	r3, r0
 800094e:	4619      	mov	r1, r3
 8000950:	2000      	movs	r0, #0
 8000952:	f7ff fef3 	bl	800073c <WriteReg>
	/* Write the configured minutes to the module */
	WriteReg(MINUTES_REG_ADDR, Bin2BCD(Copy_TimeConfig->Minutes));
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	785b      	ldrb	r3, [r3, #1]
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff ff46 	bl	80007ec <Bin2BCD>
 8000960:	4603      	mov	r3, r0
 8000962:	4619      	mov	r1, r3
 8000964:	2001      	movs	r0, #1
 8000966:	f7ff fee9 	bl	800073c <WriteReg>

	/* Convert Hours to BCD */
	Local_u8Hour = Bin2BCD(Copy_TimeConfig->Hours);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	789b      	ldrb	r3, [r3, #2]
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff ff3c 	bl	80007ec <Bin2BCD>
 8000974:	4603      	mov	r3, r0
 8000976:	73fb      	strb	r3, [r7, #15]
	/* Clear the time format bits */
	Local_u8Hour &= ~TIME_FORMAT ;
 8000978:	7bfb      	ldrb	r3, [r7, #15]
 800097a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800097e:	73fb      	strb	r3, [r7, #15]
	/* Set the time format bits as configured */
	Local_u8Hour |= Copy_TimeConfig->TimeFormat << TIME_FORMAT_POS ;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	78db      	ldrb	r3, [r3, #3]
 8000984:	015b      	lsls	r3, r3, #5
 8000986:	b25a      	sxtb	r2, r3
 8000988:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800098c:	4313      	orrs	r3, r2
 800098e:	b25b      	sxtb	r3, r3
 8000990:	73fb      	strb	r3, [r7, #15]

	/* Write the configured hours with its time format to the module */
	WriteReg(HOURS_REG_ADDR, Local_u8Hour);
 8000992:	7bfb      	ldrb	r3, [r7, #15]
 8000994:	4619      	mov	r1, r3
 8000996:	2002      	movs	r0, #2
 8000998:	f7ff fed0 	bl	800073c <WriteReg>

	return OK;
 800099c:	2301      	movs	r3, #1
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3710      	adds	r7, #16
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <DS1307_u8GetTime>:

uint8_t DS1307_u8GetTime(DS1307_Clock_t *Copy_Time)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b084      	sub	sp, #16
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8Hour;

	/* Check Time pointer, then early return if null */
	if (NULL == Copy_Time)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d101      	bne.n	80009b8 <DS1307_u8GetTime+0x12>
	{
		return NULL_PTR_ERR;
 80009b4:	2303      	movs	r3, #3
 80009b6:	e044      	b.n	8000a42 <DS1307_u8GetTime+0x9c>
	}

	/* Get the current seconds from the module */
	Copy_Time->Seconds = BCD2Bin(ReadReg(SECONDS_REG_ADDR) & (~CH));
 80009b8:	2000      	movs	r0, #0
 80009ba:	f7ff fedb 	bl	8000774 <ReadReg>
 80009be:	4603      	mov	r3, r0
 80009c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff fef6 	bl	80007b8 <BCD2Bin>
 80009cc:	4603      	mov	r3, r0
 80009ce:	461a      	mov	r2, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	701a      	strb	r2, [r3, #0]
	/* Get the current minutes from the module */
	Copy_Time->Minutes = BCD2Bin(ReadReg(MINUTES_REG_ADDR));
 80009d4:	2001      	movs	r0, #1
 80009d6:	f7ff fecd 	bl	8000774 <ReadReg>
 80009da:	4603      	mov	r3, r0
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff feeb 	bl	80007b8 <BCD2Bin>
 80009e2:	4603      	mov	r3, r0
 80009e4:	461a      	mov	r2, r3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	705a      	strb	r2, [r3, #1]
	/* Read the current hours with its time format from the module */
	Local_u8Hour = ReadReg(HOURS_REG_ADDR);
 80009ea:	2002      	movs	r0, #2
 80009ec:	f7ff fec2 	bl	8000774 <ReadReg>
 80009f0:	4603      	mov	r3, r0
 80009f2:	73fb      	strb	r3, [r7, #15]

	/* Get the hour in 24-hour mode if it was configured as that */
	if (DS1307_24_HOUR == ((Local_u8Hour >> TIME_FORMAT_POS) & TIME_FORMAT_MASK))
 80009f4:	7bfb      	ldrb	r3, [r7, #15]
 80009f6:	095b      	lsrs	r3, r3, #5
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	f003 0303 	and.w	r3, r3, #3
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d10b      	bne.n	8000a1a <DS1307_u8GetTime+0x74>
	{
		Copy_Time->Hours = BCD2Bin(Local_u8Hour & _24_HOUR_MASK);
 8000a02:	7bfb      	ldrb	r3, [r7, #15]
 8000a04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff fed4 	bl	80007b8 <BCD2Bin>
 8000a10:	4603      	mov	r3, r0
 8000a12:	461a      	mov	r2, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	709a      	strb	r2, [r3, #2]
 8000a18:	e00a      	b.n	8000a30 <DS1307_u8GetTime+0x8a>
	}
	/* Get the hour in 12-hour mode if it was configured as that */
	else
	{
		Copy_Time->Hours = BCD2Bin(Local_u8Hour & _12_HOUR_MASK);
 8000a1a:	7bfb      	ldrb	r3, [r7, #15]
 8000a1c:	f003 031f 	and.w	r3, r3, #31
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff fec8 	bl	80007b8 <BCD2Bin>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	709a      	strb	r2, [r3, #2]
	}

	/* Get the the time format */
	Copy_Time->TimeFormat = (Local_u8Hour >> TIME_FORMAT_POS) & TIME_FORMAT_MASK;
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	095b      	lsrs	r3, r3, #5
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	f003 0303 	and.w	r3, r3, #3
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	70da      	strb	r2, [r3, #3]

	return OK;
 8000a40:	2301      	movs	r3, #1
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <DS1307_u8SetDate>:

uint8_t DS1307_u8SetDate(const DS1307_Calender_t *Copy_DateConfig)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
	/* Check Date config, then early return if it's not valid */
	if (NULL == Copy_DateConfig)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d101      	bne.n	8000a5c <DS1307_u8SetDate+0x12>
	{
		return NULL_PTR_ERR;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	e030      	b.n	8000abe <DS1307_u8SetDate+0x74>
	}
	if (!IsDateValid(Copy_DateConfig))
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f7ff ff1c 	bl	800089a <IsDateValid>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d101      	bne.n	8000a6c <DS1307_u8SetDate+0x22>
	{
		return NOK;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	e028      	b.n	8000abe <DS1307_u8SetDate+0x74>
	}

	/* Write the configured day-of-week to the module */
	WriteReg(DAY_REG_ADDR, Bin2BCD(Copy_DateConfig->DayOfWeek));
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff febb 	bl	80007ec <Bin2BCD>
 8000a76:	4603      	mov	r3, r0
 8000a78:	4619      	mov	r1, r3
 8000a7a:	2003      	movs	r0, #3
 8000a7c:	f7ff fe5e 	bl	800073c <WriteReg>
	/* Write the configured date to the module */
	WriteReg(DATE_REG_ADDR, Bin2BCD(Copy_DateConfig->Date));
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	785b      	ldrb	r3, [r3, #1]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff feb1 	bl	80007ec <Bin2BCD>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	2004      	movs	r0, #4
 8000a90:	f7ff fe54 	bl	800073c <WriteReg>
	/* Write the configured month to the module */
	WriteReg(MONTH_REG_ADDR, Bin2BCD(Copy_DateConfig->Month));
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	789b      	ldrb	r3, [r3, #2]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff fea7 	bl	80007ec <Bin2BCD>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	2005      	movs	r0, #5
 8000aa4:	f7ff fe4a 	bl	800073c <WriteReg>
	/* Write the configured year to the module */
	WriteReg(YEAR_REG_ADDR, Bin2BCD(Copy_DateConfig->Year));
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	78db      	ldrb	r3, [r3, #3]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fe9d 	bl	80007ec <Bin2BCD>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	2006      	movs	r0, #6
 8000ab8:	f7ff fe40 	bl	800073c <WriteReg>

	return OK;
 8000abc:	2301      	movs	r3, #1
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <DS1307_u8GetDate>:

uint8_t DS1307_u8GetDate(DS1307_Calender_t *Copy_Date)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b082      	sub	sp, #8
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
	/* Check Date pointer, then early return if it's null */
	if (NULL == Copy_Date)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d101      	bne.n	8000ad8 <DS1307_u8GetDate+0x12>
	{
		return NULL_PTR_ERR;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	e02c      	b.n	8000b32 <DS1307_u8GetDate+0x6c>
	}

	/* Get the current day-of-week from the module */
	Copy_Date->DayOfWeek = BCD2Bin(ReadReg(DAY_REG_ADDR));
 8000ad8:	2003      	movs	r0, #3
 8000ada:	f7ff fe4b 	bl	8000774 <ReadReg>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fe69 	bl	80007b8 <BCD2Bin>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	461a      	mov	r2, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	701a      	strb	r2, [r3, #0]
	/* Get the current date from the module */
	Copy_Date->Date = BCD2Bin(ReadReg(DATE_REG_ADDR));
 8000aee:	2004      	movs	r0, #4
 8000af0:	f7ff fe40 	bl	8000774 <ReadReg>
 8000af4:	4603      	mov	r3, r0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff fe5e 	bl	80007b8 <BCD2Bin>
 8000afc:	4603      	mov	r3, r0
 8000afe:	461a      	mov	r2, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	705a      	strb	r2, [r3, #1]
	/* Get the current month from the module */
	Copy_Date->Month = BCD2Bin(ReadReg(MONTH_REG_ADDR));
 8000b04:	2005      	movs	r0, #5
 8000b06:	f7ff fe35 	bl	8000774 <ReadReg>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff fe53 	bl	80007b8 <BCD2Bin>
 8000b12:	4603      	mov	r3, r0
 8000b14:	461a      	mov	r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	709a      	strb	r2, [r3, #2]
	/* Get the current year from the module */
	Copy_Date->Year = BCD2Bin(ReadReg(YEAR_REG_ADDR));
 8000b1a:	2006      	movs	r0, #6
 8000b1c:	f7ff fe2a 	bl	8000774 <ReadReg>
 8000b20:	4603      	mov	r3, r0
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fe48 	bl	80007b8 <BCD2Bin>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	70da      	strb	r2, [r3, #3]

	return OK;
 8000b30:	2301      	movs	r3, #1
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <PrintMainMenu>:
char *AlarmsMessege[5];

/* Public Functins */

void PrintMainMenu(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
	ComMgr_Println("Welcome to our clock system :)\n", StringLength("Welcome to our clock system :)\n"), COMMGR_UART_ID);
 8000b40:	4823      	ldr	r0, [pc, #140]	; (8000bd0 <PrintMainMenu+0x94>)
 8000b42:	f000 fcd2 	bl	80014ea <StringLength>
 8000b46:	4603      	mov	r3, r0
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4820      	ldr	r0, [pc, #128]	; (8000bd0 <PrintMainMenu+0x94>)
 8000b50:	f7ff fd62 	bl	8000618 <ComMgr_Println>
	ComMgr_Println("--------------- Menu ----------------", StringLength("--------------- Menu ----------------"), COMMGR_UART_ID);
 8000b54:	481f      	ldr	r0, [pc, #124]	; (8000bd4 <PrintMainMenu+0x98>)
 8000b56:	f000 fcc8 	bl	80014ea <StringLength>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	2200      	movs	r2, #0
 8000b60:	4619      	mov	r1, r3
 8000b62:	481c      	ldr	r0, [pc, #112]	; (8000bd4 <PrintMainMenu+0x98>)
 8000b64:	f7ff fd58 	bl	8000618 <ComMgr_Println>
	ComMgr_Println("| To display time and date press [1]|", StringLength("| To display time and date press [1]|"), COMMGR_UART_ID);
 8000b68:	481b      	ldr	r0, [pc, #108]	; (8000bd8 <PrintMainMenu+0x9c>)
 8000b6a:	f000 fcbe 	bl	80014ea <StringLength>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	2200      	movs	r2, #0
 8000b74:	4619      	mov	r1, r3
 8000b76:	4818      	ldr	r0, [pc, #96]	; (8000bd8 <PrintMainMenu+0x9c>)
 8000b78:	f7ff fd4e 	bl	8000618 <ComMgr_Println>
	ComMgr_Println("| To set time and date press     [2]|", StringLength("| To set time and date press     [2]|"), COMMGR_UART_ID);
 8000b7c:	4817      	ldr	r0, [pc, #92]	; (8000bdc <PrintMainMenu+0xa0>)
 8000b7e:	f000 fcb4 	bl	80014ea <StringLength>
 8000b82:	4603      	mov	r3, r0
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	2200      	movs	r2, #0
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4814      	ldr	r0, [pc, #80]	; (8000bdc <PrintMainMenu+0xa0>)
 8000b8c:	f7ff fd44 	bl	8000618 <ComMgr_Println>
	ComMgr_Println("| To set an alarm press          [3]|", StringLength("| To set an alarm press          [3]|"), COMMGR_UART_ID);
 8000b90:	4813      	ldr	r0, [pc, #76]	; (8000be0 <PrintMainMenu+0xa4>)
 8000b92:	f000 fcaa 	bl	80014ea <StringLength>
 8000b96:	4603      	mov	r3, r0
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4810      	ldr	r0, [pc, #64]	; (8000be0 <PrintMainMenu+0xa4>)
 8000ba0:	f7ff fd3a 	bl	8000618 <ComMgr_Println>
	ComMgr_Println("| To exit the dashboard press    [0]|", StringLength("| To exit the dashboard press    [0]|"), COMMGR_UART_ID);
 8000ba4:	480f      	ldr	r0, [pc, #60]	; (8000be4 <PrintMainMenu+0xa8>)
 8000ba6:	f000 fca0 	bl	80014ea <StringLength>
 8000baa:	4603      	mov	r3, r0
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	2200      	movs	r2, #0
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	480c      	ldr	r0, [pc, #48]	; (8000be4 <PrintMainMenu+0xa8>)
 8000bb4:	f7ff fd30 	bl	8000618 <ComMgr_Println>
	ComMgr_Println("|___________________________________|\n", StringLength("|-----------------------------------|\n"), COMMGR_UART_ID);
 8000bb8:	480b      	ldr	r0, [pc, #44]	; (8000be8 <PrintMainMenu+0xac>)
 8000bba:	f000 fc96 	bl	80014ea <StringLength>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4809      	ldr	r0, [pc, #36]	; (8000bec <PrintMainMenu+0xb0>)
 8000bc8:	f7ff fd26 	bl	8000618 <ComMgr_Println>
}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	08007544 	.word	0x08007544
 8000bd4:	08007564 	.word	0x08007564
 8000bd8:	0800758c 	.word	0x0800758c
 8000bdc:	080075b4 	.word	0x080075b4
 8000be0:	080075dc 	.word	0x080075dc
 8000be4:	08007604 	.word	0x08007604
 8000be8:	0800762c 	.word	0x0800762c
 8000bec:	08007654 	.word	0x08007654

08000bf0 <CheckUserName>:

uint8_t CheckUserName(const char* Copy_pcSavedUserName, const char* Copy_pcInputUserName)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
	if (STRINGS_EQUAL == IsStringsEqual(Copy_pcInputUserName, Copy_pcSavedUserName))
 8000bfa:	6879      	ldr	r1, [r7, #4]
 8000bfc:	6838      	ldr	r0, [r7, #0]
 8000bfe:	f000 fc51 	bl	80014a4 <IsStringsEqual>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d101      	bne.n	8000c0c <CheckUserName+0x1c>
	{
		return USER_NAME_CORRECT;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	e000      	b.n	8000c0e <CheckUserName+0x1e>
	}

	return USER_NAME_INCORRECT;
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <CheckPassword>:

uint8_t CheckPassword(const char* Copy_pcSavedPassword, const char* Copy_pcInputPassword)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
 8000c1e:	6039      	str	r1, [r7, #0]
	if (STRINGS_EQUAL == IsStringsEqual(Copy_pcInputPassword, Copy_pcSavedPassword))
 8000c20:	6879      	ldr	r1, [r7, #4]
 8000c22:	6838      	ldr	r0, [r7, #0]
 8000c24:	f000 fc3e 	bl	80014a4 <IsStringsEqual>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d101      	bne.n	8000c32 <CheckPassword+0x1c>
	{
		return PASSWORD_CORRECT;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e000      	b.n	8000c34 <CheckPassword+0x1e>
	}

	return PASSWORD_INCORRECT;
 8000c32:	2300      	movs	r3, #0
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <DisplayTimeDate>:

void DisplayTimeDate()
{
 8000c3c:	b5b0      	push	{r4, r5, r7, lr}
 8000c3e:	b08e      	sub	sp, #56	; 0x38
 8000c40:	af00      	add	r7, sp, #0
	char Local_StrBuf[9];
	char *Local_TimeFormat = "";
 8000c42:	4b3d      	ldr	r3, [pc, #244]	; (8000d38 <DisplayTimeDate+0xfc>)
 8000c44:	637b      	str	r3, [r7, #52]	; 0x34
	char *Local_DayOfWeef[7] = {"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"};
 8000c46:	4b3d      	ldr	r3, [pc, #244]	; (8000d3c <DisplayTimeDate+0x100>)
 8000c48:	f107 040c 	add.w	r4, r7, #12
 8000c4c:	461d      	mov	r5, r3
 8000c4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	DS1307_Clock_t Local_Time;
	DS1307_Calender_t Local_Date;

	DS1307_u8GetTime(&Local_Time);
 8000c5a:	f107 0308 	add.w	r3, r7, #8
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fea1 	bl	80009a6 <DS1307_u8GetTime>
	DS1307_u8GetDate(&Local_Date);
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff ff2d 	bl	8000ac6 <DS1307_u8GetDate>

	if (DS1307_24_HOUR != Local_Time.TimeFormat)
 8000c6c:	7afb      	ldrb	r3, [r7, #11]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d006      	beq.n	8000c80 <DisplayTimeDate+0x44>
	{
		Local_TimeFormat = (DS1307_12_HOUR_AM == Local_Time.TimeFormat)? "AM" : "PM";
 8000c72:	7afb      	ldrb	r3, [r7, #11]
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d101      	bne.n	8000c7c <DisplayTimeDate+0x40>
 8000c78:	4b31      	ldr	r3, [pc, #196]	; (8000d40 <DisplayTimeDate+0x104>)
 8000c7a:	e000      	b.n	8000c7e <DisplayTimeDate+0x42>
 8000c7c:	4b31      	ldr	r3, [pc, #196]	; (8000d44 <DisplayTimeDate+0x108>)
 8000c7e:	637b      	str	r3, [r7, #52]	; 0x34
	}

	Time2String(&Local_Time, Local_StrBuf);
 8000c80:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000c84:	f107 0308 	add.w	r3, r7, #8
 8000c88:	4611      	mov	r1, r2
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 f9f6 	bl	800107c <Time2String>

	/* Send time via SPI */
	ComMgr_Print(Local_StrBuf, (StringLength(Local_StrBuf) + 1U), COMMGR_SPI_ID);
 8000c90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c94:	4618      	mov	r0, r3
 8000c96:	f000 fc28 	bl	80014ea <StringLength>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	b2d9      	uxtb	r1, r3
 8000ca2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff fc91 	bl	80005d0 <ComMgr_Print>
	ComMgr_Print(Local_TimeFormat, (StringLength(Local_TimeFormat) + 1U), COMMGR_SPI_ID);
 8000cae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000cb0:	f000 fc1b 	bl	80014ea <StringLength>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	3301      	adds	r3, #1
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000cc2:	f7ff fc85 	bl	80005d0 <ComMgr_Print>

	Date2String(&Local_Date, Local_StrBuf);
 8000cc6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000cca:	1d3b      	adds	r3, r7, #4
 8000ccc:	4611      	mov	r1, r2
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 fa56 	bl	8001180 <Date2String>

	/* Send date via SPI */
	ComMgr_Print(Local_StrBuf, (StringLength(Local_StrBuf) + 1U), COMMGR_SPI_ID);
 8000cd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 fc06 	bl	80014ea <StringLength>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	b2d9      	uxtb	r1, r3
 8000ce6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cea:	2201      	movs	r2, #1
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fc6f 	bl	80005d0 <ComMgr_Print>
	ComMgr_Print(Local_DayOfWeef[Local_Date.DayOfWeek - 1U], (StringLength(Local_DayOfWeef[Local_Date.DayOfWeek - 1U]) + 1U), COMMGR_SPI_ID);
 8000cf2:	793b      	ldrb	r3, [r7, #4]
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	3338      	adds	r3, #56	; 0x38
 8000cfa:	443b      	add	r3, r7
 8000cfc:	f853 4c2c 	ldr.w	r4, [r3, #-44]
 8000d00:	793b      	ldrb	r3, [r7, #4]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	3338      	adds	r3, #56	; 0x38
 8000d08:	443b      	add	r3, r7
 8000d0a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 fbeb 	bl	80014ea <StringLength>
 8000d14:	4603      	mov	r3, r0
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	3301      	adds	r3, #1
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4620      	mov	r0, r4
 8000d22:	f7ff fc55 	bl	80005d0 <ComMgr_Print>
	ComMgr_Print("", 0U, COMMGR_SPI_ID); /* New Line */
 8000d26:	2201      	movs	r2, #1
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4803      	ldr	r0, [pc, #12]	; (8000d38 <DisplayTimeDate+0xfc>)
 8000d2c:	f7ff fc50 	bl	80005d0 <ComMgr_Print>
}
 8000d30:	bf00      	nop
 8000d32:	3738      	adds	r7, #56	; 0x38
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bdb0      	pop	{r4, r5, r7, pc}
 8000d38:	0800767c 	.word	0x0800767c
 8000d3c:	080076a4 	.word	0x080076a4
 8000d40:	08007680 	.word	0x08007680
 8000d44:	08007684 	.word	0x08007684

08000d48 <SetTimeDate>:

void SetTimeDate()
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
	char Local_cTimeDateBuf[13] = {0};
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	f107 030c 	add.w	r3, r7, #12
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	721a      	strb	r2, [r3, #8]
	DS1307_Clock_t Local_Time;
	DS1307_Calender_t Local_Date;

	/* Print the set time message to the console and get the current time from the user */
	ComMgr_Print("Please, enter the current time [Format-> HH:MM:SS TM]", StringLength("Please, enter the current time [Format-> HH:MM:SS TF]"), COMMGR_UART_ID);
 8000d5e:	482d      	ldr	r0, [pc, #180]	; (8000e14 <SetTimeDate+0xcc>)
 8000d60:	f000 fbc3 	bl	80014ea <StringLength>
 8000d64:	4603      	mov	r3, r0
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	2200      	movs	r2, #0
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	482a      	ldr	r0, [pc, #168]	; (8000e18 <SetTimeDate+0xd0>)
 8000d6e:	f7ff fc2f 	bl	80005d0 <ComMgr_Print>
	ComMgr_Print("\t'TF: is the time format, It can be AM or PM or 24': ", StringLength("\t'TF: is the time format, It can be AM or PM or 24': "), COMMGR_UART_ID);
 8000d72:	482a      	ldr	r0, [pc, #168]	; (8000e1c <SetTimeDate+0xd4>)
 8000d74:	f000 fbb9 	bl	80014ea <StringLength>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4826      	ldr	r0, [pc, #152]	; (8000e1c <SetTimeDate+0xd4>)
 8000d82:	f7ff fc25 	bl	80005d0 <ComMgr_Print>
	ComMgr_Scan(Local_cTimeDateBuf, NOT_PASSWORD, COMMGR_UART_ID);
 8000d86:	f107 0308 	add.w	r3, r7, #8
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fc78 	bl	8000684 <ComMgr_Scan>
	ComMgr_Println("\r\n", 2U, COMMGR_UART_ID); /* 2 New Line */
 8000d94:	2200      	movs	r2, #0
 8000d96:	2102      	movs	r1, #2
 8000d98:	4821      	ldr	r0, [pc, #132]	; (8000e20 <SetTimeDate+0xd8>)
 8000d9a:	f7ff fc3d 	bl	8000618 <ComMgr_Println>

	/* Convert the time scanned from the console from string to DS1307_Clock_t */
	String2Time(Local_cTimeDateBuf, &Local_Time);
 8000d9e:	1d3a      	adds	r2, r7, #4
 8000da0:	f107 0308 	add.w	r3, r7, #8
 8000da4:	4611      	mov	r1, r2
 8000da6:	4618      	mov	r0, r3
 8000da8:	f000 fa6c 	bl	8001284 <String2Time>

	/* Set the desired time */
	DS1307_u8SetTime(&Local_Time);
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff fdb6 	bl	8000920 <DS1307_u8SetTime>

	/* Print the set date message to the console and get the current date from the user */
	ComMgr_Print("Please, enter the current date [Format-> DD/MM/YY DOW]", StringLength("Please, enter the current date [Format-> DD/MM/YY DOW]"), COMMGR_UART_ID);
 8000db4:	481b      	ldr	r0, [pc, #108]	; (8000e24 <SetTimeDate+0xdc>)
 8000db6:	f000 fb98 	bl	80014ea <StringLength>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4818      	ldr	r0, [pc, #96]	; (8000e24 <SetTimeDate+0xdc>)
 8000dc4:	f7ff fc04 	bl	80005d0 <ComMgr_Print>
	ComMgr_Print("\t'DOW: is the day of week, It can be Sun or Mon or Tue or Wed or Thu or Fri or Sat': ", StringLength("\t'DOW: is the day of week, It can be Sun or Mon or Tue or Wed or Thu or Fri or Sat': "), COMMGR_UART_ID);
 8000dc8:	4817      	ldr	r0, [pc, #92]	; (8000e28 <SetTimeDate+0xe0>)
 8000dca:	f000 fb8e 	bl	80014ea <StringLength>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4814      	ldr	r0, [pc, #80]	; (8000e28 <SetTimeDate+0xe0>)
 8000dd8:	f7ff fbfa 	bl	80005d0 <ComMgr_Print>
	ComMgr_Scan(Local_cTimeDateBuf, NOT_PASSWORD, COMMGR_UART_ID);
 8000ddc:	f107 0308 	add.w	r3, r7, #8
 8000de0:	2200      	movs	r2, #0
 8000de2:	2100      	movs	r1, #0
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fc4d 	bl	8000684 <ComMgr_Scan>
	ComMgr_Println("\r\n", 2U, COMMGR_UART_ID); /* 2 New Line */
 8000dea:	2200      	movs	r2, #0
 8000dec:	2102      	movs	r1, #2
 8000dee:	480c      	ldr	r0, [pc, #48]	; (8000e20 <SetTimeDate+0xd8>)
 8000df0:	f7ff fc12 	bl	8000618 <ComMgr_Println>

	/* Convert the time scanned from the console from string to DS1307_Calender_t */
	String2Date(Local_cTimeDateBuf, &Local_Date);
 8000df4:	463a      	mov	r2, r7
 8000df6:	f107 0308 	add.w	r3, r7, #8
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f000 fa95 	bl	800132c <String2Date>

	/* Set the desired time */
	DS1307_u8SetDate(&Local_Date);
 8000e02:	463b      	mov	r3, r7
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff fe20 	bl	8000a4a <DS1307_u8SetDate>
}
 8000e0a:	bf00      	nop
 8000e0c:	3718      	adds	r7, #24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	080076c0 	.word	0x080076c0
 8000e18:	080076f8 	.word	0x080076f8
 8000e1c:	08007730 	.word	0x08007730
 8000e20:	08007768 	.word	0x08007768
 8000e24:	0800776c 	.word	0x0800776c
 8000e28:	080077a4 	.word	0x080077a4

08000e2c <SetAlarm>:

void SetAlarm()
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
	char Local_cStrBuf[16] = {0};
 8000e32:	2300      	movs	r3, #0
 8000e34:	603b      	str	r3, [r7, #0]
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]

	/* Print the alarm number message to the console and get the alarm number from the user */
	ComMgr_Print("Please, enter alarm number [From 1 to 5]: ", StringLength("Please, enter alarm number [From 1 to 5]: "), COMMGR_UART_ID);
 8000e40:	4844      	ldr	r0, [pc, #272]	; (8000f54 <SetAlarm+0x128>)
 8000e42:	f000 fb52 	bl	80014ea <StringLength>
 8000e46:	4603      	mov	r3, r0
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4841      	ldr	r0, [pc, #260]	; (8000f54 <SetAlarm+0x128>)
 8000e50:	f7ff fbbe 	bl	80005d0 <ComMgr_Print>
	ComMgr_Scan(&AlarmNumber, NOT_PASSWORD, COMMGR_UART_ID);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2100      	movs	r1, #0
 8000e58:	483f      	ldr	r0, [pc, #252]	; (8000f58 <SetAlarm+0x12c>)
 8000e5a:	f7ff fc13 	bl	8000684 <ComMgr_Scan>
	ComMgr_Println("", 0U, COMMGR_UART_ID); /* New Line */
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2100      	movs	r1, #0
 8000e62:	483e      	ldr	r0, [pc, #248]	; (8000f5c <SetAlarm+0x130>)
 8000e64:	f7ff fbd8 	bl	8000618 <ComMgr_Println>

	/* Print the alarm name message to the console and get the alarm name from the user */
	ComMgr_Print("Please, enter alarm name [Max 15 Letter]: ", StringLength("Please, enter alarm name [Max 15 Letter]: "), COMMGR_UART_ID);
 8000e68:	483d      	ldr	r0, [pc, #244]	; (8000f60 <SetAlarm+0x134>)
 8000e6a:	f000 fb3e 	bl	80014ea <StringLength>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	2200      	movs	r2, #0
 8000e74:	4619      	mov	r1, r3
 8000e76:	483a      	ldr	r0, [pc, #232]	; (8000f60 <SetAlarm+0x134>)
 8000e78:	f7ff fbaa 	bl	80005d0 <ComMgr_Print>
	ComMgr_Scan(AlarmsMessege[(uint8_t)(AlarmNumber - '1')], NOT_PASSWORD, COMMGR_UART_ID);
 8000e7c:	4b36      	ldr	r3, [pc, #216]	; (8000f58 <SetAlarm+0x12c>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	3b31      	subs	r3, #49	; 0x31
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	461a      	mov	r2, r3
 8000e86:	4b37      	ldr	r3, [pc, #220]	; (8000f64 <SetAlarm+0x138>)
 8000e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff fbf7 	bl	8000684 <ComMgr_Scan>
	ComMgr_Println("", 0U, COMMGR_UART_ID); /* New Line */
 8000e96:	2200      	movs	r2, #0
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4830      	ldr	r0, [pc, #192]	; (8000f5c <SetAlarm+0x130>)
 8000e9c:	f7ff fbbc 	bl	8000618 <ComMgr_Println>

	/* Print the set time message to the console and get the alarm time from the user */
	ComMgr_Print("Please, enter the alarm time [Format-> HH:MM:SS TM]", StringLength("Please, enter the alarm time [Format-> HH:MM:SS TF]"), COMMGR_UART_ID);
 8000ea0:	4831      	ldr	r0, [pc, #196]	; (8000f68 <SetAlarm+0x13c>)
 8000ea2:	f000 fb22 	bl	80014ea <StringLength>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	2200      	movs	r2, #0
 8000eac:	4619      	mov	r1, r3
 8000eae:	482f      	ldr	r0, [pc, #188]	; (8000f6c <SetAlarm+0x140>)
 8000eb0:	f7ff fb8e 	bl	80005d0 <ComMgr_Print>
	ComMgr_Print("\t'TF: is the time format, It can be AM or PM or 24': ", StringLength("\t'TF: is the time format, It can be AM or PM or 24': "), COMMGR_UART_ID);
 8000eb4:	482e      	ldr	r0, [pc, #184]	; (8000f70 <SetAlarm+0x144>)
 8000eb6:	f000 fb18 	bl	80014ea <StringLength>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	482b      	ldr	r0, [pc, #172]	; (8000f70 <SetAlarm+0x144>)
 8000ec4:	f7ff fb84 	bl	80005d0 <ComMgr_Print>
	ComMgr_Scan(Local_cStrBuf, NOT_PASSWORD, COMMGR_UART_ID);
 8000ec8:	463b      	mov	r3, r7
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fbd8 	bl	8000684 <ComMgr_Scan>
	ComMgr_Println("", 0U, COMMGR_UART_ID); /* New Line */
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4820      	ldr	r0, [pc, #128]	; (8000f5c <SetAlarm+0x130>)
 8000eda:	f7ff fb9d 	bl	8000618 <ComMgr_Println>

	/* Convert the time scanned from the console from string to DS1307_Clock_t and set it to AlarmsTime array*/
	String2Time(Local_cStrBuf, &AlarmsTime[(uint8_t)(AlarmNumber - '1')]);
 8000ede:	4b1e      	ldr	r3, [pc, #120]	; (8000f58 <SetAlarm+0x12c>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	3b31      	subs	r3, #49	; 0x31
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	4a22      	ldr	r2, [pc, #136]	; (8000f74 <SetAlarm+0x148>)
 8000eea:	441a      	add	r2, r3
 8000eec:	463b      	mov	r3, r7
 8000eee:	4611      	mov	r1, r2
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f000 f9c7 	bl	8001284 <String2Time>

	/* Print the set date message to the console and get the alarm date from the user */
	ComMgr_Print("Please, enter the alarm date [Format-> DD/MM/YY DOW]", StringLength("Please, enter the alarm date [Format-> DD/MM/YY DOW]"), COMMGR_UART_ID);
 8000ef6:	4820      	ldr	r0, [pc, #128]	; (8000f78 <SetAlarm+0x14c>)
 8000ef8:	f000 faf7 	bl	80014ea <StringLength>
 8000efc:	4603      	mov	r3, r0
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2200      	movs	r2, #0
 8000f02:	4619      	mov	r1, r3
 8000f04:	481c      	ldr	r0, [pc, #112]	; (8000f78 <SetAlarm+0x14c>)
 8000f06:	f7ff fb63 	bl	80005d0 <ComMgr_Print>
	ComMgr_Print("\t'DOW: is the day of week, It can be Sun or Mon or Tue or Wed or Thu or Fri or Sat': ", StringLength("\t'DOW: is the day of week, It can be Sun or Mon or Tue or Wed or Thu or Fri or Sat': "), COMMGR_UART_ID);
 8000f0a:	481c      	ldr	r0, [pc, #112]	; (8000f7c <SetAlarm+0x150>)
 8000f0c:	f000 faed 	bl	80014ea <StringLength>
 8000f10:	4603      	mov	r3, r0
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	2200      	movs	r2, #0
 8000f16:	4619      	mov	r1, r3
 8000f18:	4818      	ldr	r0, [pc, #96]	; (8000f7c <SetAlarm+0x150>)
 8000f1a:	f7ff fb59 	bl	80005d0 <ComMgr_Print>
	ComMgr_Scan(Local_cStrBuf, NOT_PASSWORD, COMMGR_UART_ID);
 8000f1e:	463b      	mov	r3, r7
 8000f20:	2200      	movs	r2, #0
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fbad 	bl	8000684 <ComMgr_Scan>
	ComMgr_Println("", 0U, COMMGR_UART_ID); /* New Line */
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	480b      	ldr	r0, [pc, #44]	; (8000f5c <SetAlarm+0x130>)
 8000f30:	f7ff fb72 	bl	8000618 <ComMgr_Println>

	/* Convert the date scanned from the console from string to DS1307_Calender_t and set it to AlarmsDate array*/
	String2Date(Local_cStrBuf, &AlarmsDate[(uint8_t)(AlarmNumber - '1')]);
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <SetAlarm+0x12c>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	3b31      	subs	r3, #49	; 0x31
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	4a10      	ldr	r2, [pc, #64]	; (8000f80 <SetAlarm+0x154>)
 8000f40:	441a      	add	r2, r3
 8000f42:	463b      	mov	r3, r7
 8000f44:	4611      	mov	r1, r2
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 f9f0 	bl	800132c <String2Date>
}
 8000f4c:	bf00      	nop
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	080077fc 	.word	0x080077fc
 8000f58:	20000060 	.word	0x20000060
 8000f5c:	0800767c 	.word	0x0800767c
 8000f60:	08007828 	.word	0x08007828
 8000f64:	20000064 	.word	0x20000064
 8000f68:	08007854 	.word	0x08007854
 8000f6c:	08007888 	.word	0x08007888
 8000f70:	08007730 	.word	0x08007730
 8000f74:	20000038 	.word	0x20000038
 8000f78:	080078bc 	.word	0x080078bc
 8000f7c:	080077a4 	.word	0x080077a4
 8000f80:	2000004c 	.word	0x2000004c

08000f84 <DoesAlarmCame>:

uint8_t DoesAlarmCame(AlarmNum_t Copy_AlarmNumber)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
	int8_t Local_u8CurrentHours24, Local_u8AlarmHours24;
	DS1307_Clock_t Local_CurrentTime;
	DS1307_Calender_t Local_CurrentDate;

	DS1307_u8GetTime(&Local_CurrentTime);
 8000f8e:	f107 0310 	add.w	r3, r7, #16
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fd07 	bl	80009a6 <DS1307_u8GetTime>
	DS1307_u8GetDate(&Local_CurrentDate);
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fd92 	bl	8000ac6 <DS1307_u8GetDate>

	Local_u8AlarmHours24 = HoursTo24(AlarmsTime[Copy_AlarmNumber].Hours, AlarmsTime[Copy_AlarmNumber].TimeFormat);
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	4a33      	ldr	r2, [pc, #204]	; (8001074 <DoesAlarmCame+0xf0>)
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	789a      	ldrb	r2, [r3, #2]
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	4931      	ldr	r1, [pc, #196]	; (8001074 <DoesAlarmCame+0xf0>)
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	78db      	ldrb	r3, [r3, #3]
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4610      	mov	r0, r2
 8000fba:	f000 fa41 	bl	8001440 <HoursTo24>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	75fb      	strb	r3, [r7, #23]
	Local_u8CurrentHours24 = HoursTo24(Local_CurrentTime.Hours, Local_CurrentTime.TimeFormat);
 8000fc2:	7cbb      	ldrb	r3, [r7, #18]
 8000fc4:	7cfa      	ldrb	r2, [r7, #19]
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 fa39 	bl	8001440 <HoursTo24>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	75bb      	strb	r3, [r7, #22]

	if ((( (int8_t) AlarmsDate[Copy_AlarmNumber].Year - (int8_t) Local_CurrentDate.Year) <= 0)
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	4a28      	ldr	r2, [pc, #160]	; (8001078 <DoesAlarmCame+0xf4>)
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	4413      	add	r3, r2
 8000fda:	78db      	ldrb	r3, [r3, #3]
 8000fdc:	b25b      	sxtb	r3, r3
 8000fde:	461a      	mov	r2, r3
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	b25b      	sxtb	r3, r3
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	dc3e      	bgt.n	8001068 <DoesAlarmCame+0xe4>
			&& (( (int8_t) AlarmsDate[Copy_AlarmNumber].Month - (int8_t) Local_CurrentDate.Month) <= 0)
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	4a22      	ldr	r2, [pc, #136]	; (8001078 <DoesAlarmCame+0xf4>)
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	789b      	ldrb	r3, [r3, #2]
 8000ff4:	b25b      	sxtb	r3, r3
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	7bbb      	ldrb	r3, [r7, #14]
 8000ffa:	b25b      	sxtb	r3, r3
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	dc32      	bgt.n	8001068 <DoesAlarmCame+0xe4>
			&& (( (int8_t) AlarmsDate[Copy_AlarmNumber].Date - (int8_t) Local_CurrentDate.Date) <= 0)
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	4a1c      	ldr	r2, [pc, #112]	; (8001078 <DoesAlarmCame+0xf4>)
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	4413      	add	r3, r2
 800100a:	785b      	ldrb	r3, [r3, #1]
 800100c:	b25b      	sxtb	r3, r3
 800100e:	461a      	mov	r2, r3
 8001010:	7b7b      	ldrb	r3, [r7, #13]
 8001012:	b25b      	sxtb	r3, r3
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	dc26      	bgt.n	8001068 <DoesAlarmCame+0xe4>
			&& (( (int8_t) AlarmsDate[Copy_AlarmNumber].DayOfWeek - (int8_t) Local_CurrentDate.DayOfWeek) == 0)
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	4a16      	ldr	r2, [pc, #88]	; (8001078 <DoesAlarmCame+0xf4>)
 800101e:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 8001022:	7b3b      	ldrb	r3, [r7, #12]
 8001024:	429a      	cmp	r2, r3
 8001026:	d11f      	bne.n	8001068 <DoesAlarmCame+0xe4>
			&& (( (int8_t) Local_u8AlarmHours24 - (int8_t) Local_u8CurrentHours24) <= 0)
 8001028:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800102c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	2b00      	cmp	r3, #0
 8001034:	dc18      	bgt.n	8001068 <DoesAlarmCame+0xe4>
			&& (( (int8_t) AlarmsTime[Copy_AlarmNumber].Minutes - (int8_t) Local_CurrentTime.Minutes) <= 0)
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	4a0e      	ldr	r2, [pc, #56]	; (8001074 <DoesAlarmCame+0xf0>)
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	785b      	ldrb	r3, [r3, #1]
 8001040:	b25b      	sxtb	r3, r3
 8001042:	461a      	mov	r2, r3
 8001044:	7c7b      	ldrb	r3, [r7, #17]
 8001046:	b25b      	sxtb	r3, r3
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	dc0c      	bgt.n	8001068 <DoesAlarmCame+0xe4>
			&& (( (int8_t) AlarmsTime[Copy_AlarmNumber].Seconds - (int8_t) Local_CurrentTime.Seconds) <= 0)
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	4a08      	ldr	r2, [pc, #32]	; (8001074 <DoesAlarmCame+0xf0>)
 8001052:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8001056:	b25b      	sxtb	r3, r3
 8001058:	461a      	mov	r2, r3
 800105a:	7c3b      	ldrb	r3, [r7, #16]
 800105c:	b25b      	sxtb	r3, r3
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	2b00      	cmp	r3, #0
 8001062:	dc01      	bgt.n	8001068 <DoesAlarmCame+0xe4>
		)
	{
		return ALARM_HAS_COME;
 8001064:	2301      	movs	r3, #1
 8001066:	e000      	b.n	800106a <DoesAlarmCame+0xe6>
	}

	return ALARM_HAS_NOT_COME;
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000038 	.word	0x20000038
 8001078:	2000004c 	.word	0x2000004c

0800107c <Time2String>:

/* Private Functions Prototype */

/* Format: HH:MM:SS, Copy_pStrBuf size = 9 */
static void Time2String(const DS1307_Clock_t *Copy_Time, char *Copy_pStrBuf)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]

	Copy_pStrBuf[0] = (Copy_Time->Hours < 10)? '0': (Copy_Time->Hours / 10) + '0';
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	789b      	ldrb	r3, [r3, #2]
 800108a:	2b09      	cmp	r3, #9
 800108c:	d909      	bls.n	80010a2 <Time2String+0x26>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	789b      	ldrb	r3, [r3, #2]
 8001092:	4a3a      	ldr	r2, [pc, #232]	; (800117c <Time2String+0x100>)
 8001094:	fba2 2303 	umull	r2, r3, r2, r3
 8001098:	08db      	lsrs	r3, r3, #3
 800109a:	b2db      	uxtb	r3, r3
 800109c:	3330      	adds	r3, #48	; 0x30
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	e000      	b.n	80010a4 <Time2String+0x28>
 80010a2:	2230      	movs	r2, #48	; 0x30
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	701a      	strb	r2, [r3, #0]
	Copy_pStrBuf[1] = (Copy_Time->Hours % 10) + '0';
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	789a      	ldrb	r2, [r3, #2]
 80010ac:	4b33      	ldr	r3, [pc, #204]	; (800117c <Time2String+0x100>)
 80010ae:	fba3 1302 	umull	r1, r3, r3, r2
 80010b2:	08d9      	lsrs	r1, r3, #3
 80010b4:	460b      	mov	r3, r1
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	440b      	add	r3, r1
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	3301      	adds	r3, #1
 80010c4:	3230      	adds	r2, #48	; 0x30
 80010c6:	b2d2      	uxtb	r2, r2
 80010c8:	701a      	strb	r2, [r3, #0]
	Copy_pStrBuf[2] = ':';
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	223a      	movs	r2, #58	; 0x3a
 80010d0:	701a      	strb	r2, [r3, #0]
	Copy_pStrBuf[3] = (Copy_Time->Minutes < 10)? '0': (Copy_Time->Minutes / 10) + '0';
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	785b      	ldrb	r3, [r3, #1]
 80010d6:	2b09      	cmp	r3, #9
 80010d8:	d909      	bls.n	80010ee <Time2String+0x72>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	785b      	ldrb	r3, [r3, #1]
 80010de:	4a27      	ldr	r2, [pc, #156]	; (800117c <Time2String+0x100>)
 80010e0:	fba2 2303 	umull	r2, r3, r2, r3
 80010e4:	08db      	lsrs	r3, r3, #3
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	3330      	adds	r3, #48	; 0x30
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	e000      	b.n	80010f0 <Time2String+0x74>
 80010ee:	2230      	movs	r2, #48	; 0x30
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	3303      	adds	r3, #3
 80010f4:	701a      	strb	r2, [r3, #0]
	Copy_pStrBuf[4] = (Copy_Time->Minutes % 10) + '0';
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	785a      	ldrb	r2, [r3, #1]
 80010fa:	4b20      	ldr	r3, [pc, #128]	; (800117c <Time2String+0x100>)
 80010fc:	fba3 1302 	umull	r1, r3, r3, r2
 8001100:	08d9      	lsrs	r1, r3, #3
 8001102:	460b      	mov	r3, r1
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	440b      	add	r3, r1
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	b2da      	uxtb	r2, r3
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	3304      	adds	r3, #4
 8001112:	3230      	adds	r2, #48	; 0x30
 8001114:	b2d2      	uxtb	r2, r2
 8001116:	701a      	strb	r2, [r3, #0]
	Copy_pStrBuf[5] = ':';
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	3305      	adds	r3, #5
 800111c:	223a      	movs	r2, #58	; 0x3a
 800111e:	701a      	strb	r2, [r3, #0]
	Copy_pStrBuf[6] = (Copy_Time->Seconds < 10)? '0': (Copy_Time->Seconds / 10) + '0';
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b09      	cmp	r3, #9
 8001126:	d909      	bls.n	800113c <Time2String+0xc0>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	4a13      	ldr	r2, [pc, #76]	; (800117c <Time2String+0x100>)
 800112e:	fba2 2303 	umull	r2, r3, r2, r3
 8001132:	08db      	lsrs	r3, r3, #3
 8001134:	b2db      	uxtb	r3, r3
 8001136:	3330      	adds	r3, #48	; 0x30
 8001138:	b2da      	uxtb	r2, r3
 800113a:	e000      	b.n	800113e <Time2String+0xc2>
 800113c:	2230      	movs	r2, #48	; 0x30
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	3306      	adds	r3, #6
 8001142:	701a      	strb	r2, [r3, #0]
	Copy_pStrBuf[7] = (Copy_Time->Seconds % 10) + '0';
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	781a      	ldrb	r2, [r3, #0]
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <Time2String+0x100>)
 800114a:	fba3 1302 	umull	r1, r3, r3, r2
 800114e:	08d9      	lsrs	r1, r3, #3
 8001150:	460b      	mov	r3, r1
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	440b      	add	r3, r1
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	b2da      	uxtb	r2, r3
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	3307      	adds	r3, #7
 8001160:	3230      	adds	r2, #48	; 0x30
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	701a      	strb	r2, [r3, #0]
	Copy_pStrBuf[8] = '\0';
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	3308      	adds	r3, #8
 800116a:	2200      	movs	r2, #0
 800116c:	701a      	strb	r2, [r3, #0]
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	cccccccd 	.word	0xcccccccd

08001180 <Date2String>:

/* Format: DD/MM/YY, Copy_pStrBuf size = 9 */
static void Date2String(const DS1307_Calender_t *Copy_Date, char *Copy_pStrBuf)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
	Copy_pStrBuf[0] = (Copy_Date->Date < 10)? '0': (Copy_Date->Date / 10) + '0';
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	785b      	ldrb	r3, [r3, #1]
 800118e:	2b09      	cmp	r3, #9
 8001190:	d909      	bls.n	80011a6 <Date2String+0x26>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	785b      	ldrb	r3, [r3, #1]
 8001196:	4a3a      	ldr	r2, [pc, #232]	; (8001280 <Date2String+0x100>)
 8001198:	fba2 2303 	umull	r2, r3, r2, r3
 800119c:	08db      	lsrs	r3, r3, #3
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	3330      	adds	r3, #48	; 0x30
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	e000      	b.n	80011a8 <Date2String+0x28>
 80011a6:	2230      	movs	r2, #48	; 0x30
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	701a      	strb	r2, [r3, #0]
	Copy_pStrBuf[1] = (Copy_Date->Date % 10) + '0';
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	785a      	ldrb	r2, [r3, #1]
 80011b0:	4b33      	ldr	r3, [pc, #204]	; (8001280 <Date2String+0x100>)
 80011b2:	fba3 1302 	umull	r1, r3, r3, r2
 80011b6:	08d9      	lsrs	r1, r3, #3
 80011b8:	460b      	mov	r3, r1
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	440b      	add	r3, r1
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	3301      	adds	r3, #1
 80011c8:	3230      	adds	r2, #48	; 0x30
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	701a      	strb	r2, [r3, #0]
	Copy_pStrBuf[2] = '/';
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	3302      	adds	r3, #2
 80011d2:	222f      	movs	r2, #47	; 0x2f
 80011d4:	701a      	strb	r2, [r3, #0]
	Copy_pStrBuf[3] = (Copy_Date->Month < 10)? '0': (Copy_Date->Month / 10) + '0';
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	789b      	ldrb	r3, [r3, #2]
 80011da:	2b09      	cmp	r3, #9
 80011dc:	d909      	bls.n	80011f2 <Date2String+0x72>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	789b      	ldrb	r3, [r3, #2]
 80011e2:	4a27      	ldr	r2, [pc, #156]	; (8001280 <Date2String+0x100>)
 80011e4:	fba2 2303 	umull	r2, r3, r2, r3
 80011e8:	08db      	lsrs	r3, r3, #3
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	3330      	adds	r3, #48	; 0x30
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	e000      	b.n	80011f4 <Date2String+0x74>
 80011f2:	2230      	movs	r2, #48	; 0x30
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	3303      	adds	r3, #3
 80011f8:	701a      	strb	r2, [r3, #0]
	Copy_pStrBuf[4] = (Copy_Date->Month % 10) + '0';
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	789a      	ldrb	r2, [r3, #2]
 80011fe:	4b20      	ldr	r3, [pc, #128]	; (8001280 <Date2String+0x100>)
 8001200:	fba3 1302 	umull	r1, r3, r3, r2
 8001204:	08d9      	lsrs	r1, r3, #3
 8001206:	460b      	mov	r3, r1
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	440b      	add	r3, r1
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	b2da      	uxtb	r2, r3
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	3304      	adds	r3, #4
 8001216:	3230      	adds	r2, #48	; 0x30
 8001218:	b2d2      	uxtb	r2, r2
 800121a:	701a      	strb	r2, [r3, #0]
	Copy_pStrBuf[5] = '/';
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	3305      	adds	r3, #5
 8001220:	222f      	movs	r2, #47	; 0x2f
 8001222:	701a      	strb	r2, [r3, #0]
	Copy_pStrBuf[6] = (Copy_Date->Year < 10)? '0': (Copy_Date->Year / 10) + '0';
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	78db      	ldrb	r3, [r3, #3]
 8001228:	2b09      	cmp	r3, #9
 800122a:	d909      	bls.n	8001240 <Date2String+0xc0>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	78db      	ldrb	r3, [r3, #3]
 8001230:	4a13      	ldr	r2, [pc, #76]	; (8001280 <Date2String+0x100>)
 8001232:	fba2 2303 	umull	r2, r3, r2, r3
 8001236:	08db      	lsrs	r3, r3, #3
 8001238:	b2db      	uxtb	r3, r3
 800123a:	3330      	adds	r3, #48	; 0x30
 800123c:	b2da      	uxtb	r2, r3
 800123e:	e000      	b.n	8001242 <Date2String+0xc2>
 8001240:	2230      	movs	r2, #48	; 0x30
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	3306      	adds	r3, #6
 8001246:	701a      	strb	r2, [r3, #0]
	Copy_pStrBuf[7] = (Copy_Date->Year % 10) + '0';
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	78da      	ldrb	r2, [r3, #3]
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <Date2String+0x100>)
 800124e:	fba3 1302 	umull	r1, r3, r3, r2
 8001252:	08d9      	lsrs	r1, r3, #3
 8001254:	460b      	mov	r3, r1
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	440b      	add	r3, r1
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	b2da      	uxtb	r2, r3
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	3307      	adds	r3, #7
 8001264:	3230      	adds	r2, #48	; 0x30
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	701a      	strb	r2, [r3, #0]
	Copy_pStrBuf[8] = '\0';
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	3308      	adds	r3, #8
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	cccccccd 	.word	0xcccccccd

08001284 <String2Time>:

/* String Format: HH:MM:SS TM, TM = AM or PM or 24 */
static void String2Time(const char *Copy_pString, DS1307_Clock_t *Copy_TimeBuf)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
	Copy_TimeBuf->Hours   = ( ((uint8_t)(Copy_pString[0] - '0')) * 10U) + ( (uint8_t)(Copy_pString[1] - '0') );
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	461a      	mov	r2, r3
 8001294:	0092      	lsls	r2, r2, #2
 8001296:	4413      	add	r3, r2
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	b2da      	uxtb	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3301      	adds	r3, #1
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	3b10      	subs	r3, #16
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	709a      	strb	r2, [r3, #2]
	Copy_TimeBuf->Minutes = ( ((uint8_t)(Copy_pString[3] - '0')) * 10U) + ( (uint8_t)(Copy_pString[4] - '0') );
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	3303      	adds	r3, #3
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	461a      	mov	r2, r3
 80012b6:	0092      	lsls	r2, r2, #2
 80012b8:	4413      	add	r3, r2
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	3304      	adds	r3, #4
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	4413      	add	r3, r2
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	3b10      	subs	r3, #16
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	705a      	strb	r2, [r3, #1]
	Copy_TimeBuf->Seconds = ( ((uint8_t)(Copy_pString[6] - '0')) * 10U) + ( (uint8_t)(Copy_pString[7] - '0') );
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3306      	adds	r3, #6
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	461a      	mov	r2, r3
 80012d8:	0092      	lsls	r2, r2, #2
 80012da:	4413      	add	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3307      	adds	r3, #7
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	4413      	add	r3, r2
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	3b10      	subs	r3, #16
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	701a      	strb	r2, [r3, #0]
	switch (Copy_pString[9])
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	3309      	adds	r3, #9
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b50      	cmp	r3, #80	; 0x50
 80012fa:	d009      	beq.n	8001310 <String2Time+0x8c>
 80012fc:	2b50      	cmp	r3, #80	; 0x50
 80012fe:	dc0f      	bgt.n	8001320 <String2Time+0x9c>
 8001300:	2b32      	cmp	r3, #50	; 0x32
 8001302:	d009      	beq.n	8001318 <String2Time+0x94>
 8001304:	2b41      	cmp	r3, #65	; 0x41
 8001306:	d10b      	bne.n	8001320 <String2Time+0x9c>
	{
	case 'A': Copy_TimeBuf->TimeFormat = DS1307_12_HOUR_AM; break;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	2202      	movs	r2, #2
 800130c:	70da      	strb	r2, [r3, #3]
 800130e:	e007      	b.n	8001320 <String2Time+0x9c>
	case 'P': Copy_TimeBuf->TimeFormat = DS1307_12_HOUR_PM; break;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	2203      	movs	r2, #3
 8001314:	70da      	strb	r2, [r3, #3]
 8001316:	e003      	b.n	8001320 <String2Time+0x9c>
	case '2': Copy_TimeBuf->TimeFormat = DS1307_24_HOUR; 	break;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	2200      	movs	r2, #0
 800131c:	70da      	strb	r2, [r3, #3]
 800131e:	bf00      	nop
	}
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <String2Date>:

/* String Format: DD/MM/YY DOW, DOW = Sun or Mon or Tue or Wed or Thu or Fri or Sat */
static void String2Date(const char *Copy_pString, DS1307_Calender_t *Copy_DateBuf)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
	Copy_DateBuf->Date  = ( ((uint8_t)(Copy_pString[0] - '0')) * 10U) + ( (uint8_t)(Copy_pString[1] - '0') );
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	461a      	mov	r2, r3
 800133c:	0092      	lsls	r2, r2, #2
 800133e:	4413      	add	r3, r2
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	b2da      	uxtb	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3301      	adds	r3, #1
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	4413      	add	r3, r2
 800134c:	b2db      	uxtb	r3, r3
 800134e:	3b10      	subs	r3, #16
 8001350:	b2da      	uxtb	r2, r3
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	705a      	strb	r2, [r3, #1]
	Copy_DateBuf->Month = ( ((uint8_t)(Copy_pString[3] - '0')) * 10U) + ( (uint8_t)(Copy_pString[4] - '0') );
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	3303      	adds	r3, #3
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	461a      	mov	r2, r3
 800135e:	0092      	lsls	r2, r2, #2
 8001360:	4413      	add	r3, r2
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	b2da      	uxtb	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	3304      	adds	r3, #4
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	4413      	add	r3, r2
 800136e:	b2db      	uxtb	r3, r3
 8001370:	3b10      	subs	r3, #16
 8001372:	b2da      	uxtb	r2, r3
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	709a      	strb	r2, [r3, #2]
	Copy_DateBuf->Year  = ( ((uint8_t)(Copy_pString[6] - '0')) * 10U) + ( (uint8_t)(Copy_pString[7] - '0') );
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3306      	adds	r3, #6
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	0092      	lsls	r2, r2, #2
 8001382:	4413      	add	r3, r2
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	b2da      	uxtb	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3307      	adds	r3, #7
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	4413      	add	r3, r2
 8001390:	b2db      	uxtb	r3, r3
 8001392:	3b10      	subs	r3, #16
 8001394:	b2da      	uxtb	r2, r3
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	70da      	strb	r2, [r3, #3]
	switch (Copy_pString[11])
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	330b      	adds	r3, #11
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	3b64      	subs	r3, #100	; 0x64
 80013a2:	2b11      	cmp	r3, #17
 80013a4:	d845      	bhi.n	8001432 <String2Date+0x106>
 80013a6:	a201      	add	r2, pc, #4	; (adr r2, 80013ac <String2Date+0x80>)
 80013a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ac:	0800140d 	.word	0x0800140d
 80013b0:	08001415 	.word	0x08001415
 80013b4:	08001433 	.word	0x08001433
 80013b8:	08001433 	.word	0x08001433
 80013bc:	08001433 	.word	0x08001433
 80013c0:	080013fd 	.word	0x080013fd
 80013c4:	08001433 	.word	0x08001433
 80013c8:	08001433 	.word	0x08001433
 80013cc:	08001433 	.word	0x08001433
 80013d0:	08001433 	.word	0x08001433
 80013d4:	0800141d 	.word	0x0800141d
 80013d8:	08001433 	.word	0x08001433
 80013dc:	08001433 	.word	0x08001433
 80013e0:	08001433 	.word	0x08001433
 80013e4:	08001433 	.word	0x08001433
 80013e8:	08001433 	.word	0x08001433
 80013ec:	080013f5 	.word	0x080013f5
 80013f0:	08001405 	.word	0x08001405
	{
	case 't': Copy_DateBuf->DayOfWeek = DS1307_SATURDAY; 	break;
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	2207      	movs	r2, #7
 80013f8:	701a      	strb	r2, [r3, #0]
 80013fa:	e01a      	b.n	8001432 <String2Date+0x106>
	case 'i': Copy_DateBuf->DayOfWeek = DS1307_FRIDAY; 		break;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	2206      	movs	r2, #6
 8001400:	701a      	strb	r2, [r3, #0]
 8001402:	e016      	b.n	8001432 <String2Date+0x106>
	case 'u': Copy_DateBuf->DayOfWeek = DS1307_THURSDAY;	break;
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	2205      	movs	r2, #5
 8001408:	701a      	strb	r2, [r3, #0]
 800140a:	e012      	b.n	8001432 <String2Date+0x106>
	case 'd': Copy_DateBuf->DayOfWeek = DS1307_WEDNESDAY; 	break;
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	2204      	movs	r2, #4
 8001410:	701a      	strb	r2, [r3, #0]
 8001412:	e00e      	b.n	8001432 <String2Date+0x106>
	case 'e': Copy_DateBuf->DayOfWeek = DS1307_TUESDAY; 	break;
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	2203      	movs	r2, #3
 8001418:	701a      	strb	r2, [r3, #0]
 800141a:	e00a      	b.n	8001432 <String2Date+0x106>
	case 'n': Copy_DateBuf->DayOfWeek = ('o' == Copy_pString[10])? DS1307_MONDAY: DS1307_SUNDAY; break;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	330a      	adds	r3, #10
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b6f      	cmp	r3, #111	; 0x6f
 8001424:	d101      	bne.n	800142a <String2Date+0xfe>
 8001426:	2202      	movs	r2, #2
 8001428:	e000      	b.n	800142c <String2Date+0x100>
 800142a:	2201      	movs	r2, #1
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	701a      	strb	r2, [r3, #0]
 8001430:	bf00      	nop
	}
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop

08001440 <HoursTo24>:

static uint8_t HoursTo24(uint8_t Copy_u8HoursIn12Format, DS1307_TimeFormat_t Copy_TimeFormat)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	460a      	mov	r2, r1
 800144a:	71fb      	strb	r3, [r7, #7]
 800144c:	4613      	mov	r3, r2
 800144e:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8Hours24 = Copy_u8HoursIn12Format;
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	73fb      	strb	r3, [r7, #15]

	if(DS1307_12_HOUR_AM == Copy_TimeFormat)
 8001454:	79bb      	ldrb	r3, [r7, #6]
 8001456:	2b02      	cmp	r3, #2
 8001458:	d10b      	bne.n	8001472 <HoursTo24+0x32>
	{
		Local_u8Hours24 %= 12;
 800145a:	7bfa      	ldrb	r2, [r7, #15]
 800145c:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <HoursTo24+0x60>)
 800145e:	fba3 1302 	umull	r1, r3, r3, r2
 8001462:	08d9      	lsrs	r1, r3, #3
 8001464:	460b      	mov	r3, r1
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	440b      	add	r3, r1
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	73fb      	strb	r3, [r7, #15]
 8001470:	e00f      	b.n	8001492 <HoursTo24+0x52>
	}
	else if(DS1307_12_HOUR_PM == Copy_TimeFormat)
 8001472:	79bb      	ldrb	r3, [r7, #6]
 8001474:	2b03      	cmp	r3, #3
 8001476:	d10c      	bne.n	8001492 <HoursTo24+0x52>
	{
		Local_u8Hours24 = (Local_u8Hours24 % 12) + 12;
 8001478:	7bfa      	ldrb	r2, [r7, #15]
 800147a:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <HoursTo24+0x60>)
 800147c:	fba3 1302 	umull	r1, r3, r3, r2
 8001480:	08d9      	lsrs	r1, r3, #3
 8001482:	460b      	mov	r3, r1
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	440b      	add	r3, r1
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	b2db      	uxtb	r3, r3
 800148e:	330c      	adds	r3, #12
 8001490:	73fb      	strb	r3, [r7, #15]
	}

	return Local_u8Hours24;
 8001492:	7bfb      	ldrb	r3, [r7, #15]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	aaaaaaab 	.word	0xaaaaaaab

080014a4 <IsStringsEqual>:
/* Private Variables */

/* Public Functins */

uint8_t IsStringsEqual(const char* Copy_pcString1, const char* Copy_pcString2)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
	while (*Copy_pcString1 != '\r' && *Copy_pcString2 != '\r')
 80014ae:	e00d      	b.n	80014cc <IsStringsEqual+0x28>
	{
		if (*Copy_pcString1 != *Copy_pcString2)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	781a      	ldrb	r2, [r3, #0]
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d001      	beq.n	80014c0 <IsStringsEqual+0x1c>
		{
			return STRINGS_NOT_EQUAL;
 80014bc:	2300      	movs	r3, #0
 80014be:	e00e      	b.n	80014de <IsStringsEqual+0x3a>
		}

		Copy_pcString1++;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3301      	adds	r3, #1
 80014c4:	607b      	str	r3, [r7, #4]
		Copy_pcString2++;
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	3301      	adds	r3, #1
 80014ca:	603b      	str	r3, [r7, #0]
	while (*Copy_pcString1 != '\r' && *Copy_pcString2 != '\r')
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b0d      	cmp	r3, #13
 80014d2:	d003      	beq.n	80014dc <IsStringsEqual+0x38>
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b0d      	cmp	r3, #13
 80014da:	d1e9      	bne.n	80014b0 <IsStringsEqual+0xc>
	}

	return STRINGS_EQUAL;
 80014dc:	2301      	movs	r3, #1
}
 80014de:	4618      	mov	r0, r3
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <StringLength>:

	return Local_u8Length;
}

uint16_t StringLength(const char *Copy_pcString)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b085      	sub	sp, #20
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
	uint16_t Local_u16Length = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	81fb      	strh	r3, [r7, #14]

	while (*Copy_pcString != '\0')
 80014f6:	e005      	b.n	8001504 <StringLength+0x1a>
	{
		Local_u16Length++;
 80014f8:	89fb      	ldrh	r3, [r7, #14]
 80014fa:	3301      	adds	r3, #1
 80014fc:	81fb      	strh	r3, [r7, #14]
		Copy_pcString++;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3301      	adds	r3, #1
 8001502:	607b      	str	r3, [r7, #4]
	while (*Copy_pcString != '\0')
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1f5      	bne.n	80014f8 <StringLength+0xe>
	}

	return Local_u16Length;
 800150c:	89fb      	ldrh	r3, [r7, #14]
}
 800150e:	4618      	mov	r0, r3
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
	...

0800151c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800151c:	b590      	push	{r4, r7, lr}
 800151e:	b08b      	sub	sp, #44	; 0x2c
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	char Local_cRxBuffer[30] = {0};
 8001522:	2300      	movs	r3, #0
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	f107 0308 	add.w	r3, r7, #8
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	60da      	str	r2, [r3, #12]
 8001534:	611a      	str	r2, [r3, #16]
 8001536:	615a      	str	r2, [r3, #20]
 8001538:	831a      	strh	r2, [r3, #24]

	char Local_cSPICode[2] = {0, '\n'};
 800153a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800153e:	803b      	strh	r3, [r7, #0]

	uint8_t Local_u8PasswordAttempts;

	uint8_t Local_u8PasswordState;

	uint8_t Local_u8ExitSystem = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001546:	f000 fd15 	bl	8001f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800154a:	f000 f945 	bl	80017d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800154e:	f000 fa59 	bl	8001a04 <MX_GPIO_Init>
  MX_DMA_Init();
 8001552:	f000 fa2f 	bl	80019b4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001556:	f000 fa03 	bl	8001960 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800155a:	f000 f99d 	bl	8001898 <MX_I2C1_Init>
  MX_SPI2_Init();
 800155e:	f000 f9c9 	bl	80018f4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  DS1307_u8Init();
 8001562:	f7ff f9c3 	bl	80008ec <DS1307_u8Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Local_u8PasswordAttempts = 1;
 8001566:	2301      	movs	r3, #1
 8001568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  Local_u8PasswordState = PASSWORD_INCORRECT;
 800156c:	2300      	movs	r3, #0
 800156e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	  if (TERMINATE_PROGRAM_CHAR != Local_u8ExitSystem)
 8001572:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001576:	2b30      	cmp	r3, #48	; 0x30
 8001578:	f000 80c2 	beq.w	8001700 <main+0x1e4>
	  {
		  Local_cRxBuffer[0] = 0; /* Clear the receive buffer */
 800157c:	2300      	movs	r3, #0
 800157e:	713b      	strb	r3, [r7, #4]

		  /* User name handling */
		  ComMgr_Print("User name: ", StringLength("User name: "), COMMGR_UART_ID);
 8001580:	4887      	ldr	r0, [pc, #540]	; (80017a0 <main+0x284>)
 8001582:	f7ff ffb2 	bl	80014ea <StringLength>
 8001586:	4603      	mov	r3, r0
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2200      	movs	r2, #0
 800158c:	4619      	mov	r1, r3
 800158e:	4884      	ldr	r0, [pc, #528]	; (80017a0 <main+0x284>)
 8001590:	f7ff f81e 	bl	80005d0 <ComMgr_Print>

		  ComMgr_Scan((char *) &Local_cRxBuffer, NOT_PASSWORD, COMMGR_UART_ID);
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	2200      	movs	r2, #0
 8001598:	2100      	movs	r1, #0
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff f872 	bl	8000684 <ComMgr_Scan>

		  ComMgr_Println("", 0U, COMMGR_UART_ID); /* New Line */
 80015a0:	2200      	movs	r2, #0
 80015a2:	2100      	movs	r1, #0
 80015a4:	487f      	ldr	r0, [pc, #508]	; (80017a4 <main+0x288>)
 80015a6:	f7ff f837 	bl	8000618 <ComMgr_Println>

		  if (USER_NAME_INCORRECT == CheckUserName(UserName, Local_cRxBuffer))
 80015aa:	4b7f      	ldr	r3, [pc, #508]	; (80017a8 <main+0x28c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	1d3a      	adds	r2, r7, #4
 80015b0:	4611      	mov	r1, r2
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fb1c 	bl	8000bf0 <CheckUserName>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d10a      	bne.n	80015d4 <main+0xb8>
		  {
			  ComMgr_Println("\r\nUser name is wrong. Try again...", StringLength("r\nUser name is wrong. Try again..."), COMMGR_UART_ID);
 80015be:	487b      	ldr	r0, [pc, #492]	; (80017ac <main+0x290>)
 80015c0:	f7ff ff93 	bl	80014ea <StringLength>
 80015c4:	4603      	mov	r3, r0
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2200      	movs	r2, #0
 80015ca:	4619      	mov	r1, r3
 80015cc:	4878      	ldr	r0, [pc, #480]	; (80017b0 <main+0x294>)
 80015ce:	f7ff f823 	bl	8000618 <ComMgr_Println>
 80015d2:	e095      	b.n	8001700 <main+0x1e4>
		  /* Password handling */
		  else
		  {
			  do
			  {
				  ComMgr_Print("Password: ", StringLength("Password: "), COMMGR_UART_ID);
 80015d4:	4877      	ldr	r0, [pc, #476]	; (80017b4 <main+0x298>)
 80015d6:	f7ff ff88 	bl	80014ea <StringLength>
 80015da:	4603      	mov	r3, r0
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2200      	movs	r2, #0
 80015e0:	4619      	mov	r1, r3
 80015e2:	4874      	ldr	r0, [pc, #464]	; (80017b4 <main+0x298>)
 80015e4:	f7fe fff4 	bl	80005d0 <ComMgr_Print>

				  ComMgr_Scan((char *) &Local_cRxBuffer, PASSWORD, COMMGR_UART_ID);
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	2200      	movs	r2, #0
 80015ec:	2101      	movs	r1, #1
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff f848 	bl	8000684 <ComMgr_Scan>

				  ComMgr_Println("", 0U, COMMGR_UART_ID); /* New Line */
 80015f4:	2200      	movs	r2, #0
 80015f6:	2100      	movs	r1, #0
 80015f8:	486a      	ldr	r0, [pc, #424]	; (80017a4 <main+0x288>)
 80015fa:	f7ff f80d 	bl	8000618 <ComMgr_Println>

				  Local_u8PasswordState = CheckPassword(Password, Local_cRxBuffer);
 80015fe:	4b6e      	ldr	r3, [pc, #440]	; (80017b8 <main+0x29c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	1d3a      	adds	r2, r7, #4
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fb05 	bl	8000c16 <CheckPassword>
 800160c:	4603      	mov	r3, r0
 800160e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

				  if (PASSWORD_INCORRECT == Local_u8PasswordState)
 8001612:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001616:	2b00      	cmp	r3, #0
 8001618:	d109      	bne.n	800162e <main+0x112>
				  {
					  ComMgr_Println("\r\nPasword is not correct. Please, Try again", StringLength("\r\nPasword is not correct. Please, Try again"), COMMGR_UART_ID);
 800161a:	4868      	ldr	r0, [pc, #416]	; (80017bc <main+0x2a0>)
 800161c:	f7ff ff65 	bl	80014ea <StringLength>
 8001620:	4603      	mov	r3, r0
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2200      	movs	r2, #0
 8001626:	4619      	mov	r1, r3
 8001628:	4864      	ldr	r0, [pc, #400]	; (80017bc <main+0x2a0>)
 800162a:	f7fe fff5 	bl	8000618 <ComMgr_Println>
				  }
			  } while (MAX_PASSWORD_ATTEMPTS != Local_u8PasswordAttempts++ && PASSWORD_INCORRECT == Local_u8PasswordState);
 800162e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8001638:	2b03      	cmp	r3, #3
 800163a:	d003      	beq.n	8001644 <main+0x128>
 800163c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001640:	2b00      	cmp	r3, #0
 8001642:	d0c7      	beq.n	80015d4 <main+0xb8>

			  /* Check for max password trials */
			  if (MAX_PASSWORD_ATTEMPTS == (Local_u8PasswordAttempts - 1U))
 8001644:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001648:	2b04      	cmp	r3, #4
 800164a:	d115      	bne.n	8001678 <main+0x15c>
			  {
				  Local_cSPICode[0] = COMMGR_SPI_CODE_WRONG_PASSWORD;
 800164c:	23e0      	movs	r3, #224	; 0xe0
 800164e:	703b      	strb	r3, [r7, #0]
				  ComMgr_Println("\r\nYou reached the maximum password trials. Exting the program...", StringLength("\r\nYou reached the maximum password trials. Exting the program..."), COMMGR_UART_ID);
 8001650:	485b      	ldr	r0, [pc, #364]	; (80017c0 <main+0x2a4>)
 8001652:	f7ff ff4a 	bl	80014ea <StringLength>
 8001656:	4603      	mov	r3, r0
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2200      	movs	r2, #0
 800165c:	4619      	mov	r1, r3
 800165e:	4858      	ldr	r0, [pc, #352]	; (80017c0 <main+0x2a4>)
 8001660:	f7fe ffda 	bl	8000618 <ComMgr_Println>
				  /* Turn on the red LED and send SPI code terminating char */
				  ComMgr_Print(Local_cSPICode, 2U, COMMGR_SPI_ID);
 8001664:	463b      	mov	r3, r7
 8001666:	2201      	movs	r2, #1
 8001668:	2102      	movs	r1, #2
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe ffb0 	bl	80005d0 <ComMgr_Print>
				  Local_u8ExitSystem = TERMINATE_PROGRAM_CHAR;
 8001670:	2330      	movs	r3, #48	; 0x30
 8001672:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001676:	e043      	b.n	8001700 <main+0x1e4>
			  }
			  /* Print the main menu and handle the user option */
			  else
			  {
				  Local_cSPICode[0] = COMMGR_SPI_CODE_CORRECT_PASSWORD;
 8001678:	23e1      	movs	r3, #225	; 0xe1
 800167a:	703b      	strb	r3, [r7, #0]
				  /* Turn on the green and send SPI code terminating char */
				  ComMgr_Print(Local_cSPICode, 2U, COMMGR_SPI_ID);
 800167c:	463b      	mov	r3, r7
 800167e:	2201      	movs	r2, #1
 8001680:	2102      	movs	r1, #2
 8001682:	4618      	mov	r0, r3
 8001684:	f7fe ffa4 	bl	80005d0 <ComMgr_Print>

				  PrintMainMenu();
 8001688:	f7ff fa58 	bl	8000b3c <PrintMainMenu>

				  /* Get the desired option */
				  ComMgr_Scan((char *) &Local_cRxBuffer, NOT_PASSWORD, COMMGR_UART_ID);
 800168c:	1d3b      	adds	r3, r7, #4
 800168e:	2200      	movs	r2, #0
 8001690:	2100      	movs	r1, #0
 8001692:	4618      	mov	r0, r3
 8001694:	f7fe fff6 	bl	8000684 <ComMgr_Scan>

				  ComMgr_Println("", 0U, COMMGR_UART_ID); /* New Line */
 8001698:	2200      	movs	r2, #0
 800169a:	2100      	movs	r1, #0
 800169c:	4841      	ldr	r0, [pc, #260]	; (80017a4 <main+0x288>)
 800169e:	f7fe ffbb 	bl	8000618 <ComMgr_Println>

				  switch (Local_cRxBuffer[0])
 80016a2:	793b      	ldrb	r3, [r7, #4]
 80016a4:	3b30      	subs	r3, #48	; 0x30
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	d81f      	bhi.n	80016ea <main+0x1ce>
 80016aa:	a201      	add	r2, pc, #4	; (adr r2, 80016b0 <main+0x194>)
 80016ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b0:	080016e3 	.word	0x080016e3
 80016b4:	080016c1 	.word	0x080016c1
 80016b8:	080016d7 	.word	0x080016d7
 80016bc:	080016dd 	.word	0x080016dd
				  {
				  case '1' : Local_cSPICode[0] = COMMGR_SPI_CODE_DISPLAY_TIME_DATE; ComMgr_Print(Local_cSPICode, 2U, COMMGR_SPI_ID); DisplayTimeDate(); break;
 80016c0:	23e2      	movs	r3, #226	; 0xe2
 80016c2:	703b      	strb	r3, [r7, #0]
 80016c4:	463b      	mov	r3, r7
 80016c6:	2201      	movs	r2, #1
 80016c8:	2102      	movs	r1, #2
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7fe ff80 	bl	80005d0 <ComMgr_Print>
 80016d0:	f7ff fab4 	bl	8000c3c <DisplayTimeDate>
 80016d4:	e014      	b.n	8001700 <main+0x1e4>
				  case '2' : SetTimeDate();	break;
 80016d6:	f7ff fb37 	bl	8000d48 <SetTimeDate>
 80016da:	e011      	b.n	8001700 <main+0x1e4>
				  case '3' : SetAlarm(); break;
 80016dc:	f7ff fba6 	bl	8000e2c <SetAlarm>
 80016e0:	e00e      	b.n	8001700 <main+0x1e4>
				  case '0' : Local_u8ExitSystem = Local_cRxBuffer[0]; break;
 80016e2:	793b      	ldrb	r3, [r7, #4]
 80016e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80016e8:	e00a      	b.n	8001700 <main+0x1e4>
				  default: ComMgr_Println("\r\n\r\nWrong Option. Try again...", StringLength("\r\n\r\nWrong Option. Try again..."), COMMGR_UART_ID); break;
 80016ea:	4836      	ldr	r0, [pc, #216]	; (80017c4 <main+0x2a8>)
 80016ec:	f7ff fefd 	bl	80014ea <StringLength>
 80016f0:	4603      	mov	r3, r0
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2200      	movs	r2, #0
 80016f6:	4619      	mov	r1, r3
 80016f8:	4832      	ldr	r0, [pc, #200]	; (80017c4 <main+0x2a8>)
 80016fa:	f7fe ff8d 	bl	8000618 <ComMgr_Println>
 80016fe:	bf00      	nop
				  }
			  }
		  }
	  }

	  if ((0 == HAL_GetTick() % 1000) && (DoesAlarmCame(AlarmNumber)))
 8001700:	f000 fc9e 	bl	8002040 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	4b30      	ldr	r3, [pc, #192]	; (80017c8 <main+0x2ac>)
 8001708:	fba3 1302 	umull	r1, r3, r3, r2
 800170c:	099b      	lsrs	r3, r3, #6
 800170e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001712:	fb01 f303 	mul.w	r3, r1, r3
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b00      	cmp	r3, #0
 800171a:	f47f af24 	bne.w	8001566 <main+0x4a>
 800171e:	4b2b      	ldr	r3, [pc, #172]	; (80017cc <main+0x2b0>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fc2e 	bl	8000f84 <DoesAlarmCame>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	f43f af1b 	beq.w	8001566 <main+0x4a>
	  {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001730:	2201      	movs	r2, #1
 8001732:	2101      	movs	r1, #1
 8001734:	4826      	ldr	r0, [pc, #152]	; (80017d0 <main+0x2b4>)
 8001736:	f001 fa73 	bl	8002c20 <HAL_GPIO_WritePin>
		  HAL_Delay(10);
 800173a:	200a      	movs	r0, #10
 800173c:	f000 fc8c 	bl	8002058 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001740:	2200      	movs	r2, #0
 8001742:	2101      	movs	r1, #1
 8001744:	4822      	ldr	r0, [pc, #136]	; (80017d0 <main+0x2b4>)
 8001746:	f001 fa6b 	bl	8002c20 <HAL_GPIO_WritePin>

		  Local_cSPICode[0] = COMMGR_SPI_CODE_DISPLAY_ALARM_MESSAGE;
 800174a:	23e3      	movs	r3, #227	; 0xe3
 800174c:	703b      	strb	r3, [r7, #0]
		  /* Send display time and date code */
		  ComMgr_Print(&Local_cSPICode[0], 1U, COMMGR_SPI_ID);
 800174e:	463b      	mov	r3, r7
 8001750:	2201      	movs	r2, #1
 8001752:	2101      	movs	r1, #1
 8001754:	4618      	mov	r0, r3
 8001756:	f7fe ff3b 	bl	80005d0 <ComMgr_Print>

		  /* Send alarm name */
		  ComMgr_Print(AlarmsMessege[(uint8_t)(AlarmNumber - '1')], StringLength(AlarmsMessege[(uint8_t)(AlarmNumber - '1')]), COMMGR_SPI_ID);
 800175a:	4b1c      	ldr	r3, [pc, #112]	; (80017cc <main+0x2b0>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	3b31      	subs	r3, #49	; 0x31
 8001760:	b2db      	uxtb	r3, r3
 8001762:	461a      	mov	r2, r3
 8001764:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <main+0x2b8>)
 8001766:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800176a:	4b18      	ldr	r3, [pc, #96]	; (80017cc <main+0x2b0>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	3b31      	subs	r3, #49	; 0x31
 8001770:	b2db      	uxtb	r3, r3
 8001772:	461a      	mov	r2, r3
 8001774:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <main+0x2b8>)
 8001776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff feb5 	bl	80014ea <StringLength>
 8001780:	4603      	mov	r3, r0
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2201      	movs	r2, #1
 8001786:	4619      	mov	r1, r3
 8001788:	4620      	mov	r0, r4
 800178a:	f7fe ff21 	bl	80005d0 <ComMgr_Print>
		  /* Send SPI code terminating char */
		  ComMgr_Print(&Local_cSPICode[1], 1U, COMMGR_SPI_ID);
 800178e:	463b      	mov	r3, r7
 8001790:	3301      	adds	r3, #1
 8001792:	2201      	movs	r2, #1
 8001794:	2101      	movs	r1, #1
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe ff1a 	bl	80005d0 <ComMgr_Print>
	  Local_u8PasswordAttempts = 1;
 800179c:	e6e3      	b.n	8001566 <main+0x4a>
 800179e:	bf00      	nop
 80017a0:	08007904 	.word	0x08007904
 80017a4:	08007910 	.word	0x08007910
 80017a8:	20000004 	.word	0x20000004
 80017ac:	08007914 	.word	0x08007914
 80017b0:	08007938 	.word	0x08007938
 80017b4:	0800795c 	.word	0x0800795c
 80017b8:	20000008 	.word	0x20000008
 80017bc:	08007968 	.word	0x08007968
 80017c0:	08007994 	.word	0x08007994
 80017c4:	080079d8 	.word	0x080079d8
 80017c8:	10624dd3 	.word	0x10624dd3
 80017cc:	20000060 	.word	0x20000060
 80017d0:	40020800 	.word	0x40020800
 80017d4:	20000064 	.word	0x20000064

080017d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b094      	sub	sp, #80	; 0x50
 80017dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017de:	f107 031c 	add.w	r3, r7, #28
 80017e2:	2234      	movs	r2, #52	; 0x34
 80017e4:	2100      	movs	r1, #0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f005 fe74 	bl	80074d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017ec:	f107 0308 	add.w	r3, r7, #8
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fc:	2300      	movs	r3, #0
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	4b23      	ldr	r3, [pc, #140]	; (8001890 <SystemClock_Config+0xb8>)
 8001802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001804:	4a22      	ldr	r2, [pc, #136]	; (8001890 <SystemClock_Config+0xb8>)
 8001806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800180a:	6413      	str	r3, [r2, #64]	; 0x40
 800180c:	4b20      	ldr	r3, [pc, #128]	; (8001890 <SystemClock_Config+0xb8>)
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001818:	2300      	movs	r3, #0
 800181a:	603b      	str	r3, [r7, #0]
 800181c:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <SystemClock_Config+0xbc>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001824:	4a1b      	ldr	r2, [pc, #108]	; (8001894 <SystemClock_Config+0xbc>)
 8001826:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800182a:	6013      	str	r3, [r2, #0]
 800182c:	4b19      	ldr	r3, [pc, #100]	; (8001894 <SystemClock_Config+0xbc>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001834:	603b      	str	r3, [r7, #0]
 8001836:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001838:	2302      	movs	r3, #2
 800183a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800183c:	2301      	movs	r3, #1
 800183e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001840:	2310      	movs	r3, #16
 8001842:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001844:	2300      	movs	r3, #0
 8001846:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001848:	f107 031c 	add.w	r3, r7, #28
 800184c:	4618      	mov	r0, r3
 800184e:	f004 f885 	bl	800595c <HAL_RCC_OscConfig>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001858:	f000 f956 	bl	8001b08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800185c:	230f      	movs	r3, #15
 800185e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001860:	2300      	movs	r3, #0
 8001862:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001864:	2300      	movs	r3, #0
 8001866:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001868:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800186c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800186e:	2300      	movs	r3, #0
 8001870:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001872:	f107 0308 	add.w	r3, r7, #8
 8001876:	2100      	movs	r1, #0
 8001878:	4618      	mov	r0, r3
 800187a:	f003 fd25 	bl	80052c8 <HAL_RCC_ClockConfig>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001884:	f000 f940 	bl	8001b08 <Error_Handler>
  }
}
 8001888:	bf00      	nop
 800188a:	3750      	adds	r7, #80	; 0x50
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40023800 	.word	0x40023800
 8001894:	40007000 	.word	0x40007000

08001898 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <MX_I2C1_Init+0x50>)
 800189e:	4a13      	ldr	r2, [pc, #76]	; (80018ec <MX_I2C1_Init+0x54>)
 80018a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018a2:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018a4:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <MX_I2C1_Init+0x58>)
 80018a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018a8:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018ae:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018bc:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018be:	2200      	movs	r2, #0
 80018c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018c2:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018c8:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018ce:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018d4:	4804      	ldr	r0, [pc, #16]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018d6:	f001 f9bd 	bl	8002c54 <HAL_I2C_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018e0:	f000 f912 	bl	8001b08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018e4:	bf00      	nop
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20000078 	.word	0x20000078
 80018ec:	40005400 	.word	0x40005400
 80018f0:	000186a0 	.word	0x000186a0

080018f4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80018f8:	4b17      	ldr	r3, [pc, #92]	; (8001958 <MX_SPI2_Init+0x64>)
 80018fa:	4a18      	ldr	r2, [pc, #96]	; (800195c <MX_SPI2_Init+0x68>)
 80018fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80018fe:	4b16      	ldr	r3, [pc, #88]	; (8001958 <MX_SPI2_Init+0x64>)
 8001900:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001904:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001906:	4b14      	ldr	r3, [pc, #80]	; (8001958 <MX_SPI2_Init+0x64>)
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800190c:	4b12      	ldr	r3, [pc, #72]	; (8001958 <MX_SPI2_Init+0x64>)
 800190e:	2200      	movs	r2, #0
 8001910:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001912:	4b11      	ldr	r3, [pc, #68]	; (8001958 <MX_SPI2_Init+0x64>)
 8001914:	2200      	movs	r2, #0
 8001916:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001918:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <MX_SPI2_Init+0x64>)
 800191a:	2200      	movs	r2, #0
 800191c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800191e:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <MX_SPI2_Init+0x64>)
 8001920:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001924:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001926:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <MX_SPI2_Init+0x64>)
 8001928:	2200      	movs	r2, #0
 800192a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800192c:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <MX_SPI2_Init+0x64>)
 800192e:	2200      	movs	r2, #0
 8001930:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <MX_SPI2_Init+0x64>)
 8001934:	2200      	movs	r2, #0
 8001936:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001938:	4b07      	ldr	r3, [pc, #28]	; (8001958 <MX_SPI2_Init+0x64>)
 800193a:	2200      	movs	r2, #0
 800193c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800193e:	4b06      	ldr	r3, [pc, #24]	; (8001958 <MX_SPI2_Init+0x64>)
 8001940:	220a      	movs	r2, #10
 8001942:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001944:	4804      	ldr	r0, [pc, #16]	; (8001958 <MX_SPI2_Init+0x64>)
 8001946:	f004 faa7 	bl	8005e98 <HAL_SPI_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001950:	f000 f8da 	bl	8001b08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}
 8001958:	2000018c 	.word	0x2000018c
 800195c:	40003800 	.word	0x40003800

08001960 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001964:	4b11      	ldr	r3, [pc, #68]	; (80019ac <MX_USART2_UART_Init+0x4c>)
 8001966:	4a12      	ldr	r2, [pc, #72]	; (80019b0 <MX_USART2_UART_Init+0x50>)
 8001968:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <MX_USART2_UART_Init+0x4c>)
 800196c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001970:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001972:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <MX_USART2_UART_Init+0x4c>)
 8001974:	2200      	movs	r2, #0
 8001976:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <MX_USART2_UART_Init+0x4c>)
 800197a:	2200      	movs	r2, #0
 800197c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800197e:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <MX_USART2_UART_Init+0x4c>)
 8001980:	2200      	movs	r2, #0
 8001982:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001984:	4b09      	ldr	r3, [pc, #36]	; (80019ac <MX_USART2_UART_Init+0x4c>)
 8001986:	220c      	movs	r2, #12
 8001988:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800198a:	4b08      	ldr	r3, [pc, #32]	; (80019ac <MX_USART2_UART_Init+0x4c>)
 800198c:	2200      	movs	r2, #0
 800198e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <MX_USART2_UART_Init+0x4c>)
 8001992:	2200      	movs	r2, #0
 8001994:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001996:	4805      	ldr	r0, [pc, #20]	; (80019ac <MX_USART2_UART_Init+0x4c>)
 8001998:	f005 f938 	bl	8006c0c <HAL_UART_Init>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019a2:	f000 f8b1 	bl	8001b08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	200001e4 	.word	0x200001e4
 80019b0:	40004400 	.word	0x40004400

080019b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	607b      	str	r3, [r7, #4]
 80019be:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <MX_DMA_Init+0x4c>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4a0f      	ldr	r2, [pc, #60]	; (8001a00 <MX_DMA_Init+0x4c>)
 80019c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ca:	4b0d      	ldr	r3, [pc, #52]	; (8001a00 <MX_DMA_Init+0x4c>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d2:	607b      	str	r3, [r7, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80019d6:	2200      	movs	r2, #0
 80019d8:	2100      	movs	r1, #0
 80019da:	200b      	movs	r0, #11
 80019dc:	f000 fc3b 	bl	8002256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80019e0:	200b      	movs	r0, #11
 80019e2:	f000 fc54 	bl	800228e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80019e6:	2200      	movs	r2, #0
 80019e8:	2100      	movs	r1, #0
 80019ea:	2011      	movs	r0, #17
 80019ec:	f000 fc33 	bl	8002256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80019f0:	2011      	movs	r0, #17
 80019f2:	f000 fc4c 	bl	800228e <HAL_NVIC_EnableIRQ>

}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40023800 	.word	0x40023800

08001a04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b08a      	sub	sp, #40	; 0x28
 8001a08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0a:	f107 0314 	add.w	r3, r7, #20
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	609a      	str	r2, [r3, #8]
 8001a16:	60da      	str	r2, [r3, #12]
 8001a18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	4b37      	ldr	r3, [pc, #220]	; (8001afc <MX_GPIO_Init+0xf8>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	4a36      	ldr	r2, [pc, #216]	; (8001afc <MX_GPIO_Init+0xf8>)
 8001a24:	f043 0304 	orr.w	r3, r3, #4
 8001a28:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2a:	4b34      	ldr	r3, [pc, #208]	; (8001afc <MX_GPIO_Init+0xf8>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	f003 0304 	and.w	r3, r3, #4
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	4b30      	ldr	r3, [pc, #192]	; (8001afc <MX_GPIO_Init+0xf8>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	4a2f      	ldr	r2, [pc, #188]	; (8001afc <MX_GPIO_Init+0xf8>)
 8001a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
 8001a46:	4b2d      	ldr	r3, [pc, #180]	; (8001afc <MX_GPIO_Init+0xf8>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	4b29      	ldr	r3, [pc, #164]	; (8001afc <MX_GPIO_Init+0xf8>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	4a28      	ldr	r2, [pc, #160]	; (8001afc <MX_GPIO_Init+0xf8>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	6313      	str	r3, [r2, #48]	; 0x30
 8001a62:	4b26      	ldr	r3, [pc, #152]	; (8001afc <MX_GPIO_Init+0xf8>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	60bb      	str	r3, [r7, #8]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	607b      	str	r3, [r7, #4]
 8001a72:	4b22      	ldr	r3, [pc, #136]	; (8001afc <MX_GPIO_Init+0xf8>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	4a21      	ldr	r2, [pc, #132]	; (8001afc <MX_GPIO_Init+0xf8>)
 8001a78:	f043 0302 	orr.w	r3, r3, #2
 8001a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7e:	4b1f      	ldr	r3, [pc, #124]	; (8001afc <MX_GPIO_Init+0xf8>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AlarmNotifi_GPIO_Port, AlarmNotifi_Pin, GPIO_PIN_RESET);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	481c      	ldr	r0, [pc, #112]	; (8001b00 <MX_GPIO_Init+0xfc>)
 8001a90:	f001 f8c6 	bl	8002c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a94:	2200      	movs	r2, #0
 8001a96:	2120      	movs	r1, #32
 8001a98:	481a      	ldr	r0, [pc, #104]	; (8001b04 <MX_GPIO_Init+0x100>)
 8001a9a:	f001 f8c1 	bl	8002c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001aa4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001aa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001aae:	f107 0314 	add.w	r3, r7, #20
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4812      	ldr	r0, [pc, #72]	; (8001b00 <MX_GPIO_Init+0xfc>)
 8001ab6:	f000 ff1f 	bl	80028f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : AlarmNotifi_Pin */
  GPIO_InitStruct.Pin = AlarmNotifi_Pin;
 8001aba:	2301      	movs	r3, #1
 8001abc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(AlarmNotifi_GPIO_Port, &GPIO_InitStruct);
 8001aca:	f107 0314 	add.w	r3, r7, #20
 8001ace:	4619      	mov	r1, r3
 8001ad0:	480b      	ldr	r0, [pc, #44]	; (8001b00 <MX_GPIO_Init+0xfc>)
 8001ad2:	f000 ff11 	bl	80028f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001ad6:	2320      	movs	r3, #32
 8001ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ada:	2301      	movs	r3, #1
 8001adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001ae6:	f107 0314 	add.w	r3, r7, #20
 8001aea:	4619      	mov	r1, r3
 8001aec:	4805      	ldr	r0, [pc, #20]	; (8001b04 <MX_GPIO_Init+0x100>)
 8001aee:	f000 ff03 	bl	80028f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001af2:	bf00      	nop
 8001af4:	3728      	adds	r7, #40	; 0x28
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800
 8001b00:	40020800 	.word	0x40020800
 8001b04:	40020000 	.word	0x40020000

08001b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b0c:	b672      	cpsid	i
}
 8001b0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <Error_Handler+0x8>
	...

08001b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <HAL_MspInit+0x4c>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	4a0f      	ldr	r2, [pc, #60]	; (8001b60 <HAL_MspInit+0x4c>)
 8001b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b28:	6453      	str	r3, [r2, #68]	; 0x44
 8001b2a:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <HAL_MspInit+0x4c>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	603b      	str	r3, [r7, #0]
 8001b3a:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <HAL_MspInit+0x4c>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	4a08      	ldr	r2, [pc, #32]	; (8001b60 <HAL_MspInit+0x4c>)
 8001b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b44:	6413      	str	r3, [r2, #64]	; 0x40
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <HAL_MspInit+0x4c>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b52:	2007      	movs	r0, #7
 8001b54:	f000 fb74 	bl	8002240 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b58:	bf00      	nop
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40023800 	.word	0x40023800

08001b64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08a      	sub	sp, #40	; 0x28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a4a      	ldr	r2, [pc, #296]	; (8001cac <HAL_I2C_MspInit+0x148>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	f040 808e 	bne.w	8001ca4 <HAL_I2C_MspInit+0x140>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b88:	2300      	movs	r3, #0
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	4b48      	ldr	r3, [pc, #288]	; (8001cb0 <HAL_I2C_MspInit+0x14c>)
 8001b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b90:	4a47      	ldr	r2, [pc, #284]	; (8001cb0 <HAL_I2C_MspInit+0x14c>)
 8001b92:	f043 0302 	orr.w	r3, r3, #2
 8001b96:	6313      	str	r3, [r2, #48]	; 0x30
 8001b98:	4b45      	ldr	r3, [pc, #276]	; (8001cb0 <HAL_I2C_MspInit+0x14c>)
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ba4:	23c0      	movs	r3, #192	; 0xc0
 8001ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ba8:	2312      	movs	r3, #18
 8001baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bb4:	2304      	movs	r3, #4
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	483d      	ldr	r0, [pc, #244]	; (8001cb4 <HAL_I2C_MspInit+0x150>)
 8001bc0:	f000 fe9a 	bl	80028f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	4b39      	ldr	r3, [pc, #228]	; (8001cb0 <HAL_I2C_MspInit+0x14c>)
 8001bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bcc:	4a38      	ldr	r2, [pc, #224]	; (8001cb0 <HAL_I2C_MspInit+0x14c>)
 8001bce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bd2:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd4:	4b36      	ldr	r3, [pc, #216]	; (8001cb0 <HAL_I2C_MspInit+0x14c>)
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001be0:	4b35      	ldr	r3, [pc, #212]	; (8001cb8 <HAL_I2C_MspInit+0x154>)
 8001be2:	4a36      	ldr	r2, [pc, #216]	; (8001cbc <HAL_I2C_MspInit+0x158>)
 8001be4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001be6:	4b34      	ldr	r3, [pc, #208]	; (8001cb8 <HAL_I2C_MspInit+0x154>)
 8001be8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bec:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bee:	4b32      	ldr	r3, [pc, #200]	; (8001cb8 <HAL_I2C_MspInit+0x154>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bf4:	4b30      	ldr	r3, [pc, #192]	; (8001cb8 <HAL_I2C_MspInit+0x154>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_DISABLE;
 8001bfa:	4b2f      	ldr	r3, [pc, #188]	; (8001cb8 <HAL_I2C_MspInit+0x154>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c00:	4b2d      	ldr	r3, [pc, #180]	; (8001cb8 <HAL_I2C_MspInit+0x154>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c06:	4b2c      	ldr	r3, [pc, #176]	; (8001cb8 <HAL_I2C_MspInit+0x154>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001c0c:	4b2a      	ldr	r3, [pc, #168]	; (8001cb8 <HAL_I2C_MspInit+0x154>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c12:	4b29      	ldr	r3, [pc, #164]	; (8001cb8 <HAL_I2C_MspInit+0x154>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c18:	4b27      	ldr	r3, [pc, #156]	; (8001cb8 <HAL_I2C_MspInit+0x154>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001c1e:	4826      	ldr	r0, [pc, #152]	; (8001cb8 <HAL_I2C_MspInit+0x154>)
 8001c20:	f000 fb50 	bl	80022c4 <HAL_DMA_Init>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 8001c2a:	f7ff ff6d 	bl	8001b08 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a21      	ldr	r2, [pc, #132]	; (8001cb8 <HAL_I2C_MspInit+0x154>)
 8001c32:	639a      	str	r2, [r3, #56]	; 0x38
 8001c34:	4a20      	ldr	r2, [pc, #128]	; (8001cb8 <HAL_I2C_MspInit+0x154>)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001c3a:	4b21      	ldr	r3, [pc, #132]	; (8001cc0 <HAL_I2C_MspInit+0x15c>)
 8001c3c:	4a21      	ldr	r2, [pc, #132]	; (8001cc4 <HAL_I2C_MspInit+0x160>)
 8001c3e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001c40:	4b1f      	ldr	r3, [pc, #124]	; (8001cc0 <HAL_I2C_MspInit+0x15c>)
 8001c42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c46:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c48:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <HAL_I2C_MspInit+0x15c>)
 8001c4a:	2240      	movs	r2, #64	; 0x40
 8001c4c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c4e:	4b1c      	ldr	r3, [pc, #112]	; (8001cc0 <HAL_I2C_MspInit+0x15c>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_DISABLE;
 8001c54:	4b1a      	ldr	r3, [pc, #104]	; (8001cc0 <HAL_I2C_MspInit+0x15c>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c5a:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <HAL_I2C_MspInit+0x15c>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c60:	4b17      	ldr	r3, [pc, #92]	; (8001cc0 <HAL_I2C_MspInit+0x15c>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001c66:	4b16      	ldr	r3, [pc, #88]	; (8001cc0 <HAL_I2C_MspInit+0x15c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c6c:	4b14      	ldr	r3, [pc, #80]	; (8001cc0 <HAL_I2C_MspInit+0x15c>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c72:	4b13      	ldr	r3, [pc, #76]	; (8001cc0 <HAL_I2C_MspInit+0x15c>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001c78:	4811      	ldr	r0, [pc, #68]	; (8001cc0 <HAL_I2C_MspInit+0x15c>)
 8001c7a:	f000 fb23 	bl	80022c4 <HAL_DMA_Init>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <HAL_I2C_MspInit+0x124>
    {
      Error_Handler();
 8001c84:	f7ff ff40 	bl	8001b08 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a0d      	ldr	r2, [pc, #52]	; (8001cc0 <HAL_I2C_MspInit+0x15c>)
 8001c8c:	635a      	str	r2, [r3, #52]	; 0x34
 8001c8e:	4a0c      	ldr	r2, [pc, #48]	; (8001cc0 <HAL_I2C_MspInit+0x15c>)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001c94:	2200      	movs	r2, #0
 8001c96:	2100      	movs	r1, #0
 8001c98:	201f      	movs	r0, #31
 8001c9a:	f000 fadc 	bl	8002256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001c9e:	201f      	movs	r0, #31
 8001ca0:	f000 faf5 	bl	800228e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ca4:	bf00      	nop
 8001ca6:	3728      	adds	r7, #40	; 0x28
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40005400 	.word	0x40005400
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40020400 	.word	0x40020400
 8001cb8:	200000cc 	.word	0x200000cc
 8001cbc:	40026010 	.word	0x40026010
 8001cc0:	2000012c 	.word	0x2000012c
 8001cc4:	400260a0 	.word	0x400260a0

08001cc8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08a      	sub	sp, #40	; 0x28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a34      	ldr	r2, [pc, #208]	; (8001db8 <HAL_SPI_MspInit+0xf0>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d162      	bne.n	8001db0 <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	4b33      	ldr	r3, [pc, #204]	; (8001dbc <HAL_SPI_MspInit+0xf4>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	4a32      	ldr	r2, [pc, #200]	; (8001dbc <HAL_SPI_MspInit+0xf4>)
 8001cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfa:	4b30      	ldr	r3, [pc, #192]	; (8001dbc <HAL_SPI_MspInit+0xf4>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	4b2c      	ldr	r3, [pc, #176]	; (8001dbc <HAL_SPI_MspInit+0xf4>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a2b      	ldr	r2, [pc, #172]	; (8001dbc <HAL_SPI_MspInit+0xf4>)
 8001d10:	f043 0304 	orr.w	r3, r3, #4
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b29      	ldr	r3, [pc, #164]	; (8001dbc <HAL_SPI_MspInit+0xf4>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f003 0304 	and.w	r3, r3, #4
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	60bb      	str	r3, [r7, #8]
 8001d26:	4b25      	ldr	r3, [pc, #148]	; (8001dbc <HAL_SPI_MspInit+0xf4>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	4a24      	ldr	r2, [pc, #144]	; (8001dbc <HAL_SPI_MspInit+0xf4>)
 8001d2c:	f043 0302 	orr.w	r3, r3, #2
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4b22      	ldr	r3, [pc, #136]	; (8001dbc <HAL_SPI_MspInit+0xf4>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d42:	2302      	movs	r3, #2
 8001d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001d4e:	2307      	movs	r3, #7
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d52:	f107 0314 	add.w	r3, r7, #20
 8001d56:	4619      	mov	r1, r3
 8001d58:	4819      	ldr	r0, [pc, #100]	; (8001dc0 <HAL_SPI_MspInit+0xf8>)
 8001d5a:	f000 fdcd 	bl	80028f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d5e:	2304      	movs	r3, #4
 8001d60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d62:	2302      	movs	r3, #2
 8001d64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d6e:	2305      	movs	r3, #5
 8001d70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d72:	f107 0314 	add.w	r3, r7, #20
 8001d76:	4619      	mov	r1, r3
 8001d78:	4811      	ldr	r0, [pc, #68]	; (8001dc0 <HAL_SPI_MspInit+0xf8>)
 8001d7a:	f000 fdbd 	bl	80028f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d90:	2305      	movs	r3, #5
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	4619      	mov	r1, r3
 8001d9a:	480a      	ldr	r0, [pc, #40]	; (8001dc4 <HAL_SPI_MspInit+0xfc>)
 8001d9c:	f000 fdac 	bl	80028f8 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001da0:	2200      	movs	r2, #0
 8001da2:	2100      	movs	r1, #0
 8001da4:	2024      	movs	r0, #36	; 0x24
 8001da6:	f000 fa56 	bl	8002256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001daa:	2024      	movs	r0, #36	; 0x24
 8001dac:	f000 fa6f 	bl	800228e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001db0:	bf00      	nop
 8001db2:	3728      	adds	r7, #40	; 0x28
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40003800 	.word	0x40003800
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40020800 	.word	0x40020800
 8001dc4:	40020400 	.word	0x40020400

08001dc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08a      	sub	sp, #40	; 0x28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a19      	ldr	r2, [pc, #100]	; (8001e4c <HAL_UART_MspInit+0x84>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d12b      	bne.n	8001e42 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	4b18      	ldr	r3, [pc, #96]	; (8001e50 <HAL_UART_MspInit+0x88>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	4a17      	ldr	r2, [pc, #92]	; (8001e50 <HAL_UART_MspInit+0x88>)
 8001df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001df8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dfa:	4b15      	ldr	r3, [pc, #84]	; (8001e50 <HAL_UART_MspInit+0x88>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e02:	613b      	str	r3, [r7, #16]
 8001e04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <HAL_UART_MspInit+0x88>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	4a10      	ldr	r2, [pc, #64]	; (8001e50 <HAL_UART_MspInit+0x88>)
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	6313      	str	r3, [r2, #48]	; 0x30
 8001e16:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <HAL_UART_MspInit+0x88>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e22:	230c      	movs	r3, #12
 8001e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e26:	2302      	movs	r3, #2
 8001e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e32:	2307      	movs	r3, #7
 8001e34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e36:	f107 0314 	add.w	r3, r7, #20
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4805      	ldr	r0, [pc, #20]	; (8001e54 <HAL_UART_MspInit+0x8c>)
 8001e3e:	f000 fd5b 	bl	80028f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e42:	bf00      	nop
 8001e44:	3728      	adds	r7, #40	; 0x28
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40004400 	.word	0x40004400
 8001e50:	40023800 	.word	0x40023800
 8001e54:	40020000 	.word	0x40020000

08001e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e5c:	e7fe      	b.n	8001e5c <NMI_Handler+0x4>

08001e5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e62:	e7fe      	b.n	8001e62 <HardFault_Handler+0x4>

08001e64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e68:	e7fe      	b.n	8001e68 <MemManage_Handler+0x4>

08001e6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e6e:	e7fe      	b.n	8001e6e <BusFault_Handler+0x4>

08001e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e74:	e7fe      	b.n	8001e74 <UsageFault_Handler+0x4>

08001e76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e92:	b480      	push	{r7}
 8001e94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ea4:	f000 f8b8 	bl	8002018 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001eb0:	4802      	ldr	r0, [pc, #8]	; (8001ebc <DMA1_Stream0_IRQHandler+0x10>)
 8001eb2:	f000 fad7 	bl	8002464 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	200000cc 	.word	0x200000cc

08001ec0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001ec4:	4802      	ldr	r0, [pc, #8]	; (8001ed0 <DMA1_Stream6_IRQHandler+0x10>)
 8001ec6:	f000 facd 	bl	8002464 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	2000012c 	.word	0x2000012c

08001ed4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001ed8:	4802      	ldr	r0, [pc, #8]	; (8001ee4 <I2C1_EV_IRQHandler+0x10>)
 8001eda:	f001 fb23 	bl	8003524 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000078 	.word	0x20000078

08001ee8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001eec:	4802      	ldr	r0, [pc, #8]	; (8001ef8 <SPI2_IRQHandler+0x10>)
 8001eee:	f004 fc4b 	bl	8006788 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	2000018c 	.word	0x2000018c

08001efc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <SystemInit+0x20>)
 8001f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f06:	4a05      	ldr	r2, [pc, #20]	; (8001f1c <SystemInit+0x20>)
 8001f08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f24:	480d      	ldr	r0, [pc, #52]	; (8001f5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f26:	490e      	ldr	r1, [pc, #56]	; (8001f60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f28:	4a0e      	ldr	r2, [pc, #56]	; (8001f64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f2c:	e002      	b.n	8001f34 <LoopCopyDataInit>

08001f2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f32:	3304      	adds	r3, #4

08001f34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f38:	d3f9      	bcc.n	8001f2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f3a:	4a0b      	ldr	r2, [pc, #44]	; (8001f68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f3c:	4c0b      	ldr	r4, [pc, #44]	; (8001f6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f40:	e001      	b.n	8001f46 <LoopFillZerobss>

08001f42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f44:	3204      	adds	r2, #4

08001f46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f48:	d3fb      	bcc.n	8001f42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f4a:	f7ff ffd7 	bl	8001efc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f4e:	f005 fac9 	bl	80074e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f52:	f7ff fae3 	bl	800151c <main>
  bx  lr    
 8001f56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f60:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001f64:	08007a28 	.word	0x08007a28
  ldr r2, =_sbss
 8001f68:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001f6c:	2000022c 	.word	0x2000022c

08001f70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f70:	e7fe      	b.n	8001f70 <ADC_IRQHandler>
	...

08001f74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f78:	4b0e      	ldr	r3, [pc, #56]	; (8001fb4 <HAL_Init+0x40>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a0d      	ldr	r2, [pc, #52]	; (8001fb4 <HAL_Init+0x40>)
 8001f7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f84:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <HAL_Init+0x40>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a0a      	ldr	r2, [pc, #40]	; (8001fb4 <HAL_Init+0x40>)
 8001f8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f90:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <HAL_Init+0x40>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a07      	ldr	r2, [pc, #28]	; (8001fb4 <HAL_Init+0x40>)
 8001f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f9c:	2003      	movs	r0, #3
 8001f9e:	f000 f94f 	bl	8002240 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	f000 f808 	bl	8001fb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fa8:	f7ff fdb4 	bl	8001b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40023c00 	.word	0x40023c00

08001fb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fc0:	4b12      	ldr	r3, [pc, #72]	; (800200c <HAL_InitTick+0x54>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	4b12      	ldr	r3, [pc, #72]	; (8002010 <HAL_InitTick+0x58>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	4619      	mov	r1, r3
 8001fca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f000 f967 	bl	80022aa <HAL_SYSTICK_Config>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e00e      	b.n	8002004 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b0f      	cmp	r3, #15
 8001fea:	d80a      	bhi.n	8002002 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fec:	2200      	movs	r2, #0
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff4:	f000 f92f 	bl	8002256 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ff8:	4a06      	ldr	r2, [pc, #24]	; (8002014 <HAL_InitTick+0x5c>)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
 8002000:	e000      	b.n	8002004 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
}
 8002004:	4618      	mov	r0, r3
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	2000000c 	.word	0x2000000c
 8002010:	20000014 	.word	0x20000014
 8002014:	20000010 	.word	0x20000010

08002018 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800201c:	4b06      	ldr	r3, [pc, #24]	; (8002038 <HAL_IncTick+0x20>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	461a      	mov	r2, r3
 8002022:	4b06      	ldr	r3, [pc, #24]	; (800203c <HAL_IncTick+0x24>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4413      	add	r3, r2
 8002028:	4a04      	ldr	r2, [pc, #16]	; (800203c <HAL_IncTick+0x24>)
 800202a:	6013      	str	r3, [r2, #0]
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	20000014 	.word	0x20000014
 800203c:	20000228 	.word	0x20000228

08002040 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  return uwTick;
 8002044:	4b03      	ldr	r3, [pc, #12]	; (8002054 <HAL_GetTick+0x14>)
 8002046:	681b      	ldr	r3, [r3, #0]
}
 8002048:	4618      	mov	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	20000228 	.word	0x20000228

08002058 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002060:	f7ff ffee 	bl	8002040 <HAL_GetTick>
 8002064:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002070:	d005      	beq.n	800207e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002072:	4b0a      	ldr	r3, [pc, #40]	; (800209c <HAL_Delay+0x44>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	461a      	mov	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4413      	add	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800207e:	bf00      	nop
 8002080:	f7ff ffde 	bl	8002040 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	429a      	cmp	r2, r3
 800208e:	d8f7      	bhi.n	8002080 <HAL_Delay+0x28>
  {
  }
}
 8002090:	bf00      	nop
 8002092:	bf00      	nop
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000014 	.word	0x20000014

080020a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020b0:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <__NVIC_SetPriorityGrouping+0x44>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020bc:	4013      	ands	r3, r2
 80020be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020d2:	4a04      	ldr	r2, [pc, #16]	; (80020e4 <__NVIC_SetPriorityGrouping+0x44>)
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	60d3      	str	r3, [r2, #12]
}
 80020d8:	bf00      	nop
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	e000ed00 	.word	0xe000ed00

080020e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020ec:	4b04      	ldr	r3, [pc, #16]	; (8002100 <__NVIC_GetPriorityGrouping+0x18>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	0a1b      	lsrs	r3, r3, #8
 80020f2:	f003 0307 	and.w	r3, r3, #7
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800210e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002112:	2b00      	cmp	r3, #0
 8002114:	db0b      	blt.n	800212e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002116:	79fb      	ldrb	r3, [r7, #7]
 8002118:	f003 021f 	and.w	r2, r3, #31
 800211c:	4907      	ldr	r1, [pc, #28]	; (800213c <__NVIC_EnableIRQ+0x38>)
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	095b      	lsrs	r3, r3, #5
 8002124:	2001      	movs	r0, #1
 8002126:	fa00 f202 	lsl.w	r2, r0, r2
 800212a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	e000e100 	.word	0xe000e100

08002140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	6039      	str	r1, [r7, #0]
 800214a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800214c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002150:	2b00      	cmp	r3, #0
 8002152:	db0a      	blt.n	800216a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	b2da      	uxtb	r2, r3
 8002158:	490c      	ldr	r1, [pc, #48]	; (800218c <__NVIC_SetPriority+0x4c>)
 800215a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215e:	0112      	lsls	r2, r2, #4
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	440b      	add	r3, r1
 8002164:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002168:	e00a      	b.n	8002180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	b2da      	uxtb	r2, r3
 800216e:	4908      	ldr	r1, [pc, #32]	; (8002190 <__NVIC_SetPriority+0x50>)
 8002170:	79fb      	ldrb	r3, [r7, #7]
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	3b04      	subs	r3, #4
 8002178:	0112      	lsls	r2, r2, #4
 800217a:	b2d2      	uxtb	r2, r2
 800217c:	440b      	add	r3, r1
 800217e:	761a      	strb	r2, [r3, #24]
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	e000e100 	.word	0xe000e100
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002194:	b480      	push	{r7}
 8002196:	b089      	sub	sp, #36	; 0x24
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f1c3 0307 	rsb	r3, r3, #7
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	bf28      	it	cs
 80021b2:	2304      	movcs	r3, #4
 80021b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	3304      	adds	r3, #4
 80021ba:	2b06      	cmp	r3, #6
 80021bc:	d902      	bls.n	80021c4 <NVIC_EncodePriority+0x30>
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	3b03      	subs	r3, #3
 80021c2:	e000      	b.n	80021c6 <NVIC_EncodePriority+0x32>
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c8:	f04f 32ff 	mov.w	r2, #4294967295
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43da      	mvns	r2, r3
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	401a      	ands	r2, r3
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021dc:	f04f 31ff 	mov.w	r1, #4294967295
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	fa01 f303 	lsl.w	r3, r1, r3
 80021e6:	43d9      	mvns	r1, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021ec:	4313      	orrs	r3, r2
         );
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3724      	adds	r7, #36	; 0x24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
	...

080021fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3b01      	subs	r3, #1
 8002208:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800220c:	d301      	bcc.n	8002212 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800220e:	2301      	movs	r3, #1
 8002210:	e00f      	b.n	8002232 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002212:	4a0a      	ldr	r2, [pc, #40]	; (800223c <SysTick_Config+0x40>)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3b01      	subs	r3, #1
 8002218:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800221a:	210f      	movs	r1, #15
 800221c:	f04f 30ff 	mov.w	r0, #4294967295
 8002220:	f7ff ff8e 	bl	8002140 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002224:	4b05      	ldr	r3, [pc, #20]	; (800223c <SysTick_Config+0x40>)
 8002226:	2200      	movs	r2, #0
 8002228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800222a:	4b04      	ldr	r3, [pc, #16]	; (800223c <SysTick_Config+0x40>)
 800222c:	2207      	movs	r2, #7
 800222e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	e000e010 	.word	0xe000e010

08002240 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f7ff ff29 	bl	80020a0 <__NVIC_SetPriorityGrouping>
}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002256:	b580      	push	{r7, lr}
 8002258:	b086      	sub	sp, #24
 800225a:	af00      	add	r7, sp, #0
 800225c:	4603      	mov	r3, r0
 800225e:	60b9      	str	r1, [r7, #8]
 8002260:	607a      	str	r2, [r7, #4]
 8002262:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002268:	f7ff ff3e 	bl	80020e8 <__NVIC_GetPriorityGrouping>
 800226c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	68b9      	ldr	r1, [r7, #8]
 8002272:	6978      	ldr	r0, [r7, #20]
 8002274:	f7ff ff8e 	bl	8002194 <NVIC_EncodePriority>
 8002278:	4602      	mov	r2, r0
 800227a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800227e:	4611      	mov	r1, r2
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff ff5d 	bl	8002140 <__NVIC_SetPriority>
}
 8002286:	bf00      	nop
 8002288:	3718      	adds	r7, #24
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b082      	sub	sp, #8
 8002292:	af00      	add	r7, sp, #0
 8002294:	4603      	mov	r3, r0
 8002296:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff ff31 	bl	8002104 <__NVIC_EnableIRQ>
}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b082      	sub	sp, #8
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff ffa2 	bl	80021fc <SysTick_Config>
 80022b8:	4603      	mov	r3, r0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022d0:	f7ff feb6 	bl	8002040 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e099      	b.n	8002414 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2202      	movs	r2, #2
 80022e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0201 	bic.w	r2, r2, #1
 80022fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002300:	e00f      	b.n	8002322 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002302:	f7ff fe9d 	bl	8002040 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b05      	cmp	r3, #5
 800230e:	d908      	bls.n	8002322 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2220      	movs	r2, #32
 8002314:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2203      	movs	r2, #3
 800231a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e078      	b.n	8002414 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1e8      	bne.n	8002302 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	4b38      	ldr	r3, [pc, #224]	; (800241c <HAL_DMA_Init+0x158>)
 800233c:	4013      	ands	r3, r2
 800233e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800234e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800235a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002366:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	4313      	orrs	r3, r2
 8002372:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002378:	2b04      	cmp	r3, #4
 800237a:	d107      	bne.n	800238c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002384:	4313      	orrs	r3, r2
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	4313      	orrs	r3, r2
 800238a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	f023 0307 	bic.w	r3, r3, #7
 80023a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d117      	bne.n	80023e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	4313      	orrs	r3, r2
 80023be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00e      	beq.n	80023e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 fa19 	bl	8002800 <DMA_CheckFifoParam>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d008      	beq.n	80023e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2240      	movs	r2, #64	; 0x40
 80023d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80023e2:	2301      	movs	r3, #1
 80023e4:	e016      	b.n	8002414 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f9d0 	bl	8002794 <DMA_CalcBaseAndBitshift>
 80023f4:	4603      	mov	r3, r0
 80023f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fc:	223f      	movs	r2, #63	; 0x3f
 80023fe:	409a      	lsls	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	f010803f 	.word	0xf010803f

08002420 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d004      	beq.n	800243e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2280      	movs	r2, #128	; 0x80
 8002438:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e00c      	b.n	8002458 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2205      	movs	r2, #5
 8002442:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 0201 	bic.w	r2, r2, #1
 8002454:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800246c:	2300      	movs	r3, #0
 800246e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002470:	4b8e      	ldr	r3, [pc, #568]	; (80026ac <HAL_DMA_IRQHandler+0x248>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a8e      	ldr	r2, [pc, #568]	; (80026b0 <HAL_DMA_IRQHandler+0x24c>)
 8002476:	fba2 2303 	umull	r2, r3, r2, r3
 800247a:	0a9b      	lsrs	r3, r3, #10
 800247c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002482:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248e:	2208      	movs	r2, #8
 8002490:	409a      	lsls	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	4013      	ands	r3, r2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d01a      	beq.n	80024d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d013      	beq.n	80024d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0204 	bic.w	r2, r2, #4
 80024b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024bc:	2208      	movs	r2, #8
 80024be:	409a      	lsls	r2, r3
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c8:	f043 0201 	orr.w	r2, r3, #1
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d4:	2201      	movs	r2, #1
 80024d6:	409a      	lsls	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4013      	ands	r3, r2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d012      	beq.n	8002506 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00b      	beq.n	8002506 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f2:	2201      	movs	r2, #1
 80024f4:	409a      	lsls	r2, r3
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024fe:	f043 0202 	orr.w	r2, r3, #2
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250a:	2204      	movs	r2, #4
 800250c:	409a      	lsls	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	4013      	ands	r3, r2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d012      	beq.n	800253c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00b      	beq.n	800253c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002528:	2204      	movs	r2, #4
 800252a:	409a      	lsls	r2, r3
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002534:	f043 0204 	orr.w	r2, r3, #4
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002540:	2210      	movs	r2, #16
 8002542:	409a      	lsls	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4013      	ands	r3, r2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d043      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0308 	and.w	r3, r3, #8
 8002556:	2b00      	cmp	r3, #0
 8002558:	d03c      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800255e:	2210      	movs	r2, #16
 8002560:	409a      	lsls	r2, r3
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d018      	beq.n	80025a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d108      	bne.n	8002594 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	2b00      	cmp	r3, #0
 8002588:	d024      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	4798      	blx	r3
 8002592:	e01f      	b.n	80025d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002598:	2b00      	cmp	r3, #0
 800259a:	d01b      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	4798      	blx	r3
 80025a4:	e016      	b.n	80025d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d107      	bne.n	80025c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 0208 	bic.w	r2, r2, #8
 80025c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d8:	2220      	movs	r2, #32
 80025da:	409a      	lsls	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4013      	ands	r3, r2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 808f 	beq.w	8002704 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0310 	and.w	r3, r3, #16
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 8087 	beq.w	8002704 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fa:	2220      	movs	r2, #32
 80025fc:	409a      	lsls	r2, r3
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b05      	cmp	r3, #5
 800260c:	d136      	bne.n	800267c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0216 	bic.w	r2, r2, #22
 800261c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	695a      	ldr	r2, [r3, #20]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800262c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	2b00      	cmp	r3, #0
 8002634:	d103      	bne.n	800263e <HAL_DMA_IRQHandler+0x1da>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800263a:	2b00      	cmp	r3, #0
 800263c:	d007      	beq.n	800264e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0208 	bic.w	r2, r2, #8
 800264c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002652:	223f      	movs	r2, #63	; 0x3f
 8002654:	409a      	lsls	r2, r3
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800266e:	2b00      	cmp	r3, #0
 8002670:	d07e      	beq.n	8002770 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	4798      	blx	r3
        }
        return;
 800267a:	e079      	b.n	8002770 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d01d      	beq.n	80026c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10d      	bne.n	80026b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269c:	2b00      	cmp	r3, #0
 800269e:	d031      	beq.n	8002704 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	4798      	blx	r3
 80026a8:	e02c      	b.n	8002704 <HAL_DMA_IRQHandler+0x2a0>
 80026aa:	bf00      	nop
 80026ac:	2000000c 	.word	0x2000000c
 80026b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d023      	beq.n	8002704 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	4798      	blx	r3
 80026c4:	e01e      	b.n	8002704 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10f      	bne.n	80026f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0210 	bic.w	r2, r2, #16
 80026e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002708:	2b00      	cmp	r3, #0
 800270a:	d032      	beq.n	8002772 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b00      	cmp	r3, #0
 8002716:	d022      	beq.n	800275e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2205      	movs	r2, #5
 800271c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 0201 	bic.w	r2, r2, #1
 800272e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	3301      	adds	r3, #1
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	429a      	cmp	r2, r3
 800273a:	d307      	bcc.n	800274c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1f2      	bne.n	8002730 <HAL_DMA_IRQHandler+0x2cc>
 800274a:	e000      	b.n	800274e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800274c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002762:	2b00      	cmp	r3, #0
 8002764:	d005      	beq.n	8002772 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	4798      	blx	r3
 800276e:	e000      	b.n	8002772 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002770:	bf00      	nop
    }
  }
}
 8002772:	3718      	adds	r7, #24
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002786:	b2db      	uxtb	r3, r3
}
 8002788:	4618      	mov	r0, r3
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	3b10      	subs	r3, #16
 80027a4:	4a14      	ldr	r2, [pc, #80]	; (80027f8 <DMA_CalcBaseAndBitshift+0x64>)
 80027a6:	fba2 2303 	umull	r2, r3, r2, r3
 80027aa:	091b      	lsrs	r3, r3, #4
 80027ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027ae:	4a13      	ldr	r2, [pc, #76]	; (80027fc <DMA_CalcBaseAndBitshift+0x68>)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4413      	add	r3, r2
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	461a      	mov	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2b03      	cmp	r3, #3
 80027c0:	d909      	bls.n	80027d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027ca:	f023 0303 	bic.w	r3, r3, #3
 80027ce:	1d1a      	adds	r2, r3, #4
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	659a      	str	r2, [r3, #88]	; 0x58
 80027d4:	e007      	b.n	80027e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027de:	f023 0303 	bic.w	r3, r3, #3
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	aaaaaaab 	.word	0xaaaaaaab
 80027fc:	08007a10 	.word	0x08007a10

08002800 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002808:	2300      	movs	r3, #0
 800280a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002810:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d11f      	bne.n	800285a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	2b03      	cmp	r3, #3
 800281e:	d856      	bhi.n	80028ce <DMA_CheckFifoParam+0xce>
 8002820:	a201      	add	r2, pc, #4	; (adr r2, 8002828 <DMA_CheckFifoParam+0x28>)
 8002822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002826:	bf00      	nop
 8002828:	08002839 	.word	0x08002839
 800282c:	0800284b 	.word	0x0800284b
 8002830:	08002839 	.word	0x08002839
 8002834:	080028cf 	.word	0x080028cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d046      	beq.n	80028d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002848:	e043      	b.n	80028d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002852:	d140      	bne.n	80028d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002858:	e03d      	b.n	80028d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002862:	d121      	bne.n	80028a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2b03      	cmp	r3, #3
 8002868:	d837      	bhi.n	80028da <DMA_CheckFifoParam+0xda>
 800286a:	a201      	add	r2, pc, #4	; (adr r2, 8002870 <DMA_CheckFifoParam+0x70>)
 800286c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002870:	08002881 	.word	0x08002881
 8002874:	08002887 	.word	0x08002887
 8002878:	08002881 	.word	0x08002881
 800287c:	08002899 	.word	0x08002899
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	73fb      	strb	r3, [r7, #15]
      break;
 8002884:	e030      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d025      	beq.n	80028de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002896:	e022      	b.n	80028de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028a0:	d11f      	bne.n	80028e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80028a6:	e01c      	b.n	80028e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d903      	bls.n	80028b6 <DMA_CheckFifoParam+0xb6>
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2b03      	cmp	r3, #3
 80028b2:	d003      	beq.n	80028bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80028b4:	e018      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	73fb      	strb	r3, [r7, #15]
      break;
 80028ba:	e015      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00e      	beq.n	80028e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	73fb      	strb	r3, [r7, #15]
      break;
 80028cc:	e00b      	b.n	80028e6 <DMA_CheckFifoParam+0xe6>
      break;
 80028ce:	bf00      	nop
 80028d0:	e00a      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
      break;
 80028d2:	bf00      	nop
 80028d4:	e008      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
      break;
 80028d6:	bf00      	nop
 80028d8:	e006      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
      break;
 80028da:	bf00      	nop
 80028dc:	e004      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
      break;
 80028de:	bf00      	nop
 80028e0:	e002      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80028e2:	bf00      	nop
 80028e4:	e000      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
      break;
 80028e6:	bf00      	nop
    }
  } 
  
  return status; 
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop

080028f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b089      	sub	sp, #36	; 0x24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002902:	2300      	movs	r3, #0
 8002904:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002906:	2300      	movs	r3, #0
 8002908:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800290a:	2300      	movs	r3, #0
 800290c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800290e:	2300      	movs	r3, #0
 8002910:	61fb      	str	r3, [r7, #28]
 8002912:	e165      	b.n	8002be0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002914:	2201      	movs	r2, #1
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	4013      	ands	r3, r2
 8002926:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	429a      	cmp	r2, r3
 800292e:	f040 8154 	bne.w	8002bda <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	2b01      	cmp	r3, #1
 800293c:	d005      	beq.n	800294a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002946:	2b02      	cmp	r3, #2
 8002948:	d130      	bne.n	80029ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	2203      	movs	r2, #3
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	43db      	mvns	r3, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4013      	ands	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	68da      	ldr	r2, [r3, #12]
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4313      	orrs	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002980:	2201      	movs	r2, #1
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	43db      	mvns	r3, r3
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	4013      	ands	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	091b      	lsrs	r3, r3, #4
 8002996:	f003 0201 	and.w	r2, r3, #1
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f003 0303 	and.w	r3, r3, #3
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	d017      	beq.n	80029e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	2203      	movs	r2, #3
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4313      	orrs	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 0303 	and.w	r3, r3, #3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d123      	bne.n	8002a3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	08da      	lsrs	r2, r3, #3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3208      	adds	r2, #8
 80029fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	220f      	movs	r2, #15
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	691a      	ldr	r2, [r3, #16]
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	08da      	lsrs	r2, r3, #3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	3208      	adds	r2, #8
 8002a36:	69b9      	ldr	r1, [r7, #24]
 8002a38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	2203      	movs	r2, #3
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4013      	ands	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f003 0203 	and.w	r2, r3, #3
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 80ae 	beq.w	8002bda <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	4b5d      	ldr	r3, [pc, #372]	; (8002bf8 <HAL_GPIO_Init+0x300>)
 8002a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a86:	4a5c      	ldr	r2, [pc, #368]	; (8002bf8 <HAL_GPIO_Init+0x300>)
 8002a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a8e:	4b5a      	ldr	r3, [pc, #360]	; (8002bf8 <HAL_GPIO_Init+0x300>)
 8002a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a9a:	4a58      	ldr	r2, [pc, #352]	; (8002bfc <HAL_GPIO_Init+0x304>)
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	089b      	lsrs	r3, r3, #2
 8002aa0:	3302      	adds	r3, #2
 8002aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	220f      	movs	r2, #15
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4013      	ands	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a4f      	ldr	r2, [pc, #316]	; (8002c00 <HAL_GPIO_Init+0x308>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d025      	beq.n	8002b12 <HAL_GPIO_Init+0x21a>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a4e      	ldr	r2, [pc, #312]	; (8002c04 <HAL_GPIO_Init+0x30c>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d01f      	beq.n	8002b0e <HAL_GPIO_Init+0x216>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a4d      	ldr	r2, [pc, #308]	; (8002c08 <HAL_GPIO_Init+0x310>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d019      	beq.n	8002b0a <HAL_GPIO_Init+0x212>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a4c      	ldr	r2, [pc, #304]	; (8002c0c <HAL_GPIO_Init+0x314>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d013      	beq.n	8002b06 <HAL_GPIO_Init+0x20e>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a4b      	ldr	r2, [pc, #300]	; (8002c10 <HAL_GPIO_Init+0x318>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d00d      	beq.n	8002b02 <HAL_GPIO_Init+0x20a>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a4a      	ldr	r2, [pc, #296]	; (8002c14 <HAL_GPIO_Init+0x31c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d007      	beq.n	8002afe <HAL_GPIO_Init+0x206>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a49      	ldr	r2, [pc, #292]	; (8002c18 <HAL_GPIO_Init+0x320>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d101      	bne.n	8002afa <HAL_GPIO_Init+0x202>
 8002af6:	2306      	movs	r3, #6
 8002af8:	e00c      	b.n	8002b14 <HAL_GPIO_Init+0x21c>
 8002afa:	2307      	movs	r3, #7
 8002afc:	e00a      	b.n	8002b14 <HAL_GPIO_Init+0x21c>
 8002afe:	2305      	movs	r3, #5
 8002b00:	e008      	b.n	8002b14 <HAL_GPIO_Init+0x21c>
 8002b02:	2304      	movs	r3, #4
 8002b04:	e006      	b.n	8002b14 <HAL_GPIO_Init+0x21c>
 8002b06:	2303      	movs	r3, #3
 8002b08:	e004      	b.n	8002b14 <HAL_GPIO_Init+0x21c>
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	e002      	b.n	8002b14 <HAL_GPIO_Init+0x21c>
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e000      	b.n	8002b14 <HAL_GPIO_Init+0x21c>
 8002b12:	2300      	movs	r3, #0
 8002b14:	69fa      	ldr	r2, [r7, #28]
 8002b16:	f002 0203 	and.w	r2, r2, #3
 8002b1a:	0092      	lsls	r2, r2, #2
 8002b1c:	4093      	lsls	r3, r2
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b24:	4935      	ldr	r1, [pc, #212]	; (8002bfc <HAL_GPIO_Init+0x304>)
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	089b      	lsrs	r3, r3, #2
 8002b2a:	3302      	adds	r3, #2
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b32:	4b3a      	ldr	r3, [pc, #232]	; (8002c1c <HAL_GPIO_Init+0x324>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b56:	4a31      	ldr	r2, [pc, #196]	; (8002c1c <HAL_GPIO_Init+0x324>)
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b5c:	4b2f      	ldr	r3, [pc, #188]	; (8002c1c <HAL_GPIO_Init+0x324>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	43db      	mvns	r3, r3
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d003      	beq.n	8002b80 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b80:	4a26      	ldr	r2, [pc, #152]	; (8002c1c <HAL_GPIO_Init+0x324>)
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b86:	4b25      	ldr	r3, [pc, #148]	; (8002c1c <HAL_GPIO_Init+0x324>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4013      	ands	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002baa:	4a1c      	ldr	r2, [pc, #112]	; (8002c1c <HAL_GPIO_Init+0x324>)
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bb0:	4b1a      	ldr	r3, [pc, #104]	; (8002c1c <HAL_GPIO_Init+0x324>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d003      	beq.n	8002bd4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bd4:	4a11      	ldr	r2, [pc, #68]	; (8002c1c <HAL_GPIO_Init+0x324>)
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	61fb      	str	r3, [r7, #28]
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	2b0f      	cmp	r3, #15
 8002be4:	f67f ae96 	bls.w	8002914 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002be8:	bf00      	nop
 8002bea:	bf00      	nop
 8002bec:	3724      	adds	r7, #36	; 0x24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	40013800 	.word	0x40013800
 8002c00:	40020000 	.word	0x40020000
 8002c04:	40020400 	.word	0x40020400
 8002c08:	40020800 	.word	0x40020800
 8002c0c:	40020c00 	.word	0x40020c00
 8002c10:	40021000 	.word	0x40021000
 8002c14:	40021400 	.word	0x40021400
 8002c18:	40021800 	.word	0x40021800
 8002c1c:	40013c00 	.word	0x40013c00

08002c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	807b      	strh	r3, [r7, #2]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c30:	787b      	ldrb	r3, [r7, #1]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c36:	887a      	ldrh	r2, [r7, #2]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c3c:	e003      	b.n	8002c46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c3e:	887b      	ldrh	r3, [r7, #2]
 8002c40:	041a      	lsls	r2, r3, #16
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	619a      	str	r2, [r3, #24]
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
	...

08002c54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e12b      	b.n	8002ebe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d106      	bne.n	8002c80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7fe ff72 	bl	8001b64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2224      	movs	r2, #36	; 0x24
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0201 	bic.w	r2, r2, #1
 8002c96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ca6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002cb8:	f002 fbf8 	bl	80054ac <HAL_RCC_GetPCLK1Freq>
 8002cbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	4a81      	ldr	r2, [pc, #516]	; (8002ec8 <HAL_I2C_Init+0x274>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d807      	bhi.n	8002cd8 <HAL_I2C_Init+0x84>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	4a80      	ldr	r2, [pc, #512]	; (8002ecc <HAL_I2C_Init+0x278>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	bf94      	ite	ls
 8002cd0:	2301      	movls	r3, #1
 8002cd2:	2300      	movhi	r3, #0
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	e006      	b.n	8002ce6 <HAL_I2C_Init+0x92>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4a7d      	ldr	r2, [pc, #500]	; (8002ed0 <HAL_I2C_Init+0x27c>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	bf94      	ite	ls
 8002ce0:	2301      	movls	r3, #1
 8002ce2:	2300      	movhi	r3, #0
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e0e7      	b.n	8002ebe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	4a78      	ldr	r2, [pc, #480]	; (8002ed4 <HAL_I2C_Init+0x280>)
 8002cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf6:	0c9b      	lsrs	r3, r3, #18
 8002cf8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	4a6a      	ldr	r2, [pc, #424]	; (8002ec8 <HAL_I2C_Init+0x274>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d802      	bhi.n	8002d28 <HAL_I2C_Init+0xd4>
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	3301      	adds	r3, #1
 8002d26:	e009      	b.n	8002d3c <HAL_I2C_Init+0xe8>
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d2e:	fb02 f303 	mul.w	r3, r2, r3
 8002d32:	4a69      	ldr	r2, [pc, #420]	; (8002ed8 <HAL_I2C_Init+0x284>)
 8002d34:	fba2 2303 	umull	r2, r3, r2, r3
 8002d38:	099b      	lsrs	r3, r3, #6
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6812      	ldr	r2, [r2, #0]
 8002d40:	430b      	orrs	r3, r1
 8002d42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	495c      	ldr	r1, [pc, #368]	; (8002ec8 <HAL_I2C_Init+0x274>)
 8002d58:	428b      	cmp	r3, r1
 8002d5a:	d819      	bhi.n	8002d90 <HAL_I2C_Init+0x13c>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	1e59      	subs	r1, r3, #1
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d6a:	1c59      	adds	r1, r3, #1
 8002d6c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d70:	400b      	ands	r3, r1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00a      	beq.n	8002d8c <HAL_I2C_Init+0x138>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	1e59      	subs	r1, r3, #1
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d84:	3301      	adds	r3, #1
 8002d86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d8a:	e051      	b.n	8002e30 <HAL_I2C_Init+0x1dc>
 8002d8c:	2304      	movs	r3, #4
 8002d8e:	e04f      	b.n	8002e30 <HAL_I2C_Init+0x1dc>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d111      	bne.n	8002dbc <HAL_I2C_Init+0x168>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	1e58      	subs	r0, r3, #1
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6859      	ldr	r1, [r3, #4]
 8002da0:	460b      	mov	r3, r1
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	440b      	add	r3, r1
 8002da6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002daa:	3301      	adds	r3, #1
 8002dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	bf0c      	ite	eq
 8002db4:	2301      	moveq	r3, #1
 8002db6:	2300      	movne	r3, #0
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	e012      	b.n	8002de2 <HAL_I2C_Init+0x18e>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	1e58      	subs	r0, r3, #1
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6859      	ldr	r1, [r3, #4]
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	0099      	lsls	r1, r3, #2
 8002dcc:	440b      	add	r3, r1
 8002dce:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	bf0c      	ite	eq
 8002ddc:	2301      	moveq	r3, #1
 8002dde:	2300      	movne	r3, #0
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <HAL_I2C_Init+0x196>
 8002de6:	2301      	movs	r3, #1
 8002de8:	e022      	b.n	8002e30 <HAL_I2C_Init+0x1dc>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10e      	bne.n	8002e10 <HAL_I2C_Init+0x1bc>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	1e58      	subs	r0, r3, #1
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6859      	ldr	r1, [r3, #4]
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	440b      	add	r3, r1
 8002e00:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e04:	3301      	adds	r3, #1
 8002e06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e0e:	e00f      	b.n	8002e30 <HAL_I2C_Init+0x1dc>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	1e58      	subs	r0, r3, #1
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6859      	ldr	r1, [r3, #4]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	440b      	add	r3, r1
 8002e1e:	0099      	lsls	r1, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e26:	3301      	adds	r3, #1
 8002e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	6809      	ldr	r1, [r1, #0]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69da      	ldr	r2, [r3, #28]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6911      	ldr	r1, [r2, #16]
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	68d2      	ldr	r2, [r2, #12]
 8002e6a:	4311      	orrs	r1, r2
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6812      	ldr	r2, [r2, #0]
 8002e70:	430b      	orrs	r3, r1
 8002e72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	695a      	ldr	r2, [r3, #20]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	431a      	orrs	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0201 	orr.w	r2, r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	000186a0 	.word	0x000186a0
 8002ecc:	001e847f 	.word	0x001e847f
 8002ed0:	003d08ff 	.word	0x003d08ff
 8002ed4:	431bde83 	.word	0x431bde83
 8002ed8:	10624dd3 	.word	0x10624dd3

08002edc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b088      	sub	sp, #32
 8002ee0:	af02      	add	r7, sp, #8
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	607a      	str	r2, [r7, #4]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	460b      	mov	r3, r1
 8002eea:	817b      	strh	r3, [r7, #10]
 8002eec:	4613      	mov	r3, r2
 8002eee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ef0:	f7ff f8a6 	bl	8002040 <HAL_GetTick>
 8002ef4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b20      	cmp	r3, #32
 8002f00:	f040 80e0 	bne.w	80030c4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	2319      	movs	r3, #25
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	4970      	ldr	r1, [pc, #448]	; (80030d0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f001 ffb0 	bl	8004e74 <I2C_WaitOnFlagUntilTimeout>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e0d3      	b.n	80030c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d101      	bne.n	8002f2c <HAL_I2C_Master_Transmit+0x50>
 8002f28:	2302      	movs	r3, #2
 8002f2a:	e0cc      	b.n	80030c6 <HAL_I2C_Master_Transmit+0x1ea>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d007      	beq.n	8002f52 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f042 0201 	orr.w	r2, r2, #1
 8002f50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f60:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2221      	movs	r2, #33	; 0x21
 8002f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2210      	movs	r2, #16
 8002f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	893a      	ldrh	r2, [r7, #8]
 8002f82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	4a50      	ldr	r2, [pc, #320]	; (80030d4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002f92:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f94:	8979      	ldrh	r1, [r7, #10]
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	6a3a      	ldr	r2, [r7, #32]
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f001 fd72 	bl	8004a84 <I2C_MasterRequestWrite>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e08d      	b.n	80030c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002faa:	2300      	movs	r3, #0
 8002fac:	613b      	str	r3, [r7, #16]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	613b      	str	r3, [r7, #16]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	613b      	str	r3, [r7, #16]
 8002fbe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002fc0:	e066      	b.n	8003090 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	6a39      	ldr	r1, [r7, #32]
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f002 f82a 	bl	8005020 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00d      	beq.n	8002fee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d107      	bne.n	8002fea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e06b      	b.n	80030c6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	781a      	ldrb	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	1c5a      	adds	r2, r3, #1
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003008:	b29b      	uxth	r3, r3
 800300a:	3b01      	subs	r3, #1
 800300c:	b29a      	uxth	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b04      	cmp	r3, #4
 800302a:	d11b      	bne.n	8003064 <HAL_I2C_Master_Transmit+0x188>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003030:	2b00      	cmp	r3, #0
 8003032:	d017      	beq.n	8003064 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	781a      	ldrb	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	1c5a      	adds	r2, r3, #1
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304e:	b29b      	uxth	r3, r3
 8003050:	3b01      	subs	r3, #1
 8003052:	b29a      	uxth	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800305c:	3b01      	subs	r3, #1
 800305e:	b29a      	uxth	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	6a39      	ldr	r1, [r7, #32]
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f002 f81a 	bl	80050a2 <I2C_WaitOnBTFFlagUntilTimeout>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00d      	beq.n	8003090 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	2b04      	cmp	r3, #4
 800307a:	d107      	bne.n	800308c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800308a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e01a      	b.n	80030c6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003094:	2b00      	cmp	r3, #0
 8003096:	d194      	bne.n	8002fc2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2220      	movs	r2, #32
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030c0:	2300      	movs	r3, #0
 80030c2:	e000      	b.n	80030c6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80030c4:	2302      	movs	r3, #2
  }
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	00100002 	.word	0x00100002
 80030d4:	ffff0000 	.word	0xffff0000

080030d8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b08c      	sub	sp, #48	; 0x30
 80030dc:	af02      	add	r7, sp, #8
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	607a      	str	r2, [r7, #4]
 80030e2:	461a      	mov	r2, r3
 80030e4:	460b      	mov	r3, r1
 80030e6:	817b      	strh	r3, [r7, #10]
 80030e8:	4613      	mov	r3, r2
 80030ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030ec:	f7fe ffa8 	bl	8002040 <HAL_GetTick>
 80030f0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b20      	cmp	r3, #32
 80030fc:	f040 820b 	bne.w	8003516 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	9300      	str	r3, [sp, #0]
 8003104:	2319      	movs	r3, #25
 8003106:	2201      	movs	r2, #1
 8003108:	497c      	ldr	r1, [pc, #496]	; (80032fc <HAL_I2C_Master_Receive+0x224>)
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f001 feb2 	bl	8004e74 <I2C_WaitOnFlagUntilTimeout>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003116:	2302      	movs	r3, #2
 8003118:	e1fe      	b.n	8003518 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003120:	2b01      	cmp	r3, #1
 8003122:	d101      	bne.n	8003128 <HAL_I2C_Master_Receive+0x50>
 8003124:	2302      	movs	r3, #2
 8003126:	e1f7      	b.n	8003518 <HAL_I2C_Master_Receive+0x440>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b01      	cmp	r3, #1
 800313c:	d007      	beq.n	800314e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f042 0201 	orr.w	r2, r2, #1
 800314c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800315c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2222      	movs	r2, #34	; 0x22
 8003162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2210      	movs	r2, #16
 800316a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	893a      	ldrh	r2, [r7, #8]
 800317e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003184:	b29a      	uxth	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	4a5c      	ldr	r2, [pc, #368]	; (8003300 <HAL_I2C_Master_Receive+0x228>)
 800318e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003190:	8979      	ldrh	r1, [r7, #10]
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f001 fcf6 	bl	8004b88 <I2C_MasterRequestRead>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e1b8      	b.n	8003518 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d113      	bne.n	80031d6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ae:	2300      	movs	r3, #0
 80031b0:	623b      	str	r3, [r7, #32]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	695b      	ldr	r3, [r3, #20]
 80031b8:	623b      	str	r3, [r7, #32]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	623b      	str	r3, [r7, #32]
 80031c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	e18c      	b.n	80034f0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d11b      	bne.n	8003216 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ee:	2300      	movs	r3, #0
 80031f0:	61fb      	str	r3, [r7, #28]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	61fb      	str	r3, [r7, #28]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	61fb      	str	r3, [r7, #28]
 8003202:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	e16c      	b.n	80034f0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321a:	2b02      	cmp	r3, #2
 800321c:	d11b      	bne.n	8003256 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800322c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800323c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800323e:	2300      	movs	r3, #0
 8003240:	61bb      	str	r3, [r7, #24]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	61bb      	str	r3, [r7, #24]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	61bb      	str	r3, [r7, #24]
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	e14c      	b.n	80034f0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003264:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003266:	2300      	movs	r3, #0
 8003268:	617b      	str	r3, [r7, #20]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	617b      	str	r3, [r7, #20]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	617b      	str	r3, [r7, #20]
 800327a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800327c:	e138      	b.n	80034f0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003282:	2b03      	cmp	r3, #3
 8003284:	f200 80f1 	bhi.w	800346a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800328c:	2b01      	cmp	r3, #1
 800328e:	d123      	bne.n	80032d8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003292:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f001 ff77 	bl	8005188 <I2C_WaitOnRXNEFlagUntilTimeout>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e139      	b.n	8003518 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	691a      	ldr	r2, [r3, #16]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	1c5a      	adds	r2, r3, #1
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c0:	3b01      	subs	r3, #1
 80032c2:	b29a      	uxth	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	3b01      	subs	r3, #1
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032d6:	e10b      	b.n	80034f0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d14e      	bne.n	800337e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e6:	2200      	movs	r2, #0
 80032e8:	4906      	ldr	r1, [pc, #24]	; (8003304 <HAL_I2C_Master_Receive+0x22c>)
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f001 fdc2 	bl	8004e74 <I2C_WaitOnFlagUntilTimeout>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d008      	beq.n	8003308 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e10e      	b.n	8003518 <HAL_I2C_Master_Receive+0x440>
 80032fa:	bf00      	nop
 80032fc:	00100002 	.word	0x00100002
 8003300:	ffff0000 	.word	0xffff0000
 8003304:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003316:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	691a      	ldr	r2, [r3, #16]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	1c5a      	adds	r2, r3, #1
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003334:	3b01      	subs	r3, #1
 8003336:	b29a      	uxth	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003340:	b29b      	uxth	r3, r3
 8003342:	3b01      	subs	r3, #1
 8003344:	b29a      	uxth	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	691a      	ldr	r2, [r3, #16]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	b2d2      	uxtb	r2, r2
 8003356:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335c:	1c5a      	adds	r2, r3, #1
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003366:	3b01      	subs	r3, #1
 8003368:	b29a      	uxth	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003372:	b29b      	uxth	r3, r3
 8003374:	3b01      	subs	r3, #1
 8003376:	b29a      	uxth	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800337c:	e0b8      	b.n	80034f0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003384:	2200      	movs	r2, #0
 8003386:	4966      	ldr	r1, [pc, #408]	; (8003520 <HAL_I2C_Master_Receive+0x448>)
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f001 fd73 	bl	8004e74 <I2C_WaitOnFlagUntilTimeout>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e0bf      	b.n	8003518 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	691a      	ldr	r2, [r3, #16]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	b2d2      	uxtb	r2, r2
 80033b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	1c5a      	adds	r2, r3, #1
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c4:	3b01      	subs	r3, #1
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	3b01      	subs	r3, #1
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	9300      	str	r3, [sp, #0]
 80033de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e0:	2200      	movs	r2, #0
 80033e2:	494f      	ldr	r1, [pc, #316]	; (8003520 <HAL_I2C_Master_Receive+0x448>)
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f001 fd45 	bl	8004e74 <I2C_WaitOnFlagUntilTimeout>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e091      	b.n	8003518 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003402:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	691a      	ldr	r2, [r3, #16]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340e:	b2d2      	uxtb	r2, r2
 8003410:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	1c5a      	adds	r2, r3, #1
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003420:	3b01      	subs	r3, #1
 8003422:	b29a      	uxth	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342c:	b29b      	uxth	r3, r3
 800342e:	3b01      	subs	r3, #1
 8003430:	b29a      	uxth	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	691a      	ldr	r2, [r3, #16]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	b2d2      	uxtb	r2, r2
 8003442:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	1c5a      	adds	r2, r3, #1
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003452:	3b01      	subs	r3, #1
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345e:	b29b      	uxth	r3, r3
 8003460:	3b01      	subs	r3, #1
 8003462:	b29a      	uxth	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003468:	e042      	b.n	80034f0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800346a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800346c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f001 fe8a 	bl	8005188 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e04c      	b.n	8003518 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	691a      	ldr	r2, [r3, #16]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	b2d2      	uxtb	r2, r2
 800348a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	1c5a      	adds	r2, r3, #1
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800349a:	3b01      	subs	r3, #1
 800349c:	b29a      	uxth	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	3b01      	subs	r3, #1
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	f003 0304 	and.w	r3, r3, #4
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	d118      	bne.n	80034f0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	691a      	ldr	r2, [r3, #16]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	b2d2      	uxtb	r2, r2
 80034ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	1c5a      	adds	r2, r3, #1
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034da:	3b01      	subs	r3, #1
 80034dc:	b29a      	uxth	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	3b01      	subs	r3, #1
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f47f aec2 	bne.w	800327e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2220      	movs	r2, #32
 80034fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003512:	2300      	movs	r3, #0
 8003514:	e000      	b.n	8003518 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003516:	2302      	movs	r3, #2
  }
}
 8003518:	4618      	mov	r0, r3
 800351a:	3728      	adds	r7, #40	; 0x28
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	00010004 	.word	0x00010004

08003524 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800352c:	2300      	movs	r3, #0
 800352e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003544:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800354c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800354e:	7bfb      	ldrb	r3, [r7, #15]
 8003550:	2b10      	cmp	r3, #16
 8003552:	d003      	beq.n	800355c <HAL_I2C_EV_IRQHandler+0x38>
 8003554:	7bfb      	ldrb	r3, [r7, #15]
 8003556:	2b40      	cmp	r3, #64	; 0x40
 8003558:	f040 80b1 	bne.w	80036be <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10d      	bne.n	8003592 <HAL_I2C_EV_IRQHandler+0x6e>
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800357c:	d003      	beq.n	8003586 <HAL_I2C_EV_IRQHandler+0x62>
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003584:	d101      	bne.n	800358a <HAL_I2C_EV_IRQHandler+0x66>
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <HAL_I2C_EV_IRQHandler+0x68>
 800358a:	2300      	movs	r3, #0
 800358c:	2b01      	cmp	r3, #1
 800358e:	f000 8114 	beq.w	80037ba <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00b      	beq.n	80035b4 <HAL_I2C_EV_IRQHandler+0x90>
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d006      	beq.n	80035b4 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f001 fe73 	bl	8005292 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 fcbf 	bl	8003f30 <I2C_Master_SB>
 80035b2:	e083      	b.n	80036bc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	f003 0308 	and.w	r3, r3, #8
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d008      	beq.n	80035d0 <HAL_I2C_EV_IRQHandler+0xac>
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 fd37 	bl	800403c <I2C_Master_ADD10>
 80035ce:	e075      	b.n	80036bc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d008      	beq.n	80035ec <HAL_I2C_EV_IRQHandler+0xc8>
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 fd53 	bl	8004090 <I2C_Master_ADDR>
 80035ea:	e067      	b.n	80036bc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	f003 0304 	and.w	r3, r3, #4
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d036      	beq.n	8003664 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003600:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003604:	f000 80db 	beq.w	80037be <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00d      	beq.n	800362e <HAL_I2C_EV_IRQHandler+0x10a>
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003618:	2b00      	cmp	r3, #0
 800361a:	d008      	beq.n	800362e <HAL_I2C_EV_IRQHandler+0x10a>
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f003 0304 	and.w	r3, r3, #4
 8003622:	2b00      	cmp	r3, #0
 8003624:	d103      	bne.n	800362e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f937 	bl	800389a <I2C_MasterTransmit_TXE>
 800362c:	e046      	b.n	80036bc <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 80c2 	beq.w	80037be <HAL_I2C_EV_IRQHandler+0x29a>
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 80bc 	beq.w	80037be <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003646:	7bbb      	ldrb	r3, [r7, #14]
 8003648:	2b21      	cmp	r3, #33	; 0x21
 800364a:	d103      	bne.n	8003654 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 f9c0 	bl	80039d2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003652:	e0b4      	b.n	80037be <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003654:	7bfb      	ldrb	r3, [r7, #15]
 8003656:	2b40      	cmp	r3, #64	; 0x40
 8003658:	f040 80b1 	bne.w	80037be <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 fa2e 	bl	8003abe <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003662:	e0ac      	b.n	80037be <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800366e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003672:	f000 80a4 	beq.w	80037be <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00d      	beq.n	800369c <HAL_I2C_EV_IRQHandler+0x178>
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003686:	2b00      	cmp	r3, #0
 8003688:	d008      	beq.n	800369c <HAL_I2C_EV_IRQHandler+0x178>
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d103      	bne.n	800369c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 faa6 	bl	8003be6 <I2C_MasterReceive_RXNE>
 800369a:	e00f      	b.n	80036bc <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	f003 0304 	and.w	r3, r3, #4
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f000 808b 	beq.w	80037be <HAL_I2C_EV_IRQHandler+0x29a>
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f000 8085 	beq.w	80037be <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 fb51 	bl	8003d5c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036ba:	e080      	b.n	80037be <HAL_I2C_EV_IRQHandler+0x29a>
 80036bc:	e07f      	b.n	80037be <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d004      	beq.n	80036d0 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	61fb      	str	r3, [r7, #28]
 80036ce:	e007      	b.n	80036e0 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d011      	beq.n	800370e <HAL_I2C_EV_IRQHandler+0x1ea>
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00c      	beq.n	800370e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d003      	beq.n	8003704 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003704:	69b9      	ldr	r1, [r7, #24]
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 ff11 	bl	800452e <I2C_Slave_ADDR>
 800370c:	e05a      	b.n	80037c4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	f003 0310 	and.w	r3, r3, #16
 8003714:	2b00      	cmp	r3, #0
 8003716:	d008      	beq.n	800372a <HAL_I2C_EV_IRQHandler+0x206>
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 ff4c 	bl	80045c0 <I2C_Slave_STOPF>
 8003728:	e04c      	b.n	80037c4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800372a:	7bbb      	ldrb	r3, [r7, #14]
 800372c:	2b21      	cmp	r3, #33	; 0x21
 800372e:	d002      	beq.n	8003736 <HAL_I2C_EV_IRQHandler+0x212>
 8003730:	7bbb      	ldrb	r3, [r7, #14]
 8003732:	2b29      	cmp	r3, #41	; 0x29
 8003734:	d120      	bne.n	8003778 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00d      	beq.n	800375c <HAL_I2C_EV_IRQHandler+0x238>
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003746:	2b00      	cmp	r3, #0
 8003748:	d008      	beq.n	800375c <HAL_I2C_EV_IRQHandler+0x238>
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b00      	cmp	r3, #0
 8003752:	d103      	bne.n	800375c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 fe2c 	bl	80043b2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800375a:	e032      	b.n	80037c2 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	f003 0304 	and.w	r3, r3, #4
 8003762:	2b00      	cmp	r3, #0
 8003764:	d02d      	beq.n	80037c2 <HAL_I2C_EV_IRQHandler+0x29e>
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800376c:	2b00      	cmp	r3, #0
 800376e:	d028      	beq.n	80037c2 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 fe5b 	bl	800442c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003776:	e024      	b.n	80037c2 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00d      	beq.n	800379e <HAL_I2C_EV_IRQHandler+0x27a>
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003788:	2b00      	cmp	r3, #0
 800378a:	d008      	beq.n	800379e <HAL_I2C_EV_IRQHandler+0x27a>
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	f003 0304 	and.w	r3, r3, #4
 8003792:	2b00      	cmp	r3, #0
 8003794:	d103      	bne.n	800379e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 fe69 	bl	800446e <I2C_SlaveReceive_RXNE>
 800379c:	e012      	b.n	80037c4 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	f003 0304 	and.w	r3, r3, #4
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00d      	beq.n	80037c4 <HAL_I2C_EV_IRQHandler+0x2a0>
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d008      	beq.n	80037c4 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 fe99 	bl	80044ea <I2C_SlaveReceive_BTF>
 80037b8:	e004      	b.n	80037c4 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80037ba:	bf00      	nop
 80037bc:	e002      	b.n	80037c4 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037be:	bf00      	nop
 80037c0:	e000      	b.n	80037c4 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037c2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80037c4:	3720      	adds	r7, #32
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b083      	sub	sp, #12
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80037e6:	bf00      	nop
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b083      	sub	sp, #12
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800380e:	bf00      	nop
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800381a:	b480      	push	{r7}
 800381c:	b083      	sub	sp, #12
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
 8003822:	460b      	mov	r3, r1
 8003824:	70fb      	strb	r3, [r7, #3]
 8003826:	4613      	mov	r3, r2
 8003828:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003886:	b480      	push	{r7}
 8003888:	b083      	sub	sp, #12
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b084      	sub	sp, #16
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038b0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d150      	bne.n	8003962 <I2C_MasterTransmit_TXE+0xc8>
 80038c0:	7bfb      	ldrb	r3, [r7, #15]
 80038c2:	2b21      	cmp	r3, #33	; 0x21
 80038c4:	d14d      	bne.n	8003962 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2b08      	cmp	r3, #8
 80038ca:	d01d      	beq.n	8003908 <I2C_MasterTransmit_TXE+0x6e>
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	2b20      	cmp	r3, #32
 80038d0:	d01a      	beq.n	8003908 <I2C_MasterTransmit_TXE+0x6e>
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038d8:	d016      	beq.n	8003908 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038e8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2211      	movs	r2, #17
 80038ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7ff ff62 	bl	80037ca <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003906:	e060      	b.n	80039ca <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003916:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003926:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2220      	movs	r2, #32
 8003932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b40      	cmp	r3, #64	; 0x40
 8003940:	d107      	bne.n	8003952 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7ff ff7d 	bl	800384a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003950:	e03b      	b.n	80039ca <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7ff ff35 	bl	80037ca <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003960:	e033      	b.n	80039ca <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003962:	7bfb      	ldrb	r3, [r7, #15]
 8003964:	2b21      	cmp	r3, #33	; 0x21
 8003966:	d005      	beq.n	8003974 <I2C_MasterTransmit_TXE+0xda>
 8003968:	7bbb      	ldrb	r3, [r7, #14]
 800396a:	2b40      	cmp	r3, #64	; 0x40
 800396c:	d12d      	bne.n	80039ca <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800396e:	7bfb      	ldrb	r3, [r7, #15]
 8003970:	2b22      	cmp	r3, #34	; 0x22
 8003972:	d12a      	bne.n	80039ca <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003978:	b29b      	uxth	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d108      	bne.n	8003990 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800398c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800398e:	e01c      	b.n	80039ca <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b40      	cmp	r3, #64	; 0x40
 800399a:	d103      	bne.n	80039a4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f88e 	bl	8003abe <I2C_MemoryTransmit_TXE_BTF>
}
 80039a2:	e012      	b.n	80039ca <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	781a      	ldrb	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	1c5a      	adds	r2, r3, #1
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039be:	b29b      	uxth	r3, r3
 80039c0:	3b01      	subs	r3, #1
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80039c8:	e7ff      	b.n	80039ca <I2C_MasterTransmit_TXE+0x130>
 80039ca:	bf00      	nop
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b084      	sub	sp, #16
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039de:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b21      	cmp	r3, #33	; 0x21
 80039ea:	d164      	bne.n	8003ab6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d012      	beq.n	8003a1c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fa:	781a      	ldrb	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a06:	1c5a      	adds	r2, r3, #1
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	3b01      	subs	r3, #1
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003a1a:	e04c      	b.n	8003ab6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2b08      	cmp	r3, #8
 8003a20:	d01d      	beq.n	8003a5e <I2C_MasterTransmit_BTF+0x8c>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2b20      	cmp	r3, #32
 8003a26:	d01a      	beq.n	8003a5e <I2C_MasterTransmit_BTF+0x8c>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a2e:	d016      	beq.n	8003a5e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a3e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2211      	movs	r2, #17
 8003a44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2220      	movs	r2, #32
 8003a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7ff feb7 	bl	80037ca <HAL_I2C_MasterTxCpltCallback>
}
 8003a5c:	e02b      	b.n	8003ab6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a6c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a7c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2220      	movs	r2, #32
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b40      	cmp	r3, #64	; 0x40
 8003a96:	d107      	bne.n	8003aa8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f7ff fed2 	bl	800384a <HAL_I2C_MemTxCpltCallback>
}
 8003aa6:	e006      	b.n	8003ab6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f7ff fe8a 	bl	80037ca <HAL_I2C_MasterTxCpltCallback>
}
 8003ab6:	bf00      	nop
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b084      	sub	sp, #16
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003acc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d11d      	bne.n	8003b12 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d10b      	bne.n	8003af6 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aee:	1c9a      	adds	r2, r3, #2
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003af4:	e073      	b.n	8003bde <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	121b      	asrs	r3, r3, #8
 8003afe:	b2da      	uxtb	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b0a:	1c5a      	adds	r2, r3, #1
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003b10:	e065      	b.n	8003bde <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d10b      	bne.n	8003b32 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b1e:	b2da      	uxtb	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b2a:	1c5a      	adds	r2, r3, #1
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003b30:	e055      	b.n	8003bde <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d151      	bne.n	8003bde <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003b3a:	7bfb      	ldrb	r3, [r7, #15]
 8003b3c:	2b22      	cmp	r3, #34	; 0x22
 8003b3e:	d10d      	bne.n	8003b5c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b4e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b54:	1c5a      	adds	r2, r3, #1
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003b5a:	e040      	b.n	8003bde <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d015      	beq.n	8003b92 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003b66:	7bfb      	ldrb	r3, [r7, #15]
 8003b68:	2b21      	cmp	r3, #33	; 0x21
 8003b6a:	d112      	bne.n	8003b92 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	781a      	ldrb	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	1c5a      	adds	r2, r3, #1
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b90:	e025      	b.n	8003bde <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d120      	bne.n	8003bde <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003b9c:	7bfb      	ldrb	r3, [r7, #15]
 8003b9e:	2b21      	cmp	r3, #33	; 0x21
 8003ba0:	d11d      	bne.n	8003bde <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bb0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bc0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f7ff fe36 	bl	800384a <HAL_I2C_MemTxCpltCallback>
}
 8003bde:	bf00      	nop
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b084      	sub	sp, #16
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b22      	cmp	r3, #34	; 0x22
 8003bf8:	f040 80ac 	bne.w	8003d54 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2b03      	cmp	r3, #3
 8003c08:	d921      	bls.n	8003c4e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	691a      	ldr	r2, [r3, #16]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	b2d2      	uxtb	r2, r2
 8003c16:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1c:	1c5a      	adds	r2, r3, #1
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	2b03      	cmp	r3, #3
 8003c38:	f040 808c 	bne.w	8003d54 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c4a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003c4c:	e082      	b.n	8003d54 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d075      	beq.n	8003d42 <I2C_MasterReceive_RXNE+0x15c>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d002      	beq.n	8003c62 <I2C_MasterReceive_RXNE+0x7c>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d16f      	bne.n	8003d42 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f001 fa5e 	bl	8005124 <I2C_WaitOnSTOPRequestThroughIT>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d142      	bne.n	8003cf4 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c7c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c8c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	691a      	ldr	r2, [r3, #16]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c98:	b2d2      	uxtb	r2, r2
 8003c9a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	1c5a      	adds	r2, r3, #1
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	3b01      	subs	r3, #1
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b40      	cmp	r3, #64	; 0x40
 8003cc6:	d10a      	bne.n	8003cde <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7ff fdc1 	bl	800385e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003cdc:	e03a      	b.n	8003d54 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2212      	movs	r2, #18
 8003cea:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f7ff fd76 	bl	80037de <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003cf2:	e02f      	b.n	8003d54 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d02:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	691a      	ldr	r2, [r3, #16]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	1c5a      	adds	r2, r3, #1
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	3b01      	subs	r3, #1
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7ff fd99 	bl	8003872 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003d40:	e008      	b.n	8003d54 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	685a      	ldr	r2, [r3, #4]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d50:	605a      	str	r2, [r3, #4]
}
 8003d52:	e7ff      	b.n	8003d54 <I2C_MasterReceive_RXNE+0x16e>
 8003d54:	bf00      	nop
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d68:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	2b04      	cmp	r3, #4
 8003d72:	d11b      	bne.n	8003dac <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d82:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	691a      	ldr	r2, [r3, #16]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	3b01      	subs	r3, #1
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003daa:	e0bd      	b.n	8003f28 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	2b03      	cmp	r3, #3
 8003db4:	d129      	bne.n	8003e0a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dc4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2b04      	cmp	r3, #4
 8003dca:	d00a      	beq.n	8003de2 <I2C_MasterReceive_BTF+0x86>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d007      	beq.n	8003de2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003de0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	691a      	ldr	r2, [r3, #16]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	1c5a      	adds	r2, r3, #1
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	3b01      	subs	r3, #1
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003e08:	e08e      	b.n	8003f28 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d176      	bne.n	8003f02 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d002      	beq.n	8003e20 <I2C_MasterReceive_BTF+0xc4>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2b10      	cmp	r3, #16
 8003e1e:	d108      	bne.n	8003e32 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e2e:	601a      	str	r2, [r3, #0]
 8003e30:	e019      	b.n	8003e66 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2b04      	cmp	r3, #4
 8003e36:	d002      	beq.n	8003e3e <I2C_MasterReceive_BTF+0xe2>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d108      	bne.n	8003e50 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	e00a      	b.n	8003e66 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2b10      	cmp	r3, #16
 8003e54:	d007      	beq.n	8003e66 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e64:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	691a      	ldr	r2, [r3, #16]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	b2d2      	uxtb	r2, r2
 8003e72:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	1c5a      	adds	r2, r3, #1
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	691a      	ldr	r2, [r3, #16]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	b2d2      	uxtb	r2, r2
 8003e98:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	1c5a      	adds	r2, r3, #1
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003ec0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b40      	cmp	r3, #64	; 0x40
 8003ed4:	d10a      	bne.n	8003eec <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f7ff fcba 	bl	800385e <HAL_I2C_MemRxCpltCallback>
}
 8003eea:	e01d      	b.n	8003f28 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2212      	movs	r2, #18
 8003ef8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7ff fc6f 	bl	80037de <HAL_I2C_MasterRxCpltCallback>
}
 8003f00:	e012      	b.n	8003f28 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	691a      	ldr	r2, [r3, #16]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	b2d2      	uxtb	r2, r2
 8003f0e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	1c5a      	adds	r2, r3, #1
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003f28:	bf00      	nop
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2b40      	cmp	r3, #64	; 0x40
 8003f42:	d117      	bne.n	8003f74 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d109      	bne.n	8003f60 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	461a      	mov	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f5c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003f5e:	e067      	b.n	8004030 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	f043 0301 	orr.w	r3, r3, #1
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	611a      	str	r2, [r3, #16]
}
 8003f72:	e05d      	b.n	8004030 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f7c:	d133      	bne.n	8003fe6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b21      	cmp	r3, #33	; 0x21
 8003f88:	d109      	bne.n	8003f9e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	461a      	mov	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f9a:	611a      	str	r2, [r3, #16]
 8003f9c:	e008      	b.n	8003fb0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	f043 0301 	orr.w	r3, r3, #1
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d004      	beq.n	8003fc2 <I2C_Master_SB+0x92>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d108      	bne.n	8003fd4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d032      	beq.n	8004030 <I2C_Master_SB+0x100>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d02d      	beq.n	8004030 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fe2:	605a      	str	r2, [r3, #4]
}
 8003fe4:	e024      	b.n	8004030 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10e      	bne.n	800400c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	11db      	asrs	r3, r3, #7
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	f003 0306 	and.w	r3, r3, #6
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	f063 030f 	orn	r3, r3, #15
 8004002:	b2da      	uxtb	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	611a      	str	r2, [r3, #16]
}
 800400a:	e011      	b.n	8004030 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004010:	2b01      	cmp	r3, #1
 8004012:	d10d      	bne.n	8004030 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004018:	b29b      	uxth	r3, r3
 800401a:	11db      	asrs	r3, r3, #7
 800401c:	b2db      	uxtb	r3, r3
 800401e:	f003 0306 	and.w	r3, r3, #6
 8004022:	b2db      	uxtb	r3, r3
 8004024:	f063 030e 	orn	r3, r3, #14
 8004028:	b2da      	uxtb	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	611a      	str	r2, [r3, #16]
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004048:	b2da      	uxtb	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004054:	2b00      	cmp	r3, #0
 8004056:	d004      	beq.n	8004062 <I2C_Master_ADD10+0x26>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800405c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800405e:	2b00      	cmp	r3, #0
 8004060:	d108      	bne.n	8004074 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00c      	beq.n	8004084 <I2C_Master_ADD10+0x48>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004070:	2b00      	cmp	r3, #0
 8004072:	d007      	beq.n	8004084 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004082:	605a      	str	r2, [r3, #4]
  }
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004090:	b480      	push	{r7}
 8004092:	b091      	sub	sp, #68	; 0x44
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800409e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ac:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b22      	cmp	r3, #34	; 0x22
 80040b8:	f040 8169 	bne.w	800438e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10f      	bne.n	80040e4 <I2C_Master_ADDR+0x54>
 80040c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80040c8:	2b40      	cmp	r3, #64	; 0x40
 80040ca:	d10b      	bne.n	80040e4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040cc:	2300      	movs	r3, #0
 80040ce:	633b      	str	r3, [r7, #48]	; 0x30
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	633b      	str	r3, [r7, #48]	; 0x30
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	633b      	str	r3, [r7, #48]	; 0x30
 80040e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e2:	e160      	b.n	80043a6 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d11d      	bne.n	8004128 <I2C_Master_ADDR+0x98>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80040f4:	d118      	bne.n	8004128 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040f6:	2300      	movs	r3, #0
 80040f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	62fb      	str	r3, [r7, #44]	; 0x2c
 800410a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800411a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004120:	1c5a      	adds	r2, r3, #1
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	651a      	str	r2, [r3, #80]	; 0x50
 8004126:	e13e      	b.n	80043a6 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800412c:	b29b      	uxth	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d113      	bne.n	800415a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004132:	2300      	movs	r3, #0
 8004134:	62bb      	str	r3, [r7, #40]	; 0x28
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	62bb      	str	r3, [r7, #40]	; 0x28
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	62bb      	str	r3, [r7, #40]	; 0x28
 8004146:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	e115      	b.n	8004386 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415e:	b29b      	uxth	r3, r3
 8004160:	2b01      	cmp	r3, #1
 8004162:	f040 808a 	bne.w	800427a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004168:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800416c:	d137      	bne.n	80041de <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800417c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004188:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800418c:	d113      	bne.n	80041b6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800419c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800419e:	2300      	movs	r3, #0
 80041a0:	627b      	str	r3, [r7, #36]	; 0x24
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	627b      	str	r3, [r7, #36]	; 0x24
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	627b      	str	r3, [r7, #36]	; 0x24
 80041b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b4:	e0e7      	b.n	8004386 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041b6:	2300      	movs	r3, #0
 80041b8:	623b      	str	r3, [r7, #32]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	623b      	str	r3, [r7, #32]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	623b      	str	r3, [r7, #32]
 80041ca:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	e0d3      	b.n	8004386 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80041de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e0:	2b08      	cmp	r3, #8
 80041e2:	d02e      	beq.n	8004242 <I2C_Master_ADDR+0x1b2>
 80041e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e6:	2b20      	cmp	r3, #32
 80041e8:	d02b      	beq.n	8004242 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80041ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ec:	2b12      	cmp	r3, #18
 80041ee:	d102      	bne.n	80041f6 <I2C_Master_ADDR+0x166>
 80041f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d125      	bne.n	8004242 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80041f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f8:	2b04      	cmp	r3, #4
 80041fa:	d00e      	beq.n	800421a <I2C_Master_ADDR+0x18a>
 80041fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d00b      	beq.n	800421a <I2C_Master_ADDR+0x18a>
 8004202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004204:	2b10      	cmp	r3, #16
 8004206:	d008      	beq.n	800421a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	e007      	b.n	800422a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004228:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800422a:	2300      	movs	r3, #0
 800422c:	61fb      	str	r3, [r7, #28]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	61fb      	str	r3, [r7, #28]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	61fb      	str	r3, [r7, #28]
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	e0a1      	b.n	8004386 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004250:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004252:	2300      	movs	r3, #0
 8004254:	61bb      	str	r3, [r7, #24]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	61bb      	str	r3, [r7, #24]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	61bb      	str	r3, [r7, #24]
 8004266:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	e085      	b.n	8004386 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800427e:	b29b      	uxth	r3, r3
 8004280:	2b02      	cmp	r3, #2
 8004282:	d14d      	bne.n	8004320 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004286:	2b04      	cmp	r3, #4
 8004288:	d016      	beq.n	80042b8 <I2C_Master_ADDR+0x228>
 800428a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800428c:	2b02      	cmp	r3, #2
 800428e:	d013      	beq.n	80042b8 <I2C_Master_ADDR+0x228>
 8004290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004292:	2b10      	cmp	r3, #16
 8004294:	d010      	beq.n	80042b8 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042a4:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042b4:	601a      	str	r2, [r3, #0]
 80042b6:	e007      	b.n	80042c8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042c6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042d6:	d117      	bne.n	8004308 <I2C_Master_ADDR+0x278>
 80042d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042da:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042de:	d00b      	beq.n	80042f8 <I2C_Master_ADDR+0x268>
 80042e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d008      	beq.n	80042f8 <I2C_Master_ADDR+0x268>
 80042e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e8:	2b08      	cmp	r3, #8
 80042ea:	d005      	beq.n	80042f8 <I2C_Master_ADDR+0x268>
 80042ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ee:	2b10      	cmp	r3, #16
 80042f0:	d002      	beq.n	80042f8 <I2C_Master_ADDR+0x268>
 80042f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f4:	2b20      	cmp	r3, #32
 80042f6:	d107      	bne.n	8004308 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	685a      	ldr	r2, [r3, #4]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004306:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004308:	2300      	movs	r3, #0
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	617b      	str	r3, [r7, #20]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	617b      	str	r3, [r7, #20]
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	e032      	b.n	8004386 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800432e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800433a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800433e:	d117      	bne.n	8004370 <I2C_Master_ADDR+0x2e0>
 8004340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004342:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004346:	d00b      	beq.n	8004360 <I2C_Master_ADDR+0x2d0>
 8004348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434a:	2b01      	cmp	r3, #1
 800434c:	d008      	beq.n	8004360 <I2C_Master_ADDR+0x2d0>
 800434e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004350:	2b08      	cmp	r3, #8
 8004352:	d005      	beq.n	8004360 <I2C_Master_ADDR+0x2d0>
 8004354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004356:	2b10      	cmp	r3, #16
 8004358:	d002      	beq.n	8004360 <I2C_Master_ADDR+0x2d0>
 800435a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800435c:	2b20      	cmp	r3, #32
 800435e:	d107      	bne.n	8004370 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800436e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004370:	2300      	movs	r3, #0
 8004372:	613b      	str	r3, [r7, #16]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	613b      	str	r3, [r7, #16]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	613b      	str	r3, [r7, #16]
 8004384:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800438c:	e00b      	b.n	80043a6 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800438e:	2300      	movs	r3, #0
 8004390:	60fb      	str	r3, [r7, #12]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	60fb      	str	r3, [r7, #12]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	60fb      	str	r3, [r7, #12]
 80043a2:	68fb      	ldr	r3, [r7, #12]
}
 80043a4:	e7ff      	b.n	80043a6 <I2C_Master_ADDR+0x316>
 80043a6:	bf00      	nop
 80043a8:	3744      	adds	r7, #68	; 0x44
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b084      	sub	sp, #16
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d02b      	beq.n	8004424 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	781a      	ldrb	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043dc:	1c5a      	adds	r2, r3, #1
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	3b01      	subs	r3, #1
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d114      	bne.n	8004424 <I2C_SlaveTransmit_TXE+0x72>
 80043fa:	7bfb      	ldrb	r3, [r7, #15]
 80043fc:	2b29      	cmp	r3, #41	; 0x29
 80043fe:	d111      	bne.n	8004424 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800440e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2221      	movs	r2, #33	; 0x21
 8004414:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2228      	movs	r2, #40	; 0x28
 800441a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f7ff f9e7 	bl	80037f2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004424:	bf00      	nop
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004438:	b29b      	uxth	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d011      	beq.n	8004462 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	781a      	ldrb	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444e:	1c5a      	adds	r2, r3, #1
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004458:	b29b      	uxth	r3, r3
 800445a:	3b01      	subs	r3, #1
 800445c:	b29a      	uxth	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b084      	sub	sp, #16
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800447c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004482:	b29b      	uxth	r3, r3
 8004484:	2b00      	cmp	r3, #0
 8004486:	d02c      	beq.n	80044e2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	691a      	ldr	r2, [r3, #16]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	b2d2      	uxtb	r2, r2
 8004494:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449a:	1c5a      	adds	r2, r3, #1
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	3b01      	subs	r3, #1
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d114      	bne.n	80044e2 <I2C_SlaveReceive_RXNE+0x74>
 80044b8:	7bfb      	ldrb	r3, [r7, #15]
 80044ba:	2b2a      	cmp	r3, #42	; 0x2a
 80044bc:	d111      	bne.n	80044e2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044cc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2222      	movs	r2, #34	; 0x22
 80044d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2228      	movs	r2, #40	; 0x28
 80044d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f7ff f992 	bl	8003806 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80044e2:	bf00      	nop
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b083      	sub	sp, #12
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d012      	beq.n	8004522 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	691a      	ldr	r2, [r3, #16]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	b2d2      	uxtb	r2, r2
 8004508:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450e:	1c5a      	adds	r2, r3, #1
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004518:	b29b      	uxth	r3, r3
 800451a:	3b01      	subs	r3, #1
 800451c:	b29a      	uxth	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004522:	bf00      	nop
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b084      	sub	sp, #16
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
 8004536:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004538:	2300      	movs	r3, #0
 800453a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004542:	b2db      	uxtb	r3, r3
 8004544:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004548:	2b28      	cmp	r3, #40	; 0x28
 800454a:	d125      	bne.n	8004598 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800455a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	f003 0304 	and.w	r3, r3, #4
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004566:	2301      	movs	r3, #1
 8004568:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004570:	2b00      	cmp	r3, #0
 8004572:	d103      	bne.n	800457c <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	81bb      	strh	r3, [r7, #12]
 800457a:	e002      	b.n	8004582 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800458a:	89ba      	ldrh	r2, [r7, #12]
 800458c:	7bfb      	ldrb	r3, [r7, #15]
 800458e:	4619      	mov	r1, r3
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f7ff f942 	bl	800381a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004596:	e00e      	b.n	80045b6 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004598:	2300      	movs	r3, #0
 800459a:	60bb      	str	r3, [r7, #8]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	60bb      	str	r3, [r7, #8]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	60bb      	str	r3, [r7, #8]
 80045ac:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80045b6:	bf00      	nop
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
	...

080045c0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ce:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045de:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80045e0:	2300      	movs	r3, #0
 80045e2:	60bb      	str	r3, [r7, #8]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	60bb      	str	r3, [r7, #8]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f042 0201 	orr.w	r2, r2, #1
 80045fa:	601a      	str	r2, [r3, #0]
 80045fc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800460c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004618:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800461c:	d172      	bne.n	8004704 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800461e:	7bfb      	ldrb	r3, [r7, #15]
 8004620:	2b22      	cmp	r3, #34	; 0x22
 8004622:	d002      	beq.n	800462a <I2C_Slave_STOPF+0x6a>
 8004624:	7bfb      	ldrb	r3, [r7, #15]
 8004626:	2b2a      	cmp	r3, #42	; 0x2a
 8004628:	d135      	bne.n	8004696 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	b29a      	uxth	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463c:	b29b      	uxth	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d005      	beq.n	800464e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	f043 0204 	orr.w	r2, r3, #4
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800465c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004662:	4618      	mov	r0, r3
 8004664:	f7fe f888 	bl	8002778 <HAL_DMA_GetState>
 8004668:	4603      	mov	r3, r0
 800466a:	2b01      	cmp	r3, #1
 800466c:	d049      	beq.n	8004702 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004672:	4a69      	ldr	r2, [pc, #420]	; (8004818 <I2C_Slave_STOPF+0x258>)
 8004674:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467a:	4618      	mov	r0, r3
 800467c:	f7fd fed0 	bl	8002420 <HAL_DMA_Abort_IT>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d03d      	beq.n	8004702 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004690:	4610      	mov	r0, r2
 8004692:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004694:	e035      	b.n	8004702 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	b29a      	uxth	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d005      	beq.n	80046ba <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	f043 0204 	orr.w	r2, r3, #4
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046c8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fe f852 	bl	8002778 <HAL_DMA_GetState>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d014      	beq.n	8004704 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046de:	4a4e      	ldr	r2, [pc, #312]	; (8004818 <I2C_Slave_STOPF+0x258>)
 80046e0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fd fe9a 	bl	8002420 <HAL_DMA_Abort_IT>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d008      	beq.n	8004704 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046fc:	4610      	mov	r0, r2
 80046fe:	4798      	blx	r3
 8004700:	e000      	b.n	8004704 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004702:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004708:	b29b      	uxth	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d03e      	beq.n	800478c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b04      	cmp	r3, #4
 800471a:	d112      	bne.n	8004742 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	691a      	ldr	r2, [r3, #16]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004726:	b2d2      	uxtb	r2, r2
 8004728:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	1c5a      	adds	r2, r3, #1
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004738:	b29b      	uxth	r3, r3
 800473a:	3b01      	subs	r3, #1
 800473c:	b29a      	uxth	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800474c:	2b40      	cmp	r3, #64	; 0x40
 800474e:	d112      	bne.n	8004776 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	691a      	ldr	r2, [r3, #16]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475a:	b2d2      	uxtb	r2, r2
 800475c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004762:	1c5a      	adds	r2, r3, #1
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800476c:	b29b      	uxth	r3, r3
 800476e:	3b01      	subs	r3, #1
 8004770:	b29a      	uxth	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800477a:	b29b      	uxth	r3, r3
 800477c:	2b00      	cmp	r3, #0
 800477e:	d005      	beq.n	800478c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004784:	f043 0204 	orr.w	r2, r3, #4
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004790:	2b00      	cmp	r3, #0
 8004792:	d003      	beq.n	800479c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 f843 	bl	8004820 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800479a:	e039      	b.n	8004810 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800479c:	7bfb      	ldrb	r3, [r7, #15]
 800479e:	2b2a      	cmp	r3, #42	; 0x2a
 80047a0:	d109      	bne.n	80047b6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2228      	movs	r2, #40	; 0x28
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7ff f828 	bl	8003806 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b28      	cmp	r3, #40	; 0x28
 80047c0:	d111      	bne.n	80047e6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a15      	ldr	r2, [pc, #84]	; (800481c <I2C_Slave_STOPF+0x25c>)
 80047c6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2220      	movs	r2, #32
 80047d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f7ff f829 	bl	8003836 <HAL_I2C_ListenCpltCallback>
}
 80047e4:	e014      	b.n	8004810 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ea:	2b22      	cmp	r3, #34	; 0x22
 80047ec:	d002      	beq.n	80047f4 <I2C_Slave_STOPF+0x234>
 80047ee:	7bfb      	ldrb	r3, [r7, #15]
 80047f0:	2b22      	cmp	r3, #34	; 0x22
 80047f2:	d10d      	bne.n	8004810 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2220      	movs	r2, #32
 80047fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7fe fffb 	bl	8003806 <HAL_I2C_SlaveRxCpltCallback>
}
 8004810:	bf00      	nop
 8004812:	3710      	adds	r7, #16
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	08004d25 	.word	0x08004d25
 800481c:	ffff0000 	.word	0xffff0000

08004820 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800482e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004836:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004838:	7bbb      	ldrb	r3, [r7, #14]
 800483a:	2b10      	cmp	r3, #16
 800483c:	d002      	beq.n	8004844 <I2C_ITError+0x24>
 800483e:	7bbb      	ldrb	r3, [r7, #14]
 8004840:	2b40      	cmp	r3, #64	; 0x40
 8004842:	d10a      	bne.n	800485a <I2C_ITError+0x3a>
 8004844:	7bfb      	ldrb	r3, [r7, #15]
 8004846:	2b22      	cmp	r3, #34	; 0x22
 8004848:	d107      	bne.n	800485a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004858:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800485a:	7bfb      	ldrb	r3, [r7, #15]
 800485c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004860:	2b28      	cmp	r3, #40	; 0x28
 8004862:	d107      	bne.n	8004874 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2228      	movs	r2, #40	; 0x28
 800486e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004872:	e015      	b.n	80048a0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800487e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004882:	d00a      	beq.n	800489a <I2C_ITError+0x7a>
 8004884:	7bfb      	ldrb	r3, [r7, #15]
 8004886:	2b60      	cmp	r3, #96	; 0x60
 8004888:	d007      	beq.n	800489a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2220      	movs	r2, #32
 800488e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048ae:	d162      	bne.n	8004976 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	685a      	ldr	r2, [r3, #4]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048be:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d020      	beq.n	8004910 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048d2:	4a6a      	ldr	r2, [pc, #424]	; (8004a7c <I2C_ITError+0x25c>)
 80048d4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048da:	4618      	mov	r0, r3
 80048dc:	f7fd fda0 	bl	8002420 <HAL_DMA_Abort_IT>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f000 8089 	beq.w	80049fa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 0201 	bic.w	r2, r2, #1
 80048f6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2220      	movs	r2, #32
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800490a:	4610      	mov	r0, r2
 800490c:	4798      	blx	r3
 800490e:	e074      	b.n	80049fa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004914:	4a59      	ldr	r2, [pc, #356]	; (8004a7c <I2C_ITError+0x25c>)
 8004916:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491c:	4618      	mov	r0, r3
 800491e:	f7fd fd7f 	bl	8002420 <HAL_DMA_Abort_IT>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d068      	beq.n	80049fa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004932:	2b40      	cmp	r3, #64	; 0x40
 8004934:	d10b      	bne.n	800494e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	691a      	ldr	r2, [r3, #16]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004940:	b2d2      	uxtb	r2, r2
 8004942:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004948:	1c5a      	adds	r2, r3, #1
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f022 0201 	bic.w	r2, r2, #1
 800495c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2220      	movs	r2, #32
 8004962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004970:	4610      	mov	r0, r2
 8004972:	4798      	blx	r3
 8004974:	e041      	b.n	80049fa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b60      	cmp	r3, #96	; 0x60
 8004980:	d125      	bne.n	80049ce <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2220      	movs	r2, #32
 8004986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499a:	2b40      	cmp	r3, #64	; 0x40
 800499c:	d10b      	bne.n	80049b6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	691a      	ldr	r2, [r3, #16]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a8:	b2d2      	uxtb	r2, r2
 80049aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b0:	1c5a      	adds	r2, r3, #1
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 0201 	bic.w	r2, r2, #1
 80049c4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7fe ff5d 	bl	8003886 <HAL_I2C_AbortCpltCallback>
 80049cc:	e015      	b.n	80049fa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d8:	2b40      	cmp	r3, #64	; 0x40
 80049da:	d10b      	bne.n	80049f4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	691a      	ldr	r2, [r3, #16]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e6:	b2d2      	uxtb	r2, r2
 80049e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	1c5a      	adds	r2, r3, #1
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f7fe ff3c 	bl	8003872 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10e      	bne.n	8004a28 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d109      	bne.n	8004a28 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d104      	bne.n	8004a28 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d007      	beq.n	8004a38 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a36:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a3e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a44:	f003 0304 	and.w	r3, r3, #4
 8004a48:	2b04      	cmp	r3, #4
 8004a4a:	d113      	bne.n	8004a74 <I2C_ITError+0x254>
 8004a4c:	7bfb      	ldrb	r3, [r7, #15]
 8004a4e:	2b28      	cmp	r3, #40	; 0x28
 8004a50:	d110      	bne.n	8004a74 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a0a      	ldr	r2, [pc, #40]	; (8004a80 <I2C_ITError+0x260>)
 8004a56:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2220      	movs	r2, #32
 8004a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7fe fee1 	bl	8003836 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a74:	bf00      	nop
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	08004d25 	.word	0x08004d25
 8004a80:	ffff0000 	.word	0xffff0000

08004a84 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b088      	sub	sp, #32
 8004a88:	af02      	add	r7, sp, #8
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	607a      	str	r2, [r7, #4]
 8004a8e:	603b      	str	r3, [r7, #0]
 8004a90:	460b      	mov	r3, r1
 8004a92:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a98:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	2b08      	cmp	r3, #8
 8004a9e:	d006      	beq.n	8004aae <I2C_MasterRequestWrite+0x2a>
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d003      	beq.n	8004aae <I2C_MasterRequestWrite+0x2a>
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004aac:	d108      	bne.n	8004ac0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004abc:	601a      	str	r2, [r3, #0]
 8004abe:	e00b      	b.n	8004ad8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac4:	2b12      	cmp	r3, #18
 8004ac6:	d107      	bne.n	8004ad8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ad6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f000 f9c5 	bl	8004e74 <I2C_WaitOnFlagUntilTimeout>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00d      	beq.n	8004b0c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004afa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004afe:	d103      	bne.n	8004b08 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e035      	b.n	8004b78 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b14:	d108      	bne.n	8004b28 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b16:	897b      	ldrh	r3, [r7, #10]
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b24:	611a      	str	r2, [r3, #16]
 8004b26:	e01b      	b.n	8004b60 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004b28:	897b      	ldrh	r3, [r7, #10]
 8004b2a:	11db      	asrs	r3, r3, #7
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	f003 0306 	and.w	r3, r3, #6
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	f063 030f 	orn	r3, r3, #15
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	490e      	ldr	r1, [pc, #56]	; (8004b80 <I2C_MasterRequestWrite+0xfc>)
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f000 f9eb 	bl	8004f22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e010      	b.n	8004b78 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b56:	897b      	ldrh	r3, [r7, #10]
 8004b58:	b2da      	uxtb	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	4907      	ldr	r1, [pc, #28]	; (8004b84 <I2C_MasterRequestWrite+0x100>)
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 f9db 	bl	8004f22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e000      	b.n	8004b78 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3718      	adds	r7, #24
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	00010008 	.word	0x00010008
 8004b84:	00010002 	.word	0x00010002

08004b88 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b088      	sub	sp, #32
 8004b8c:	af02      	add	r7, sp, #8
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	607a      	str	r2, [r7, #4]
 8004b92:	603b      	str	r3, [r7, #0]
 8004b94:	460b      	mov	r3, r1
 8004b96:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bac:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d006      	beq.n	8004bc2 <I2C_MasterRequestRead+0x3a>
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d003      	beq.n	8004bc2 <I2C_MasterRequestRead+0x3a>
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004bc0:	d108      	bne.n	8004bd4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bd0:	601a      	str	r2, [r3, #0]
 8004bd2:	e00b      	b.n	8004bec <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd8:	2b11      	cmp	r3, #17
 8004bda:	d107      	bne.n	8004bec <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	9300      	str	r3, [sp, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f000 f93b 	bl	8004e74 <I2C_WaitOnFlagUntilTimeout>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00d      	beq.n	8004c20 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c12:	d103      	bne.n	8004c1c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e079      	b.n	8004d14 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c28:	d108      	bne.n	8004c3c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c2a:	897b      	ldrh	r3, [r7, #10]
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	f043 0301 	orr.w	r3, r3, #1
 8004c32:	b2da      	uxtb	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	611a      	str	r2, [r3, #16]
 8004c3a:	e05f      	b.n	8004cfc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004c3c:	897b      	ldrh	r3, [r7, #10]
 8004c3e:	11db      	asrs	r3, r3, #7
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	f003 0306 	and.w	r3, r3, #6
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	f063 030f 	orn	r3, r3, #15
 8004c4c:	b2da      	uxtb	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	4930      	ldr	r1, [pc, #192]	; (8004d1c <I2C_MasterRequestRead+0x194>)
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	f000 f961 	bl	8004f22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e054      	b.n	8004d14 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004c6a:	897b      	ldrh	r3, [r7, #10]
 8004c6c:	b2da      	uxtb	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	4929      	ldr	r1, [pc, #164]	; (8004d20 <I2C_MasterRequestRead+0x198>)
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f000 f951 	bl	8004f22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e044      	b.n	8004d14 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	613b      	str	r3, [r7, #16]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	613b      	str	r3, [r7, #16]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	613b      	str	r3, [r7, #16]
 8004c9e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cae:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f000 f8d9 	bl	8004e74 <I2C_WaitOnFlagUntilTimeout>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00d      	beq.n	8004ce4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cd6:	d103      	bne.n	8004ce0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cde:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e017      	b.n	8004d14 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004ce4:	897b      	ldrh	r3, [r7, #10]
 8004ce6:	11db      	asrs	r3, r3, #7
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	f003 0306 	and.w	r3, r3, #6
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	f063 030e 	orn	r3, r3, #14
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	4907      	ldr	r1, [pc, #28]	; (8004d20 <I2C_MasterRequestRead+0x198>)
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f000 f90d 	bl	8004f22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e000      	b.n	8004d14 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3718      	adds	r7, #24
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	00010008 	.word	0x00010008
 8004d20:	00010002 	.word	0x00010002

08004d24 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b086      	sub	sp, #24
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d34:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d3c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d3e:	4b4b      	ldr	r3, [pc, #300]	; (8004e6c <I2C_DMAAbort+0x148>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	08db      	lsrs	r3, r3, #3
 8004d44:	4a4a      	ldr	r2, [pc, #296]	; (8004e70 <I2C_DMAAbort+0x14c>)
 8004d46:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4a:	0a1a      	lsrs	r2, r3, #8
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	4413      	add	r3, r2
 8004d52:	00da      	lsls	r2, r3, #3
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d106      	bne.n	8004d6c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	f043 0220 	orr.w	r2, r3, #32
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004d6a:	e00a      	b.n	8004d82 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d80:	d0ea      	beq.n	8004d58 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d8e:	2200      	movs	r2, #0
 8004d90:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d003      	beq.n	8004da2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9e:	2200      	movs	r2, #0
 8004da0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004db0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	2200      	movs	r2, #0
 8004db6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d003      	beq.n	8004dc8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d003      	beq.n	8004dd8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 0201 	bic.w	r2, r2, #1
 8004de6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	2b60      	cmp	r3, #96	; 0x60
 8004df2:	d10e      	bne.n	8004e12 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	2220      	movs	r2, #32
 8004df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	2200      	movs	r2, #0
 8004e08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004e0a:	6978      	ldr	r0, [r7, #20]
 8004e0c:	f7fe fd3b 	bl	8003886 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e10:	e027      	b.n	8004e62 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e12:	7cfb      	ldrb	r3, [r7, #19]
 8004e14:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004e18:	2b28      	cmp	r3, #40	; 0x28
 8004e1a:	d117      	bne.n	8004e4c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f042 0201 	orr.w	r2, r2, #1
 8004e2a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e3a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	2228      	movs	r2, #40	; 0x28
 8004e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004e4a:	e007      	b.n	8004e5c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004e5c:	6978      	ldr	r0, [r7, #20]
 8004e5e:	f7fe fd08 	bl	8003872 <HAL_I2C_ErrorCallback>
}
 8004e62:	bf00      	nop
 8004e64:	3718      	adds	r7, #24
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	2000000c 	.word	0x2000000c
 8004e70:	14f8b589 	.word	0x14f8b589

08004e74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	603b      	str	r3, [r7, #0]
 8004e80:	4613      	mov	r3, r2
 8004e82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e84:	e025      	b.n	8004ed2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e8c:	d021      	beq.n	8004ed2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e8e:	f7fd f8d7 	bl	8002040 <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	683a      	ldr	r2, [r7, #0]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d302      	bcc.n	8004ea4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d116      	bne.n	8004ed2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2220      	movs	r2, #32
 8004eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebe:	f043 0220 	orr.w	r2, r3, #32
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e023      	b.n	8004f1a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	0c1b      	lsrs	r3, r3, #16
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d10d      	bne.n	8004ef8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	43da      	mvns	r2, r3
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	bf0c      	ite	eq
 8004eee:	2301      	moveq	r3, #1
 8004ef0:	2300      	movne	r3, #0
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	e00c      	b.n	8004f12 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	43da      	mvns	r2, r3
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	4013      	ands	r3, r2
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	bf0c      	ite	eq
 8004f0a:	2301      	moveq	r3, #1
 8004f0c:	2300      	movne	r3, #0
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	461a      	mov	r2, r3
 8004f12:	79fb      	ldrb	r3, [r7, #7]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d0b6      	beq.n	8004e86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b084      	sub	sp, #16
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	60f8      	str	r0, [r7, #12]
 8004f2a:	60b9      	str	r1, [r7, #8]
 8004f2c:	607a      	str	r2, [r7, #4]
 8004f2e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f30:	e051      	b.n	8004fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f40:	d123      	bne.n	8004f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f50:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f5a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2220      	movs	r2, #32
 8004f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f76:	f043 0204 	orr.w	r2, r3, #4
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e046      	b.n	8005018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f90:	d021      	beq.n	8004fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f92:	f7fd f855 	bl	8002040 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d302      	bcc.n	8004fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d116      	bne.n	8004fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc2:	f043 0220 	orr.w	r2, r3, #32
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e020      	b.n	8005018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	0c1b      	lsrs	r3, r3, #16
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d10c      	bne.n	8004ffa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	43da      	mvns	r2, r3
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	4013      	ands	r3, r2
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	bf14      	ite	ne
 8004ff2:	2301      	movne	r3, #1
 8004ff4:	2300      	moveq	r3, #0
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	e00b      	b.n	8005012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	43da      	mvns	r2, r3
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	4013      	ands	r3, r2
 8005006:	b29b      	uxth	r3, r3
 8005008:	2b00      	cmp	r3, #0
 800500a:	bf14      	ite	ne
 800500c:	2301      	movne	r3, #1
 800500e:	2300      	moveq	r3, #0
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d18d      	bne.n	8004f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800502c:	e02d      	b.n	800508a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f000 f900 	bl	8005234 <I2C_IsAcknowledgeFailed>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e02d      	b.n	800509a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005044:	d021      	beq.n	800508a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005046:	f7fc fffb 	bl	8002040 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	429a      	cmp	r2, r3
 8005054:	d302      	bcc.n	800505c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d116      	bne.n	800508a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2220      	movs	r2, #32
 8005066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	f043 0220 	orr.w	r2, r3, #32
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e007      	b.n	800509a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	695b      	ldr	r3, [r3, #20]
 8005090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005094:	2b80      	cmp	r3, #128	; 0x80
 8005096:	d1ca      	bne.n	800502e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3710      	adds	r7, #16
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b084      	sub	sp, #16
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	60f8      	str	r0, [r7, #12]
 80050aa:	60b9      	str	r1, [r7, #8]
 80050ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80050ae:	e02d      	b.n	800510c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f000 f8bf 	bl	8005234 <I2C_IsAcknowledgeFailed>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d001      	beq.n	80050c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e02d      	b.n	800511c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c6:	d021      	beq.n	800510c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050c8:	f7fc ffba 	bl	8002040 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d302      	bcc.n	80050de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d116      	bne.n	800510c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2220      	movs	r2, #32
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f8:	f043 0220 	orr.w	r2, r3, #32
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e007      	b.n	800511c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	f003 0304 	and.w	r3, r3, #4
 8005116:	2b04      	cmp	r3, #4
 8005118:	d1ca      	bne.n	80050b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3710      	adds	r7, #16
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800512c:	2300      	movs	r3, #0
 800512e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005130:	4b13      	ldr	r3, [pc, #76]	; (8005180 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	08db      	lsrs	r3, r3, #3
 8005136:	4a13      	ldr	r2, [pc, #76]	; (8005184 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005138:	fba2 2303 	umull	r2, r3, r2, r3
 800513c:	0a1a      	lsrs	r2, r3, #8
 800513e:	4613      	mov	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4413      	add	r3, r2
 8005144:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	3b01      	subs	r3, #1
 800514a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d107      	bne.n	8005162 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005156:	f043 0220 	orr.w	r2, r3, #32
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e008      	b.n	8005174 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800516c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005170:	d0e9      	beq.n	8005146 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	2000000c 	.word	0x2000000c
 8005184:	14f8b589 	.word	0x14f8b589

08005188 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005194:	e042      	b.n	800521c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	695b      	ldr	r3, [r3, #20]
 800519c:	f003 0310 	and.w	r3, r3, #16
 80051a0:	2b10      	cmp	r3, #16
 80051a2:	d119      	bne.n	80051d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f06f 0210 	mvn.w	r2, #16
 80051ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2220      	movs	r2, #32
 80051b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e029      	b.n	800522c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051d8:	f7fc ff32 	bl	8002040 <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d302      	bcc.n	80051ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d116      	bne.n	800521c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2220      	movs	r2, #32
 80051f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005208:	f043 0220 	orr.w	r2, r3, #32
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e007      	b.n	800522c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005226:	2b40      	cmp	r3, #64	; 0x40
 8005228:	d1b5      	bne.n	8005196 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800524a:	d11b      	bne.n	8005284 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005254:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2220      	movs	r2, #32
 8005260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005270:	f043 0204 	orr.w	r2, r3, #4
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e000      	b.n	8005286 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	370c      	adds	r7, #12
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr

08005292 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005292:	b480      	push	{r7}
 8005294:	b083      	sub	sp, #12
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80052a2:	d103      	bne.n	80052ac <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80052aa:	e007      	b.n	80052bc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80052b4:	d102      	bne.n	80052bc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2208      	movs	r2, #8
 80052ba:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d101      	bne.n	80052dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e0cc      	b.n	8005476 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052dc:	4b68      	ldr	r3, [pc, #416]	; (8005480 <HAL_RCC_ClockConfig+0x1b8>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 030f 	and.w	r3, r3, #15
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d90c      	bls.n	8005304 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ea:	4b65      	ldr	r3, [pc, #404]	; (8005480 <HAL_RCC_ClockConfig+0x1b8>)
 80052ec:	683a      	ldr	r2, [r7, #0]
 80052ee:	b2d2      	uxtb	r2, r2
 80052f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052f2:	4b63      	ldr	r3, [pc, #396]	; (8005480 <HAL_RCC_ClockConfig+0x1b8>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 030f 	and.w	r3, r3, #15
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d001      	beq.n	8005304 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e0b8      	b.n	8005476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0302 	and.w	r3, r3, #2
 800530c:	2b00      	cmp	r3, #0
 800530e:	d020      	beq.n	8005352 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0304 	and.w	r3, r3, #4
 8005318:	2b00      	cmp	r3, #0
 800531a:	d005      	beq.n	8005328 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800531c:	4b59      	ldr	r3, [pc, #356]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	4a58      	ldr	r2, [pc, #352]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 8005322:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005326:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0308 	and.w	r3, r3, #8
 8005330:	2b00      	cmp	r3, #0
 8005332:	d005      	beq.n	8005340 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005334:	4b53      	ldr	r3, [pc, #332]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	4a52      	ldr	r2, [pc, #328]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 800533a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800533e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005340:	4b50      	ldr	r3, [pc, #320]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	494d      	ldr	r1, [pc, #308]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 800534e:	4313      	orrs	r3, r2
 8005350:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b00      	cmp	r3, #0
 800535c:	d044      	beq.n	80053e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d107      	bne.n	8005376 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005366:	4b47      	ldr	r3, [pc, #284]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d119      	bne.n	80053a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e07f      	b.n	8005476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	2b02      	cmp	r3, #2
 800537c:	d003      	beq.n	8005386 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005382:	2b03      	cmp	r3, #3
 8005384:	d107      	bne.n	8005396 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005386:	4b3f      	ldr	r3, [pc, #252]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d109      	bne.n	80053a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e06f      	b.n	8005476 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005396:	4b3b      	ldr	r3, [pc, #236]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e067      	b.n	8005476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053a6:	4b37      	ldr	r3, [pc, #220]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f023 0203 	bic.w	r2, r3, #3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	4934      	ldr	r1, [pc, #208]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053b8:	f7fc fe42 	bl	8002040 <HAL_GetTick>
 80053bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053be:	e00a      	b.n	80053d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053c0:	f7fc fe3e 	bl	8002040 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e04f      	b.n	8005476 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053d6:	4b2b      	ldr	r3, [pc, #172]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f003 020c 	and.w	r2, r3, #12
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d1eb      	bne.n	80053c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053e8:	4b25      	ldr	r3, [pc, #148]	; (8005480 <HAL_RCC_ClockConfig+0x1b8>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 030f 	and.w	r3, r3, #15
 80053f0:	683a      	ldr	r2, [r7, #0]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d20c      	bcs.n	8005410 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053f6:	4b22      	ldr	r3, [pc, #136]	; (8005480 <HAL_RCC_ClockConfig+0x1b8>)
 80053f8:	683a      	ldr	r2, [r7, #0]
 80053fa:	b2d2      	uxtb	r2, r2
 80053fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053fe:	4b20      	ldr	r3, [pc, #128]	; (8005480 <HAL_RCC_ClockConfig+0x1b8>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 030f 	and.w	r3, r3, #15
 8005406:	683a      	ldr	r2, [r7, #0]
 8005408:	429a      	cmp	r2, r3
 800540a:	d001      	beq.n	8005410 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e032      	b.n	8005476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0304 	and.w	r3, r3, #4
 8005418:	2b00      	cmp	r3, #0
 800541a:	d008      	beq.n	800542e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800541c:	4b19      	ldr	r3, [pc, #100]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	4916      	ldr	r1, [pc, #88]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 800542a:	4313      	orrs	r3, r2
 800542c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0308 	and.w	r3, r3, #8
 8005436:	2b00      	cmp	r3, #0
 8005438:	d009      	beq.n	800544e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800543a:	4b12      	ldr	r3, [pc, #72]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	490e      	ldr	r1, [pc, #56]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 800544a:	4313      	orrs	r3, r2
 800544c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800544e:	f000 f855 	bl	80054fc <HAL_RCC_GetSysClockFreq>
 8005452:	4602      	mov	r2, r0
 8005454:	4b0b      	ldr	r3, [pc, #44]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	091b      	lsrs	r3, r3, #4
 800545a:	f003 030f 	and.w	r3, r3, #15
 800545e:	490a      	ldr	r1, [pc, #40]	; (8005488 <HAL_RCC_ClockConfig+0x1c0>)
 8005460:	5ccb      	ldrb	r3, [r1, r3]
 8005462:	fa22 f303 	lsr.w	r3, r2, r3
 8005466:	4a09      	ldr	r2, [pc, #36]	; (800548c <HAL_RCC_ClockConfig+0x1c4>)
 8005468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800546a:	4b09      	ldr	r3, [pc, #36]	; (8005490 <HAL_RCC_ClockConfig+0x1c8>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4618      	mov	r0, r3
 8005470:	f7fc fda2 	bl	8001fb8 <HAL_InitTick>

  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	40023c00 	.word	0x40023c00
 8005484:	40023800 	.word	0x40023800
 8005488:	080079f8 	.word	0x080079f8
 800548c:	2000000c 	.word	0x2000000c
 8005490:	20000010 	.word	0x20000010

08005494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005494:	b480      	push	{r7}
 8005496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005498:	4b03      	ldr	r3, [pc, #12]	; (80054a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800549a:	681b      	ldr	r3, [r3, #0]
}
 800549c:	4618      	mov	r0, r3
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	2000000c 	.word	0x2000000c

080054ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80054b0:	f7ff fff0 	bl	8005494 <HAL_RCC_GetHCLKFreq>
 80054b4:	4602      	mov	r2, r0
 80054b6:	4b05      	ldr	r3, [pc, #20]	; (80054cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	0a9b      	lsrs	r3, r3, #10
 80054bc:	f003 0307 	and.w	r3, r3, #7
 80054c0:	4903      	ldr	r1, [pc, #12]	; (80054d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054c2:	5ccb      	ldrb	r3, [r1, r3]
 80054c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	40023800 	.word	0x40023800
 80054d0:	08007a08 	.word	0x08007a08

080054d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80054d8:	f7ff ffdc 	bl	8005494 <HAL_RCC_GetHCLKFreq>
 80054dc:	4602      	mov	r2, r0
 80054de:	4b05      	ldr	r3, [pc, #20]	; (80054f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	0b5b      	lsrs	r3, r3, #13
 80054e4:	f003 0307 	and.w	r3, r3, #7
 80054e8:	4903      	ldr	r1, [pc, #12]	; (80054f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054ea:	5ccb      	ldrb	r3, [r1, r3]
 80054ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	40023800 	.word	0x40023800
 80054f8:	08007a08 	.word	0x08007a08

080054fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005500:	b0ae      	sub	sp, #184	; 0xb8
 8005502:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005504:	2300      	movs	r3, #0
 8005506:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800550a:	2300      	movs	r3, #0
 800550c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8005510:	2300      	movs	r3, #0
 8005512:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8005516:	2300      	movs	r3, #0
 8005518:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800551c:	2300      	movs	r3, #0
 800551e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005522:	4bcb      	ldr	r3, [pc, #812]	; (8005850 <HAL_RCC_GetSysClockFreq+0x354>)
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f003 030c 	and.w	r3, r3, #12
 800552a:	2b0c      	cmp	r3, #12
 800552c:	f200 8206 	bhi.w	800593c <HAL_RCC_GetSysClockFreq+0x440>
 8005530:	a201      	add	r2, pc, #4	; (adr r2, 8005538 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005536:	bf00      	nop
 8005538:	0800556d 	.word	0x0800556d
 800553c:	0800593d 	.word	0x0800593d
 8005540:	0800593d 	.word	0x0800593d
 8005544:	0800593d 	.word	0x0800593d
 8005548:	08005575 	.word	0x08005575
 800554c:	0800593d 	.word	0x0800593d
 8005550:	0800593d 	.word	0x0800593d
 8005554:	0800593d 	.word	0x0800593d
 8005558:	0800557d 	.word	0x0800557d
 800555c:	0800593d 	.word	0x0800593d
 8005560:	0800593d 	.word	0x0800593d
 8005564:	0800593d 	.word	0x0800593d
 8005568:	0800576d 	.word	0x0800576d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800556c:	4bb9      	ldr	r3, [pc, #740]	; (8005854 <HAL_RCC_GetSysClockFreq+0x358>)
 800556e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8005572:	e1e7      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005574:	4bb8      	ldr	r3, [pc, #736]	; (8005858 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005576:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800557a:	e1e3      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800557c:	4bb4      	ldr	r3, [pc, #720]	; (8005850 <HAL_RCC_GetSysClockFreq+0x354>)
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005584:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005588:	4bb1      	ldr	r3, [pc, #708]	; (8005850 <HAL_RCC_GetSysClockFreq+0x354>)
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d071      	beq.n	8005678 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005594:	4bae      	ldr	r3, [pc, #696]	; (8005850 <HAL_RCC_GetSysClockFreq+0x354>)
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	099b      	lsrs	r3, r3, #6
 800559a:	2200      	movs	r2, #0
 800559c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80055a0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80055a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80055b0:	2300      	movs	r3, #0
 80055b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80055b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80055ba:	4622      	mov	r2, r4
 80055bc:	462b      	mov	r3, r5
 80055be:	f04f 0000 	mov.w	r0, #0
 80055c2:	f04f 0100 	mov.w	r1, #0
 80055c6:	0159      	lsls	r1, r3, #5
 80055c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055cc:	0150      	lsls	r0, r2, #5
 80055ce:	4602      	mov	r2, r0
 80055d0:	460b      	mov	r3, r1
 80055d2:	4621      	mov	r1, r4
 80055d4:	1a51      	subs	r1, r2, r1
 80055d6:	6439      	str	r1, [r7, #64]	; 0x40
 80055d8:	4629      	mov	r1, r5
 80055da:	eb63 0301 	sbc.w	r3, r3, r1
 80055de:	647b      	str	r3, [r7, #68]	; 0x44
 80055e0:	f04f 0200 	mov.w	r2, #0
 80055e4:	f04f 0300 	mov.w	r3, #0
 80055e8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80055ec:	4649      	mov	r1, r9
 80055ee:	018b      	lsls	r3, r1, #6
 80055f0:	4641      	mov	r1, r8
 80055f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80055f6:	4641      	mov	r1, r8
 80055f8:	018a      	lsls	r2, r1, #6
 80055fa:	4641      	mov	r1, r8
 80055fc:	1a51      	subs	r1, r2, r1
 80055fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8005600:	4649      	mov	r1, r9
 8005602:	eb63 0301 	sbc.w	r3, r3, r1
 8005606:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005608:	f04f 0200 	mov.w	r2, #0
 800560c:	f04f 0300 	mov.w	r3, #0
 8005610:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8005614:	4649      	mov	r1, r9
 8005616:	00cb      	lsls	r3, r1, #3
 8005618:	4641      	mov	r1, r8
 800561a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800561e:	4641      	mov	r1, r8
 8005620:	00ca      	lsls	r2, r1, #3
 8005622:	4610      	mov	r0, r2
 8005624:	4619      	mov	r1, r3
 8005626:	4603      	mov	r3, r0
 8005628:	4622      	mov	r2, r4
 800562a:	189b      	adds	r3, r3, r2
 800562c:	633b      	str	r3, [r7, #48]	; 0x30
 800562e:	462b      	mov	r3, r5
 8005630:	460a      	mov	r2, r1
 8005632:	eb42 0303 	adc.w	r3, r2, r3
 8005636:	637b      	str	r3, [r7, #52]	; 0x34
 8005638:	f04f 0200 	mov.w	r2, #0
 800563c:	f04f 0300 	mov.w	r3, #0
 8005640:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005644:	4629      	mov	r1, r5
 8005646:	024b      	lsls	r3, r1, #9
 8005648:	4621      	mov	r1, r4
 800564a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800564e:	4621      	mov	r1, r4
 8005650:	024a      	lsls	r2, r1, #9
 8005652:	4610      	mov	r0, r2
 8005654:	4619      	mov	r1, r3
 8005656:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800565a:	2200      	movs	r2, #0
 800565c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005660:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005664:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005668:	f7fa fdcc 	bl	8000204 <__aeabi_uldivmod>
 800566c:	4602      	mov	r2, r0
 800566e:	460b      	mov	r3, r1
 8005670:	4613      	mov	r3, r2
 8005672:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005676:	e067      	b.n	8005748 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005678:	4b75      	ldr	r3, [pc, #468]	; (8005850 <HAL_RCC_GetSysClockFreq+0x354>)
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	099b      	lsrs	r3, r3, #6
 800567e:	2200      	movs	r2, #0
 8005680:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005684:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005688:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800568c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005690:	67bb      	str	r3, [r7, #120]	; 0x78
 8005692:	2300      	movs	r3, #0
 8005694:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005696:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800569a:	4622      	mov	r2, r4
 800569c:	462b      	mov	r3, r5
 800569e:	f04f 0000 	mov.w	r0, #0
 80056a2:	f04f 0100 	mov.w	r1, #0
 80056a6:	0159      	lsls	r1, r3, #5
 80056a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056ac:	0150      	lsls	r0, r2, #5
 80056ae:	4602      	mov	r2, r0
 80056b0:	460b      	mov	r3, r1
 80056b2:	4621      	mov	r1, r4
 80056b4:	1a51      	subs	r1, r2, r1
 80056b6:	62b9      	str	r1, [r7, #40]	; 0x28
 80056b8:	4629      	mov	r1, r5
 80056ba:	eb63 0301 	sbc.w	r3, r3, r1
 80056be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056c0:	f04f 0200 	mov.w	r2, #0
 80056c4:	f04f 0300 	mov.w	r3, #0
 80056c8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80056cc:	4649      	mov	r1, r9
 80056ce:	018b      	lsls	r3, r1, #6
 80056d0:	4641      	mov	r1, r8
 80056d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80056d6:	4641      	mov	r1, r8
 80056d8:	018a      	lsls	r2, r1, #6
 80056da:	4641      	mov	r1, r8
 80056dc:	ebb2 0a01 	subs.w	sl, r2, r1
 80056e0:	4649      	mov	r1, r9
 80056e2:	eb63 0b01 	sbc.w	fp, r3, r1
 80056e6:	f04f 0200 	mov.w	r2, #0
 80056ea:	f04f 0300 	mov.w	r3, #0
 80056ee:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80056f2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80056f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056fa:	4692      	mov	sl, r2
 80056fc:	469b      	mov	fp, r3
 80056fe:	4623      	mov	r3, r4
 8005700:	eb1a 0303 	adds.w	r3, sl, r3
 8005704:	623b      	str	r3, [r7, #32]
 8005706:	462b      	mov	r3, r5
 8005708:	eb4b 0303 	adc.w	r3, fp, r3
 800570c:	627b      	str	r3, [r7, #36]	; 0x24
 800570e:	f04f 0200 	mov.w	r2, #0
 8005712:	f04f 0300 	mov.w	r3, #0
 8005716:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800571a:	4629      	mov	r1, r5
 800571c:	028b      	lsls	r3, r1, #10
 800571e:	4621      	mov	r1, r4
 8005720:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005724:	4621      	mov	r1, r4
 8005726:	028a      	lsls	r2, r1, #10
 8005728:	4610      	mov	r0, r2
 800572a:	4619      	mov	r1, r3
 800572c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005730:	2200      	movs	r2, #0
 8005732:	673b      	str	r3, [r7, #112]	; 0x70
 8005734:	677a      	str	r2, [r7, #116]	; 0x74
 8005736:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800573a:	f7fa fd63 	bl	8000204 <__aeabi_uldivmod>
 800573e:	4602      	mov	r2, r0
 8005740:	460b      	mov	r3, r1
 8005742:	4613      	mov	r3, r2
 8005744:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005748:	4b41      	ldr	r3, [pc, #260]	; (8005850 <HAL_RCC_GetSysClockFreq+0x354>)
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	0c1b      	lsrs	r3, r3, #16
 800574e:	f003 0303 	and.w	r3, r3, #3
 8005752:	3301      	adds	r3, #1
 8005754:	005b      	lsls	r3, r3, #1
 8005756:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800575a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800575e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005762:	fbb2 f3f3 	udiv	r3, r2, r3
 8005766:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800576a:	e0eb      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800576c:	4b38      	ldr	r3, [pc, #224]	; (8005850 <HAL_RCC_GetSysClockFreq+0x354>)
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005774:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005778:	4b35      	ldr	r3, [pc, #212]	; (8005850 <HAL_RCC_GetSysClockFreq+0x354>)
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d06b      	beq.n	800585c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005784:	4b32      	ldr	r3, [pc, #200]	; (8005850 <HAL_RCC_GetSysClockFreq+0x354>)
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	099b      	lsrs	r3, r3, #6
 800578a:	2200      	movs	r2, #0
 800578c:	66bb      	str	r3, [r7, #104]	; 0x68
 800578e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005790:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005796:	663b      	str	r3, [r7, #96]	; 0x60
 8005798:	2300      	movs	r3, #0
 800579a:	667b      	str	r3, [r7, #100]	; 0x64
 800579c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80057a0:	4622      	mov	r2, r4
 80057a2:	462b      	mov	r3, r5
 80057a4:	f04f 0000 	mov.w	r0, #0
 80057a8:	f04f 0100 	mov.w	r1, #0
 80057ac:	0159      	lsls	r1, r3, #5
 80057ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057b2:	0150      	lsls	r0, r2, #5
 80057b4:	4602      	mov	r2, r0
 80057b6:	460b      	mov	r3, r1
 80057b8:	4621      	mov	r1, r4
 80057ba:	1a51      	subs	r1, r2, r1
 80057bc:	61b9      	str	r1, [r7, #24]
 80057be:	4629      	mov	r1, r5
 80057c0:	eb63 0301 	sbc.w	r3, r3, r1
 80057c4:	61fb      	str	r3, [r7, #28]
 80057c6:	f04f 0200 	mov.w	r2, #0
 80057ca:	f04f 0300 	mov.w	r3, #0
 80057ce:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80057d2:	4659      	mov	r1, fp
 80057d4:	018b      	lsls	r3, r1, #6
 80057d6:	4651      	mov	r1, sl
 80057d8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80057dc:	4651      	mov	r1, sl
 80057de:	018a      	lsls	r2, r1, #6
 80057e0:	4651      	mov	r1, sl
 80057e2:	ebb2 0801 	subs.w	r8, r2, r1
 80057e6:	4659      	mov	r1, fp
 80057e8:	eb63 0901 	sbc.w	r9, r3, r1
 80057ec:	f04f 0200 	mov.w	r2, #0
 80057f0:	f04f 0300 	mov.w	r3, #0
 80057f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005800:	4690      	mov	r8, r2
 8005802:	4699      	mov	r9, r3
 8005804:	4623      	mov	r3, r4
 8005806:	eb18 0303 	adds.w	r3, r8, r3
 800580a:	613b      	str	r3, [r7, #16]
 800580c:	462b      	mov	r3, r5
 800580e:	eb49 0303 	adc.w	r3, r9, r3
 8005812:	617b      	str	r3, [r7, #20]
 8005814:	f04f 0200 	mov.w	r2, #0
 8005818:	f04f 0300 	mov.w	r3, #0
 800581c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005820:	4629      	mov	r1, r5
 8005822:	024b      	lsls	r3, r1, #9
 8005824:	4621      	mov	r1, r4
 8005826:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800582a:	4621      	mov	r1, r4
 800582c:	024a      	lsls	r2, r1, #9
 800582e:	4610      	mov	r0, r2
 8005830:	4619      	mov	r1, r3
 8005832:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005836:	2200      	movs	r2, #0
 8005838:	65bb      	str	r3, [r7, #88]	; 0x58
 800583a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800583c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005840:	f7fa fce0 	bl	8000204 <__aeabi_uldivmod>
 8005844:	4602      	mov	r2, r0
 8005846:	460b      	mov	r3, r1
 8005848:	4613      	mov	r3, r2
 800584a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800584e:	e065      	b.n	800591c <HAL_RCC_GetSysClockFreq+0x420>
 8005850:	40023800 	.word	0x40023800
 8005854:	00f42400 	.word	0x00f42400
 8005858:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800585c:	4b3d      	ldr	r3, [pc, #244]	; (8005954 <HAL_RCC_GetSysClockFreq+0x458>)
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	099b      	lsrs	r3, r3, #6
 8005862:	2200      	movs	r2, #0
 8005864:	4618      	mov	r0, r3
 8005866:	4611      	mov	r1, r2
 8005868:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800586c:	653b      	str	r3, [r7, #80]	; 0x50
 800586e:	2300      	movs	r3, #0
 8005870:	657b      	str	r3, [r7, #84]	; 0x54
 8005872:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8005876:	4642      	mov	r2, r8
 8005878:	464b      	mov	r3, r9
 800587a:	f04f 0000 	mov.w	r0, #0
 800587e:	f04f 0100 	mov.w	r1, #0
 8005882:	0159      	lsls	r1, r3, #5
 8005884:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005888:	0150      	lsls	r0, r2, #5
 800588a:	4602      	mov	r2, r0
 800588c:	460b      	mov	r3, r1
 800588e:	4641      	mov	r1, r8
 8005890:	1a51      	subs	r1, r2, r1
 8005892:	60b9      	str	r1, [r7, #8]
 8005894:	4649      	mov	r1, r9
 8005896:	eb63 0301 	sbc.w	r3, r3, r1
 800589a:	60fb      	str	r3, [r7, #12]
 800589c:	f04f 0200 	mov.w	r2, #0
 80058a0:	f04f 0300 	mov.w	r3, #0
 80058a4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80058a8:	4659      	mov	r1, fp
 80058aa:	018b      	lsls	r3, r1, #6
 80058ac:	4651      	mov	r1, sl
 80058ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80058b2:	4651      	mov	r1, sl
 80058b4:	018a      	lsls	r2, r1, #6
 80058b6:	4651      	mov	r1, sl
 80058b8:	1a54      	subs	r4, r2, r1
 80058ba:	4659      	mov	r1, fp
 80058bc:	eb63 0501 	sbc.w	r5, r3, r1
 80058c0:	f04f 0200 	mov.w	r2, #0
 80058c4:	f04f 0300 	mov.w	r3, #0
 80058c8:	00eb      	lsls	r3, r5, #3
 80058ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058ce:	00e2      	lsls	r2, r4, #3
 80058d0:	4614      	mov	r4, r2
 80058d2:	461d      	mov	r5, r3
 80058d4:	4643      	mov	r3, r8
 80058d6:	18e3      	adds	r3, r4, r3
 80058d8:	603b      	str	r3, [r7, #0]
 80058da:	464b      	mov	r3, r9
 80058dc:	eb45 0303 	adc.w	r3, r5, r3
 80058e0:	607b      	str	r3, [r7, #4]
 80058e2:	f04f 0200 	mov.w	r2, #0
 80058e6:	f04f 0300 	mov.w	r3, #0
 80058ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80058ee:	4629      	mov	r1, r5
 80058f0:	028b      	lsls	r3, r1, #10
 80058f2:	4621      	mov	r1, r4
 80058f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80058f8:	4621      	mov	r1, r4
 80058fa:	028a      	lsls	r2, r1, #10
 80058fc:	4610      	mov	r0, r2
 80058fe:	4619      	mov	r1, r3
 8005900:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005904:	2200      	movs	r2, #0
 8005906:	64bb      	str	r3, [r7, #72]	; 0x48
 8005908:	64fa      	str	r2, [r7, #76]	; 0x4c
 800590a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800590e:	f7fa fc79 	bl	8000204 <__aeabi_uldivmod>
 8005912:	4602      	mov	r2, r0
 8005914:	460b      	mov	r3, r1
 8005916:	4613      	mov	r3, r2
 8005918:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800591c:	4b0d      	ldr	r3, [pc, #52]	; (8005954 <HAL_RCC_GetSysClockFreq+0x458>)
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	0f1b      	lsrs	r3, r3, #28
 8005922:	f003 0307 	and.w	r3, r3, #7
 8005926:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800592a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800592e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005932:	fbb2 f3f3 	udiv	r3, r2, r3
 8005936:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800593a:	e003      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800593c:	4b06      	ldr	r3, [pc, #24]	; (8005958 <HAL_RCC_GetSysClockFreq+0x45c>)
 800593e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005942:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005944:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8005948:	4618      	mov	r0, r3
 800594a:	37b8      	adds	r7, #184	; 0xb8
 800594c:	46bd      	mov	sp, r7
 800594e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005952:	bf00      	nop
 8005954:	40023800 	.word	0x40023800
 8005958:	00f42400 	.word	0x00f42400

0800595c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b086      	sub	sp, #24
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e28d      	b.n	8005e8a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0301 	and.w	r3, r3, #1
 8005976:	2b00      	cmp	r3, #0
 8005978:	f000 8083 	beq.w	8005a82 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800597c:	4b94      	ldr	r3, [pc, #592]	; (8005bd0 <HAL_RCC_OscConfig+0x274>)
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f003 030c 	and.w	r3, r3, #12
 8005984:	2b04      	cmp	r3, #4
 8005986:	d019      	beq.n	80059bc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005988:	4b91      	ldr	r3, [pc, #580]	; (8005bd0 <HAL_RCC_OscConfig+0x274>)
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005990:	2b08      	cmp	r3, #8
 8005992:	d106      	bne.n	80059a2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005994:	4b8e      	ldr	r3, [pc, #568]	; (8005bd0 <HAL_RCC_OscConfig+0x274>)
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800599c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059a0:	d00c      	beq.n	80059bc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059a2:	4b8b      	ldr	r3, [pc, #556]	; (8005bd0 <HAL_RCC_OscConfig+0x274>)
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80059aa:	2b0c      	cmp	r3, #12
 80059ac:	d112      	bne.n	80059d4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059ae:	4b88      	ldr	r3, [pc, #544]	; (8005bd0 <HAL_RCC_OscConfig+0x274>)
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059ba:	d10b      	bne.n	80059d4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059bc:	4b84      	ldr	r3, [pc, #528]	; (8005bd0 <HAL_RCC_OscConfig+0x274>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d05b      	beq.n	8005a80 <HAL_RCC_OscConfig+0x124>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d157      	bne.n	8005a80 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e25a      	b.n	8005e8a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059dc:	d106      	bne.n	80059ec <HAL_RCC_OscConfig+0x90>
 80059de:	4b7c      	ldr	r3, [pc, #496]	; (8005bd0 <HAL_RCC_OscConfig+0x274>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a7b      	ldr	r2, [pc, #492]	; (8005bd0 <HAL_RCC_OscConfig+0x274>)
 80059e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059e8:	6013      	str	r3, [r2, #0]
 80059ea:	e01d      	b.n	8005a28 <HAL_RCC_OscConfig+0xcc>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059f4:	d10c      	bne.n	8005a10 <HAL_RCC_OscConfig+0xb4>
 80059f6:	4b76      	ldr	r3, [pc, #472]	; (8005bd0 <HAL_RCC_OscConfig+0x274>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a75      	ldr	r2, [pc, #468]	; (8005bd0 <HAL_RCC_OscConfig+0x274>)
 80059fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a00:	6013      	str	r3, [r2, #0]
 8005a02:	4b73      	ldr	r3, [pc, #460]	; (8005bd0 <HAL_RCC_OscConfig+0x274>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a72      	ldr	r2, [pc, #456]	; (8005bd0 <HAL_RCC_OscConfig+0x274>)
 8005a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a0c:	6013      	str	r3, [r2, #0]
 8005a0e:	e00b      	b.n	8005a28 <HAL_RCC_OscConfig+0xcc>
 8005a10:	4b6f      	ldr	r3, [pc, #444]	; (8005bd0 <HAL_RCC_OscConfig+0x274>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a6e      	ldr	r2, [pc, #440]	; (8005bd0 <HAL_RCC_OscConfig+0x274>)
 8005a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a1a:	6013      	str	r3, [r2, #0]
 8005a1c:	4b6c      	ldr	r3, [pc, #432]	; (8005bd0 <HAL_RCC_OscConfig+0x274>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a6b      	ldr	r2, [pc, #428]	; (8005bd0 <HAL_RCC_OscConfig+0x274>)
 8005a22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d013      	beq.n	8005a58 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a30:	f7fc fb06 	bl	8002040 <HAL_GetTick>
 8005a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a36:	e008      	b.n	8005a4a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a38:	f7fc fb02 	bl	8002040 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	2b64      	cmp	r3, #100	; 0x64
 8005a44:	d901      	bls.n	8005a4a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e21f      	b.n	8005e8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a4a:	4b61      	ldr	r3, [pc, #388]	; (8005bd0 <HAL_RCC_OscConfig+0x274>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d0f0      	beq.n	8005a38 <HAL_RCC_OscConfig+0xdc>
 8005a56:	e014      	b.n	8005a82 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a58:	f7fc faf2 	bl	8002040 <HAL_GetTick>
 8005a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a5e:	e008      	b.n	8005a72 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a60:	f7fc faee 	bl	8002040 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	2b64      	cmp	r3, #100	; 0x64
 8005a6c:	d901      	bls.n	8005a72 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e20b      	b.n	8005e8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a72:	4b57      	ldr	r3, [pc, #348]	; (8005bd0 <HAL_RCC_OscConfig+0x274>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1f0      	bne.n	8005a60 <HAL_RCC_OscConfig+0x104>
 8005a7e:	e000      	b.n	8005a82 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d06f      	beq.n	8005b6e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005a8e:	4b50      	ldr	r3, [pc, #320]	; (8005bd0 <HAL_RCC_OscConfig+0x274>)
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f003 030c 	and.w	r3, r3, #12
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d017      	beq.n	8005aca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005a9a:	4b4d      	ldr	r3, [pc, #308]	; (8005bd0 <HAL_RCC_OscConfig+0x274>)
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005aa2:	2b08      	cmp	r3, #8
 8005aa4:	d105      	bne.n	8005ab2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005aa6:	4b4a      	ldr	r3, [pc, #296]	; (8005bd0 <HAL_RCC_OscConfig+0x274>)
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00b      	beq.n	8005aca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ab2:	4b47      	ldr	r3, [pc, #284]	; (8005bd0 <HAL_RCC_OscConfig+0x274>)
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005aba:	2b0c      	cmp	r3, #12
 8005abc:	d11c      	bne.n	8005af8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005abe:	4b44      	ldr	r3, [pc, #272]	; (8005bd0 <HAL_RCC_OscConfig+0x274>)
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d116      	bne.n	8005af8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005aca:	4b41      	ldr	r3, [pc, #260]	; (8005bd0 <HAL_RCC_OscConfig+0x274>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0302 	and.w	r3, r3, #2
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d005      	beq.n	8005ae2 <HAL_RCC_OscConfig+0x186>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d001      	beq.n	8005ae2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e1d3      	b.n	8005e8a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ae2:	4b3b      	ldr	r3, [pc, #236]	; (8005bd0 <HAL_RCC_OscConfig+0x274>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	00db      	lsls	r3, r3, #3
 8005af0:	4937      	ldr	r1, [pc, #220]	; (8005bd0 <HAL_RCC_OscConfig+0x274>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005af6:	e03a      	b.n	8005b6e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d020      	beq.n	8005b42 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b00:	4b34      	ldr	r3, [pc, #208]	; (8005bd4 <HAL_RCC_OscConfig+0x278>)
 8005b02:	2201      	movs	r2, #1
 8005b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b06:	f7fc fa9b 	bl	8002040 <HAL_GetTick>
 8005b0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b0c:	e008      	b.n	8005b20 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b0e:	f7fc fa97 	bl	8002040 <HAL_GetTick>
 8005b12:	4602      	mov	r2, r0
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d901      	bls.n	8005b20 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e1b4      	b.n	8005e8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b20:	4b2b      	ldr	r3, [pc, #172]	; (8005bd0 <HAL_RCC_OscConfig+0x274>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0302 	and.w	r3, r3, #2
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d0f0      	beq.n	8005b0e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b2c:	4b28      	ldr	r3, [pc, #160]	; (8005bd0 <HAL_RCC_OscConfig+0x274>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	00db      	lsls	r3, r3, #3
 8005b3a:	4925      	ldr	r1, [pc, #148]	; (8005bd0 <HAL_RCC_OscConfig+0x274>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	600b      	str	r3, [r1, #0]
 8005b40:	e015      	b.n	8005b6e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b42:	4b24      	ldr	r3, [pc, #144]	; (8005bd4 <HAL_RCC_OscConfig+0x278>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b48:	f7fc fa7a 	bl	8002040 <HAL_GetTick>
 8005b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b4e:	e008      	b.n	8005b62 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b50:	f7fc fa76 	bl	8002040 <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d901      	bls.n	8005b62 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e193      	b.n	8005e8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b62:	4b1b      	ldr	r3, [pc, #108]	; (8005bd0 <HAL_RCC_OscConfig+0x274>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0302 	and.w	r3, r3, #2
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1f0      	bne.n	8005b50 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0308 	and.w	r3, r3, #8
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d036      	beq.n	8005be8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d016      	beq.n	8005bb0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b82:	4b15      	ldr	r3, [pc, #84]	; (8005bd8 <HAL_RCC_OscConfig+0x27c>)
 8005b84:	2201      	movs	r2, #1
 8005b86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b88:	f7fc fa5a 	bl	8002040 <HAL_GetTick>
 8005b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b8e:	e008      	b.n	8005ba2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b90:	f7fc fa56 	bl	8002040 <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d901      	bls.n	8005ba2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e173      	b.n	8005e8a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ba2:	4b0b      	ldr	r3, [pc, #44]	; (8005bd0 <HAL_RCC_OscConfig+0x274>)
 8005ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d0f0      	beq.n	8005b90 <HAL_RCC_OscConfig+0x234>
 8005bae:	e01b      	b.n	8005be8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bb0:	4b09      	ldr	r3, [pc, #36]	; (8005bd8 <HAL_RCC_OscConfig+0x27c>)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bb6:	f7fc fa43 	bl	8002040 <HAL_GetTick>
 8005bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bbc:	e00e      	b.n	8005bdc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bbe:	f7fc fa3f 	bl	8002040 <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d907      	bls.n	8005bdc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e15c      	b.n	8005e8a <HAL_RCC_OscConfig+0x52e>
 8005bd0:	40023800 	.word	0x40023800
 8005bd4:	42470000 	.word	0x42470000
 8005bd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bdc:	4b8a      	ldr	r3, [pc, #552]	; (8005e08 <HAL_RCC_OscConfig+0x4ac>)
 8005bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005be0:	f003 0302 	and.w	r3, r3, #2
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1ea      	bne.n	8005bbe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0304 	and.w	r3, r3, #4
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 8097 	beq.w	8005d24 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bfa:	4b83      	ldr	r3, [pc, #524]	; (8005e08 <HAL_RCC_OscConfig+0x4ac>)
 8005bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10f      	bne.n	8005c26 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c06:	2300      	movs	r3, #0
 8005c08:	60bb      	str	r3, [r7, #8]
 8005c0a:	4b7f      	ldr	r3, [pc, #508]	; (8005e08 <HAL_RCC_OscConfig+0x4ac>)
 8005c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0e:	4a7e      	ldr	r2, [pc, #504]	; (8005e08 <HAL_RCC_OscConfig+0x4ac>)
 8005c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c14:	6413      	str	r3, [r2, #64]	; 0x40
 8005c16:	4b7c      	ldr	r3, [pc, #496]	; (8005e08 <HAL_RCC_OscConfig+0x4ac>)
 8005c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c1e:	60bb      	str	r3, [r7, #8]
 8005c20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c22:	2301      	movs	r3, #1
 8005c24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c26:	4b79      	ldr	r3, [pc, #484]	; (8005e0c <HAL_RCC_OscConfig+0x4b0>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d118      	bne.n	8005c64 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c32:	4b76      	ldr	r3, [pc, #472]	; (8005e0c <HAL_RCC_OscConfig+0x4b0>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a75      	ldr	r2, [pc, #468]	; (8005e0c <HAL_RCC_OscConfig+0x4b0>)
 8005c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c3e:	f7fc f9ff 	bl	8002040 <HAL_GetTick>
 8005c42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c44:	e008      	b.n	8005c58 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c46:	f7fc f9fb 	bl	8002040 <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d901      	bls.n	8005c58 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e118      	b.n	8005e8a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c58:	4b6c      	ldr	r3, [pc, #432]	; (8005e0c <HAL_RCC_OscConfig+0x4b0>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d0f0      	beq.n	8005c46 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d106      	bne.n	8005c7a <HAL_RCC_OscConfig+0x31e>
 8005c6c:	4b66      	ldr	r3, [pc, #408]	; (8005e08 <HAL_RCC_OscConfig+0x4ac>)
 8005c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c70:	4a65      	ldr	r2, [pc, #404]	; (8005e08 <HAL_RCC_OscConfig+0x4ac>)
 8005c72:	f043 0301 	orr.w	r3, r3, #1
 8005c76:	6713      	str	r3, [r2, #112]	; 0x70
 8005c78:	e01c      	b.n	8005cb4 <HAL_RCC_OscConfig+0x358>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	2b05      	cmp	r3, #5
 8005c80:	d10c      	bne.n	8005c9c <HAL_RCC_OscConfig+0x340>
 8005c82:	4b61      	ldr	r3, [pc, #388]	; (8005e08 <HAL_RCC_OscConfig+0x4ac>)
 8005c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c86:	4a60      	ldr	r2, [pc, #384]	; (8005e08 <HAL_RCC_OscConfig+0x4ac>)
 8005c88:	f043 0304 	orr.w	r3, r3, #4
 8005c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8005c8e:	4b5e      	ldr	r3, [pc, #376]	; (8005e08 <HAL_RCC_OscConfig+0x4ac>)
 8005c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c92:	4a5d      	ldr	r2, [pc, #372]	; (8005e08 <HAL_RCC_OscConfig+0x4ac>)
 8005c94:	f043 0301 	orr.w	r3, r3, #1
 8005c98:	6713      	str	r3, [r2, #112]	; 0x70
 8005c9a:	e00b      	b.n	8005cb4 <HAL_RCC_OscConfig+0x358>
 8005c9c:	4b5a      	ldr	r3, [pc, #360]	; (8005e08 <HAL_RCC_OscConfig+0x4ac>)
 8005c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca0:	4a59      	ldr	r2, [pc, #356]	; (8005e08 <HAL_RCC_OscConfig+0x4ac>)
 8005ca2:	f023 0301 	bic.w	r3, r3, #1
 8005ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ca8:	4b57      	ldr	r3, [pc, #348]	; (8005e08 <HAL_RCC_OscConfig+0x4ac>)
 8005caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cac:	4a56      	ldr	r2, [pc, #344]	; (8005e08 <HAL_RCC_OscConfig+0x4ac>)
 8005cae:	f023 0304 	bic.w	r3, r3, #4
 8005cb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d015      	beq.n	8005ce8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cbc:	f7fc f9c0 	bl	8002040 <HAL_GetTick>
 8005cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cc2:	e00a      	b.n	8005cda <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cc4:	f7fc f9bc 	bl	8002040 <HAL_GetTick>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d901      	bls.n	8005cda <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e0d7      	b.n	8005e8a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cda:	4b4b      	ldr	r3, [pc, #300]	; (8005e08 <HAL_RCC_OscConfig+0x4ac>)
 8005cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cde:	f003 0302 	and.w	r3, r3, #2
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d0ee      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x368>
 8005ce6:	e014      	b.n	8005d12 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ce8:	f7fc f9aa 	bl	8002040 <HAL_GetTick>
 8005cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cee:	e00a      	b.n	8005d06 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cf0:	f7fc f9a6 	bl	8002040 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d901      	bls.n	8005d06 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e0c1      	b.n	8005e8a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d06:	4b40      	ldr	r3, [pc, #256]	; (8005e08 <HAL_RCC_OscConfig+0x4ac>)
 8005d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d0a:	f003 0302 	and.w	r3, r3, #2
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1ee      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d12:	7dfb      	ldrb	r3, [r7, #23]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d105      	bne.n	8005d24 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d18:	4b3b      	ldr	r3, [pc, #236]	; (8005e08 <HAL_RCC_OscConfig+0x4ac>)
 8005d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1c:	4a3a      	ldr	r2, [pc, #232]	; (8005e08 <HAL_RCC_OscConfig+0x4ac>)
 8005d1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f000 80ad 	beq.w	8005e88 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d2e:	4b36      	ldr	r3, [pc, #216]	; (8005e08 <HAL_RCC_OscConfig+0x4ac>)
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f003 030c 	and.w	r3, r3, #12
 8005d36:	2b08      	cmp	r3, #8
 8005d38:	d060      	beq.n	8005dfc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d145      	bne.n	8005dce <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d42:	4b33      	ldr	r3, [pc, #204]	; (8005e10 <HAL_RCC_OscConfig+0x4b4>)
 8005d44:	2200      	movs	r2, #0
 8005d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d48:	f7fc f97a 	bl	8002040 <HAL_GetTick>
 8005d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d4e:	e008      	b.n	8005d62 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d50:	f7fc f976 	bl	8002040 <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d901      	bls.n	8005d62 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e093      	b.n	8005e8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d62:	4b29      	ldr	r3, [pc, #164]	; (8005e08 <HAL_RCC_OscConfig+0x4ac>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1f0      	bne.n	8005d50 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	69da      	ldr	r2, [r3, #28]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	431a      	orrs	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7c:	019b      	lsls	r3, r3, #6
 8005d7e:	431a      	orrs	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d84:	085b      	lsrs	r3, r3, #1
 8005d86:	3b01      	subs	r3, #1
 8005d88:	041b      	lsls	r3, r3, #16
 8005d8a:	431a      	orrs	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d90:	061b      	lsls	r3, r3, #24
 8005d92:	431a      	orrs	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d98:	071b      	lsls	r3, r3, #28
 8005d9a:	491b      	ldr	r1, [pc, #108]	; (8005e08 <HAL_RCC_OscConfig+0x4ac>)
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005da0:	4b1b      	ldr	r3, [pc, #108]	; (8005e10 <HAL_RCC_OscConfig+0x4b4>)
 8005da2:	2201      	movs	r2, #1
 8005da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da6:	f7fc f94b 	bl	8002040 <HAL_GetTick>
 8005daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dac:	e008      	b.n	8005dc0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dae:	f7fc f947 	bl	8002040 <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d901      	bls.n	8005dc0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e064      	b.n	8005e8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dc0:	4b11      	ldr	r3, [pc, #68]	; (8005e08 <HAL_RCC_OscConfig+0x4ac>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d0f0      	beq.n	8005dae <HAL_RCC_OscConfig+0x452>
 8005dcc:	e05c      	b.n	8005e88 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dce:	4b10      	ldr	r3, [pc, #64]	; (8005e10 <HAL_RCC_OscConfig+0x4b4>)
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd4:	f7fc f934 	bl	8002040 <HAL_GetTick>
 8005dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dda:	e008      	b.n	8005dee <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ddc:	f7fc f930 	bl	8002040 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d901      	bls.n	8005dee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e04d      	b.n	8005e8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dee:	4b06      	ldr	r3, [pc, #24]	; (8005e08 <HAL_RCC_OscConfig+0x4ac>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1f0      	bne.n	8005ddc <HAL_RCC_OscConfig+0x480>
 8005dfa:	e045      	b.n	8005e88 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d107      	bne.n	8005e14 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e040      	b.n	8005e8a <HAL_RCC_OscConfig+0x52e>
 8005e08:	40023800 	.word	0x40023800
 8005e0c:	40007000 	.word	0x40007000
 8005e10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e14:	4b1f      	ldr	r3, [pc, #124]	; (8005e94 <HAL_RCC_OscConfig+0x538>)
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d030      	beq.n	8005e84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d129      	bne.n	8005e84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d122      	bne.n	8005e84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e44:	4013      	ands	r3, r2
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d119      	bne.n	8005e84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5a:	085b      	lsrs	r3, r3, #1
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d10f      	bne.n	8005e84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d107      	bne.n	8005e84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d001      	beq.n	8005e88 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e000      	b.n	8005e8a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3718      	adds	r7, #24
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	40023800 	.word	0x40023800

08005e98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d101      	bne.n	8005eaa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e07b      	b.n	8005fa2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d108      	bne.n	8005ec4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005eba:	d009      	beq.n	8005ed0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	61da      	str	r2, [r3, #28]
 8005ec2:	e005      	b.n	8005ed0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d106      	bne.n	8005ef0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f7fb feec 	bl	8001cc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f06:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f18:	431a      	orrs	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f22:	431a      	orrs	r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	431a      	orrs	r2, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	f003 0301 	and.w	r3, r3, #1
 8005f36:	431a      	orrs	r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f40:	431a      	orrs	r2, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	69db      	ldr	r3, [r3, #28]
 8005f46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f4a:	431a      	orrs	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a1b      	ldr	r3, [r3, #32]
 8005f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f54:	ea42 0103 	orr.w	r1, r2, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f5c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	430a      	orrs	r2, r1
 8005f66:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	0c1b      	lsrs	r3, r3, #16
 8005f6e:	f003 0104 	and.w	r1, r3, #4
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f76:	f003 0210 	and.w	r2, r3, #16
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	69da      	ldr	r2, [r3, #28]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3708      	adds	r7, #8
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b088      	sub	sp, #32
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	60f8      	str	r0, [r7, #12]
 8005fb2:	60b9      	str	r1, [r7, #8]
 8005fb4:	603b      	str	r3, [r7, #0]
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d101      	bne.n	8005fcc <HAL_SPI_Transmit+0x22>
 8005fc8:	2302      	movs	r3, #2
 8005fca:	e126      	b.n	800621a <HAL_SPI_Transmit+0x270>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fd4:	f7fc f834 	bl	8002040 <HAL_GetTick>
 8005fd8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005fda:	88fb      	ldrh	r3, [r7, #6]
 8005fdc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d002      	beq.n	8005ff0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005fea:	2302      	movs	r3, #2
 8005fec:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005fee:	e10b      	b.n	8006208 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d002      	beq.n	8005ffc <HAL_SPI_Transmit+0x52>
 8005ff6:	88fb      	ldrh	r3, [r7, #6]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d102      	bne.n	8006002 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006000:	e102      	b.n	8006208 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2203      	movs	r2, #3
 8006006:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	88fa      	ldrh	r2, [r7, #6]
 800601a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	88fa      	ldrh	r2, [r7, #6]
 8006020:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006048:	d10f      	bne.n	800606a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006058:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006068:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006074:	2b40      	cmp	r3, #64	; 0x40
 8006076:	d007      	beq.n	8006088 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006086:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006090:	d14b      	bne.n	800612a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d002      	beq.n	80060a0 <HAL_SPI_Transmit+0xf6>
 800609a:	8afb      	ldrh	r3, [r7, #22]
 800609c:	2b01      	cmp	r3, #1
 800609e:	d13e      	bne.n	800611e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a4:	881a      	ldrh	r2, [r3, #0]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b0:	1c9a      	adds	r2, r3, #2
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	3b01      	subs	r3, #1
 80060be:	b29a      	uxth	r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80060c4:	e02b      	b.n	800611e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f003 0302 	and.w	r3, r3, #2
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d112      	bne.n	80060fa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d8:	881a      	ldrh	r2, [r3, #0]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e4:	1c9a      	adds	r2, r3, #2
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	3b01      	subs	r3, #1
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	86da      	strh	r2, [r3, #54]	; 0x36
 80060f8:	e011      	b.n	800611e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060fa:	f7fb ffa1 	bl	8002040 <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	683a      	ldr	r2, [r7, #0]
 8006106:	429a      	cmp	r2, r3
 8006108:	d803      	bhi.n	8006112 <HAL_SPI_Transmit+0x168>
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006110:	d102      	bne.n	8006118 <HAL_SPI_Transmit+0x16e>
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d102      	bne.n	800611e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800611c:	e074      	b.n	8006208 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006122:	b29b      	uxth	r3, r3
 8006124:	2b00      	cmp	r3, #0
 8006126:	d1ce      	bne.n	80060c6 <HAL_SPI_Transmit+0x11c>
 8006128:	e04c      	b.n	80061c4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d002      	beq.n	8006138 <HAL_SPI_Transmit+0x18e>
 8006132:	8afb      	ldrh	r3, [r7, #22]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d140      	bne.n	80061ba <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	330c      	adds	r3, #12
 8006142:	7812      	ldrb	r2, [r2, #0]
 8006144:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800614a:	1c5a      	adds	r2, r3, #1
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006154:	b29b      	uxth	r3, r3
 8006156:	3b01      	subs	r3, #1
 8006158:	b29a      	uxth	r2, r3
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800615e:	e02c      	b.n	80061ba <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	f003 0302 	and.w	r3, r3, #2
 800616a:	2b02      	cmp	r3, #2
 800616c:	d113      	bne.n	8006196 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	330c      	adds	r3, #12
 8006178:	7812      	ldrb	r2, [r2, #0]
 800617a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006180:	1c5a      	adds	r2, r3, #1
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800618a:	b29b      	uxth	r3, r3
 800618c:	3b01      	subs	r3, #1
 800618e:	b29a      	uxth	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	86da      	strh	r2, [r3, #54]	; 0x36
 8006194:	e011      	b.n	80061ba <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006196:	f7fb ff53 	bl	8002040 <HAL_GetTick>
 800619a:	4602      	mov	r2, r0
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	683a      	ldr	r2, [r7, #0]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d803      	bhi.n	80061ae <HAL_SPI_Transmit+0x204>
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ac:	d102      	bne.n	80061b4 <HAL_SPI_Transmit+0x20a>
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d102      	bne.n	80061ba <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80061b8:	e026      	b.n	8006208 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061be:	b29b      	uxth	r3, r3
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d1cd      	bne.n	8006160 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061c4:	69ba      	ldr	r2, [r7, #24]
 80061c6:	6839      	ldr	r1, [r7, #0]
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	f000 fcdd 	bl	8006b88 <SPI_EndRxTxTransaction>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d002      	beq.n	80061da <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2220      	movs	r2, #32
 80061d8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10a      	bne.n	80061f8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061e2:	2300      	movs	r3, #0
 80061e4:	613b      	str	r3, [r7, #16]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	613b      	str	r3, [r7, #16]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	613b      	str	r3, [r7, #16]
 80061f6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d002      	beq.n	8006206 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	77fb      	strb	r3, [r7, #31]
 8006204:	e000      	b.n	8006208 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006206:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006218:	7ffb      	ldrb	r3, [r7, #31]
}
 800621a:	4618      	mov	r0, r3
 800621c:	3720      	adds	r7, #32
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006222:	b580      	push	{r7, lr}
 8006224:	b088      	sub	sp, #32
 8006226:	af02      	add	r7, sp, #8
 8006228:	60f8      	str	r0, [r7, #12]
 800622a:	60b9      	str	r1, [r7, #8]
 800622c:	603b      	str	r3, [r7, #0]
 800622e:	4613      	mov	r3, r2
 8006230:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006232:	2300      	movs	r3, #0
 8006234:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800623e:	d112      	bne.n	8006266 <HAL_SPI_Receive+0x44>
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10e      	bne.n	8006266 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2204      	movs	r2, #4
 800624c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006250:	88fa      	ldrh	r2, [r7, #6]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	4613      	mov	r3, r2
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	68b9      	ldr	r1, [r7, #8]
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f000 f8f1 	bl	8006444 <HAL_SPI_TransmitReceive>
 8006262:	4603      	mov	r3, r0
 8006264:	e0ea      	b.n	800643c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800626c:	2b01      	cmp	r3, #1
 800626e:	d101      	bne.n	8006274 <HAL_SPI_Receive+0x52>
 8006270:	2302      	movs	r3, #2
 8006272:	e0e3      	b.n	800643c <HAL_SPI_Receive+0x21a>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800627c:	f7fb fee0 	bl	8002040 <HAL_GetTick>
 8006280:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006288:	b2db      	uxtb	r3, r3
 800628a:	2b01      	cmp	r3, #1
 800628c:	d002      	beq.n	8006294 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800628e:	2302      	movs	r3, #2
 8006290:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006292:	e0ca      	b.n	800642a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d002      	beq.n	80062a0 <HAL_SPI_Receive+0x7e>
 800629a:	88fb      	ldrh	r3, [r7, #6]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d102      	bne.n	80062a6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80062a4:	e0c1      	b.n	800642a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2204      	movs	r2, #4
 80062aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	68ba      	ldr	r2, [r7, #8]
 80062b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	88fa      	ldrh	r2, [r7, #6]
 80062be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	88fa      	ldrh	r2, [r7, #6]
 80062c4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2200      	movs	r2, #0
 80062ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2200      	movs	r2, #0
 80062d0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062ec:	d10f      	bne.n	800630e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800630c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006318:	2b40      	cmp	r3, #64	; 0x40
 800631a:	d007      	beq.n	800632c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800632a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d162      	bne.n	80063fa <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006334:	e02e      	b.n	8006394 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f003 0301 	and.w	r3, r3, #1
 8006340:	2b01      	cmp	r3, #1
 8006342:	d115      	bne.n	8006370 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f103 020c 	add.w	r2, r3, #12
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006350:	7812      	ldrb	r2, [r2, #0]
 8006352:	b2d2      	uxtb	r2, r2
 8006354:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800635a:	1c5a      	adds	r2, r3, #1
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006364:	b29b      	uxth	r3, r3
 8006366:	3b01      	subs	r3, #1
 8006368:	b29a      	uxth	r2, r3
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800636e:	e011      	b.n	8006394 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006370:	f7fb fe66 	bl	8002040 <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	683a      	ldr	r2, [r7, #0]
 800637c:	429a      	cmp	r2, r3
 800637e:	d803      	bhi.n	8006388 <HAL_SPI_Receive+0x166>
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006386:	d102      	bne.n	800638e <HAL_SPI_Receive+0x16c>
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d102      	bne.n	8006394 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006392:	e04a      	b.n	800642a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006398:	b29b      	uxth	r3, r3
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1cb      	bne.n	8006336 <HAL_SPI_Receive+0x114>
 800639e:	e031      	b.n	8006404 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f003 0301 	and.w	r3, r3, #1
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d113      	bne.n	80063d6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68da      	ldr	r2, [r3, #12]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b8:	b292      	uxth	r2, r2
 80063ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c0:	1c9a      	adds	r2, r3, #2
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	3b01      	subs	r3, #1
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063d4:	e011      	b.n	80063fa <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063d6:	f7fb fe33 	bl	8002040 <HAL_GetTick>
 80063da:	4602      	mov	r2, r0
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	683a      	ldr	r2, [r7, #0]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d803      	bhi.n	80063ee <HAL_SPI_Receive+0x1cc>
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ec:	d102      	bne.n	80063f4 <HAL_SPI_Receive+0x1d2>
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d102      	bne.n	80063fa <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80063f8:	e017      	b.n	800642a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063fe:	b29b      	uxth	r3, r3
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1cd      	bne.n	80063a0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	6839      	ldr	r1, [r7, #0]
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	f000 fb57 	bl	8006abc <SPI_EndRxTransaction>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d002      	beq.n	800641a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2220      	movs	r2, #32
 8006418:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800641e:	2b00      	cmp	r3, #0
 8006420:	d002      	beq.n	8006428 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	75fb      	strb	r3, [r7, #23]
 8006426:	e000      	b.n	800642a <HAL_SPI_Receive+0x208>
  }

error :
 8006428:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2201      	movs	r2, #1
 800642e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800643a:	7dfb      	ldrb	r3, [r7, #23]
}
 800643c:	4618      	mov	r0, r3
 800643e:	3718      	adds	r7, #24
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b08c      	sub	sp, #48	; 0x30
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]
 8006450:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006452:	2301      	movs	r3, #1
 8006454:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006456:	2300      	movs	r3, #0
 8006458:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006462:	2b01      	cmp	r3, #1
 8006464:	d101      	bne.n	800646a <HAL_SPI_TransmitReceive+0x26>
 8006466:	2302      	movs	r3, #2
 8006468:	e18a      	b.n	8006780 <HAL_SPI_TransmitReceive+0x33c>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006472:	f7fb fde5 	bl	8002040 <HAL_GetTick>
 8006476:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800647e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006488:	887b      	ldrh	r3, [r7, #2]
 800648a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800648c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006490:	2b01      	cmp	r3, #1
 8006492:	d00f      	beq.n	80064b4 <HAL_SPI_TransmitReceive+0x70>
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800649a:	d107      	bne.n	80064ac <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d103      	bne.n	80064ac <HAL_SPI_TransmitReceive+0x68>
 80064a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064a8:	2b04      	cmp	r3, #4
 80064aa:	d003      	beq.n	80064b4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80064ac:	2302      	movs	r3, #2
 80064ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80064b2:	e15b      	b.n	800676c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d005      	beq.n	80064c6 <HAL_SPI_TransmitReceive+0x82>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d002      	beq.n	80064c6 <HAL_SPI_TransmitReceive+0x82>
 80064c0:	887b      	ldrh	r3, [r7, #2]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d103      	bne.n	80064ce <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80064cc:	e14e      	b.n	800676c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2b04      	cmp	r3, #4
 80064d8:	d003      	beq.n	80064e2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2205      	movs	r2, #5
 80064de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	887a      	ldrh	r2, [r7, #2]
 80064f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	887a      	ldrh	r2, [r7, #2]
 80064f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	887a      	ldrh	r2, [r7, #2]
 8006504:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	887a      	ldrh	r2, [r7, #2]
 800650a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2200      	movs	r2, #0
 8006510:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006522:	2b40      	cmp	r3, #64	; 0x40
 8006524:	d007      	beq.n	8006536 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006534:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800653e:	d178      	bne.n	8006632 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d002      	beq.n	800654e <HAL_SPI_TransmitReceive+0x10a>
 8006548:	8b7b      	ldrh	r3, [r7, #26]
 800654a:	2b01      	cmp	r3, #1
 800654c:	d166      	bne.n	800661c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006552:	881a      	ldrh	r2, [r3, #0]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800655e:	1c9a      	adds	r2, r3, #2
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006568:	b29b      	uxth	r3, r3
 800656a:	3b01      	subs	r3, #1
 800656c:	b29a      	uxth	r2, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006572:	e053      	b.n	800661c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f003 0302 	and.w	r3, r3, #2
 800657e:	2b02      	cmp	r3, #2
 8006580:	d11b      	bne.n	80065ba <HAL_SPI_TransmitReceive+0x176>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006586:	b29b      	uxth	r3, r3
 8006588:	2b00      	cmp	r3, #0
 800658a:	d016      	beq.n	80065ba <HAL_SPI_TransmitReceive+0x176>
 800658c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800658e:	2b01      	cmp	r3, #1
 8006590:	d113      	bne.n	80065ba <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006596:	881a      	ldrh	r2, [r3, #0]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a2:	1c9a      	adds	r2, r3, #2
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	3b01      	subs	r3, #1
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80065b6:	2300      	movs	r3, #0
 80065b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d119      	bne.n	80065fc <HAL_SPI_TransmitReceive+0x1b8>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d014      	beq.n	80065fc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68da      	ldr	r2, [r3, #12]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065dc:	b292      	uxth	r2, r2
 80065de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e4:	1c9a      	adds	r2, r3, #2
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	3b01      	subs	r3, #1
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80065f8:	2301      	movs	r3, #1
 80065fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80065fc:	f7fb fd20 	bl	8002040 <HAL_GetTick>
 8006600:	4602      	mov	r2, r0
 8006602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006608:	429a      	cmp	r2, r3
 800660a:	d807      	bhi.n	800661c <HAL_SPI_TransmitReceive+0x1d8>
 800660c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006612:	d003      	beq.n	800661c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800661a:	e0a7      	b.n	800676c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006620:	b29b      	uxth	r3, r3
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1a6      	bne.n	8006574 <HAL_SPI_TransmitReceive+0x130>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800662a:	b29b      	uxth	r3, r3
 800662c:	2b00      	cmp	r3, #0
 800662e:	d1a1      	bne.n	8006574 <HAL_SPI_TransmitReceive+0x130>
 8006630:	e07c      	b.n	800672c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d002      	beq.n	8006640 <HAL_SPI_TransmitReceive+0x1fc>
 800663a:	8b7b      	ldrh	r3, [r7, #26]
 800663c:	2b01      	cmp	r3, #1
 800663e:	d16b      	bne.n	8006718 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	330c      	adds	r3, #12
 800664a:	7812      	ldrb	r2, [r2, #0]
 800664c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006652:	1c5a      	adds	r2, r3, #1
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800665c:	b29b      	uxth	r3, r3
 800665e:	3b01      	subs	r3, #1
 8006660:	b29a      	uxth	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006666:	e057      	b.n	8006718 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	f003 0302 	and.w	r3, r3, #2
 8006672:	2b02      	cmp	r3, #2
 8006674:	d11c      	bne.n	80066b0 <HAL_SPI_TransmitReceive+0x26c>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800667a:	b29b      	uxth	r3, r3
 800667c:	2b00      	cmp	r3, #0
 800667e:	d017      	beq.n	80066b0 <HAL_SPI_TransmitReceive+0x26c>
 8006680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006682:	2b01      	cmp	r3, #1
 8006684:	d114      	bne.n	80066b0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	330c      	adds	r3, #12
 8006690:	7812      	ldrb	r2, [r2, #0]
 8006692:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006698:	1c5a      	adds	r2, r3, #1
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	3b01      	subs	r3, #1
 80066a6:	b29a      	uxth	r2, r3
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80066ac:	2300      	movs	r3, #0
 80066ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	f003 0301 	and.w	r3, r3, #1
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d119      	bne.n	80066f2 <HAL_SPI_TransmitReceive+0x2ae>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d014      	beq.n	80066f2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68da      	ldr	r2, [r3, #12]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d2:	b2d2      	uxtb	r2, r2
 80066d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066da:	1c5a      	adds	r2, r3, #1
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	3b01      	subs	r3, #1
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80066ee:	2301      	movs	r3, #1
 80066f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80066f2:	f7fb fca5 	bl	8002040 <HAL_GetTick>
 80066f6:	4602      	mov	r2, r0
 80066f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066fe:	429a      	cmp	r2, r3
 8006700:	d803      	bhi.n	800670a <HAL_SPI_TransmitReceive+0x2c6>
 8006702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006708:	d102      	bne.n	8006710 <HAL_SPI_TransmitReceive+0x2cc>
 800670a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800670c:	2b00      	cmp	r3, #0
 800670e:	d103      	bne.n	8006718 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006716:	e029      	b.n	800676c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800671c:	b29b      	uxth	r3, r3
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1a2      	bne.n	8006668 <HAL_SPI_TransmitReceive+0x224>
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006726:	b29b      	uxth	r3, r3
 8006728:	2b00      	cmp	r3, #0
 800672a:	d19d      	bne.n	8006668 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800672c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800672e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f000 fa29 	bl	8006b88 <SPI_EndRxTxTransaction>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d006      	beq.n	800674a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2220      	movs	r2, #32
 8006746:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006748:	e010      	b.n	800676c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d10b      	bne.n	800676a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006752:	2300      	movs	r3, #0
 8006754:	617b      	str	r3, [r7, #20]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	617b      	str	r3, [r7, #20]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	617b      	str	r3, [r7, #20]
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	e000      	b.n	800676c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800676a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800677c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006780:	4618      	mov	r0, r3
 8006782:	3730      	adds	r7, #48	; 0x30
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b088      	sub	sp, #32
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d10e      	bne.n	80067c8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d009      	beq.n	80067c8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d004      	beq.n	80067c8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	4798      	blx	r3
    return;
 80067c6:	e0ce      	b.n	8006966 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	f003 0302 	and.w	r3, r3, #2
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d009      	beq.n	80067e6 <HAL_SPI_IRQHandler+0x5e>
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d004      	beq.n	80067e6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	4798      	blx	r3
    return;
 80067e4:	e0bf      	b.n	8006966 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	f003 0320 	and.w	r3, r3, #32
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d10a      	bne.n	8006806 <HAL_SPI_IRQHandler+0x7e>
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d105      	bne.n	8006806 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006800:	2b00      	cmp	r3, #0
 8006802:	f000 80b0 	beq.w	8006966 <HAL_SPI_IRQHandler+0x1de>
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	f003 0320 	and.w	r3, r3, #32
 800680c:	2b00      	cmp	r3, #0
 800680e:	f000 80aa 	beq.w	8006966 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006818:	2b00      	cmp	r3, #0
 800681a:	d023      	beq.n	8006864 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006822:	b2db      	uxtb	r3, r3
 8006824:	2b03      	cmp	r3, #3
 8006826:	d011      	beq.n	800684c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800682c:	f043 0204 	orr.w	r2, r3, #4
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006834:	2300      	movs	r3, #0
 8006836:	617b      	str	r3, [r7, #20]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	617b      	str	r3, [r7, #20]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	617b      	str	r3, [r7, #20]
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	e00b      	b.n	8006864 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800684c:	2300      	movs	r3, #0
 800684e:	613b      	str	r3, [r7, #16]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	613b      	str	r3, [r7, #16]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	613b      	str	r3, [r7, #16]
 8006860:	693b      	ldr	r3, [r7, #16]
        return;
 8006862:	e080      	b.n	8006966 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	f003 0320 	and.w	r3, r3, #32
 800686a:	2b00      	cmp	r3, #0
 800686c:	d014      	beq.n	8006898 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006872:	f043 0201 	orr.w	r2, r3, #1
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800687a:	2300      	movs	r3, #0
 800687c:	60fb      	str	r3, [r7, #12]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	60fb      	str	r3, [r7, #12]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006894:	601a      	str	r2, [r3, #0]
 8006896:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00c      	beq.n	80068bc <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a6:	f043 0208 	orr.w	r2, r3, #8
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80068ae:	2300      	movs	r3, #0
 80068b0:	60bb      	str	r3, [r7, #8]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	60bb      	str	r3, [r7, #8]
 80068ba:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d04f      	beq.n	8006964 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	685a      	ldr	r2, [r3, #4]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80068d2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d104      	bne.n	80068f0 <HAL_SPI_IRQHandler+0x168>
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	f003 0301 	and.w	r3, r3, #1
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d034      	beq.n	800695a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	685a      	ldr	r2, [r3, #4]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f022 0203 	bic.w	r2, r2, #3
 80068fe:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006904:	2b00      	cmp	r3, #0
 8006906:	d011      	beq.n	800692c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800690c:	4a17      	ldr	r2, [pc, #92]	; (800696c <HAL_SPI_IRQHandler+0x1e4>)
 800690e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006914:	4618      	mov	r0, r3
 8006916:	f7fb fd83 	bl	8002420 <HAL_DMA_Abort_IT>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d005      	beq.n	800692c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006924:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006930:	2b00      	cmp	r3, #0
 8006932:	d016      	beq.n	8006962 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006938:	4a0c      	ldr	r2, [pc, #48]	; (800696c <HAL_SPI_IRQHandler+0x1e4>)
 800693a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006940:	4618      	mov	r0, r3
 8006942:	f7fb fd6d 	bl	8002420 <HAL_DMA_Abort_IT>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00a      	beq.n	8006962 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006950:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006958:	e003      	b.n	8006962 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 f808 	bl	8006970 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006960:	e000      	b.n	8006964 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8006962:	bf00      	nop
    return;
 8006964:	bf00      	nop
  }
}
 8006966:	3720      	adds	r7, #32
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	08006985 	.word	0x08006985

08006970 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006990:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2200      	movs	r2, #0
 8006996:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2200      	movs	r2, #0
 800699c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f7ff ffe6 	bl	8006970 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80069a4:	bf00      	nop
 80069a6:	3710      	adds	r7, #16
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b088      	sub	sp, #32
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	603b      	str	r3, [r7, #0]
 80069b8:	4613      	mov	r3, r2
 80069ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80069bc:	f7fb fb40 	bl	8002040 <HAL_GetTick>
 80069c0:	4602      	mov	r2, r0
 80069c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c4:	1a9b      	subs	r3, r3, r2
 80069c6:	683a      	ldr	r2, [r7, #0]
 80069c8:	4413      	add	r3, r2
 80069ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80069cc:	f7fb fb38 	bl	8002040 <HAL_GetTick>
 80069d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80069d2:	4b39      	ldr	r3, [pc, #228]	; (8006ab8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	015b      	lsls	r3, r3, #5
 80069d8:	0d1b      	lsrs	r3, r3, #20
 80069da:	69fa      	ldr	r2, [r7, #28]
 80069dc:	fb02 f303 	mul.w	r3, r2, r3
 80069e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069e2:	e054      	b.n	8006a8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ea:	d050      	beq.n	8006a8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80069ec:	f7fb fb28 	bl	8002040 <HAL_GetTick>
 80069f0:	4602      	mov	r2, r0
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	69fa      	ldr	r2, [r7, #28]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d902      	bls.n	8006a02 <SPI_WaitFlagStateUntilTimeout+0x56>
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d13d      	bne.n	8006a7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	685a      	ldr	r2, [r3, #4]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a1a:	d111      	bne.n	8006a40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a24:	d004      	beq.n	8006a30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a2e:	d107      	bne.n	8006a40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a48:	d10f      	bne.n	8006a6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a58:	601a      	str	r2, [r3, #0]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e017      	b.n	8006aae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d101      	bne.n	8006a88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006a84:	2300      	movs	r3, #0
 8006a86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	689a      	ldr	r2, [r3, #8]
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	4013      	ands	r3, r2
 8006a98:	68ba      	ldr	r2, [r7, #8]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	bf0c      	ite	eq
 8006a9e:	2301      	moveq	r3, #1
 8006aa0:	2300      	movne	r3, #0
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	79fb      	ldrb	r3, [r7, #7]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d19b      	bne.n	80069e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3720      	adds	r7, #32
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	2000000c 	.word	0x2000000c

08006abc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b086      	sub	sp, #24
 8006ac0:	af02      	add	r7, sp, #8
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ad0:	d111      	bne.n	8006af6 <SPI_EndRxTransaction+0x3a>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ada:	d004      	beq.n	8006ae6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ae4:	d107      	bne.n	8006af6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006af4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006afe:	d12a      	bne.n	8006b56 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b08:	d012      	beq.n	8006b30 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	9300      	str	r3, [sp, #0]
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	2200      	movs	r2, #0
 8006b12:	2180      	movs	r1, #128	; 0x80
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f7ff ff49 	bl	80069ac <SPI_WaitFlagStateUntilTimeout>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d02d      	beq.n	8006b7c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b24:	f043 0220 	orr.w	r2, r3, #32
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	e026      	b.n	8006b7e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	9300      	str	r3, [sp, #0]
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	2200      	movs	r2, #0
 8006b38:	2101      	movs	r1, #1
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f7ff ff36 	bl	80069ac <SPI_WaitFlagStateUntilTimeout>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d01a      	beq.n	8006b7c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b4a:	f043 0220 	orr.w	r2, r3, #32
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e013      	b.n	8006b7e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	9300      	str	r3, [sp, #0]
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	2101      	movs	r1, #1
 8006b60:	68f8      	ldr	r0, [r7, #12]
 8006b62:	f7ff ff23 	bl	80069ac <SPI_WaitFlagStateUntilTimeout>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d007      	beq.n	8006b7c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b70:	f043 0220 	orr.w	r2, r3, #32
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006b78:	2303      	movs	r3, #3
 8006b7a:	e000      	b.n	8006b7e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
	...

08006b88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b088      	sub	sp, #32
 8006b8c:	af02      	add	r7, sp, #8
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006b94:	4b1b      	ldr	r3, [pc, #108]	; (8006c04 <SPI_EndRxTxTransaction+0x7c>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a1b      	ldr	r2, [pc, #108]	; (8006c08 <SPI_EndRxTxTransaction+0x80>)
 8006b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b9e:	0d5b      	lsrs	r3, r3, #21
 8006ba0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006ba4:	fb02 f303 	mul.w	r3, r2, r3
 8006ba8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bb2:	d112      	bne.n	8006bda <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	9300      	str	r3, [sp, #0]
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	2180      	movs	r1, #128	; 0x80
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f7ff fef4 	bl	80069ac <SPI_WaitFlagStateUntilTimeout>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d016      	beq.n	8006bf8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bce:	f043 0220 	orr.w	r2, r3, #32
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	e00f      	b.n	8006bfa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00a      	beq.n	8006bf6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	3b01      	subs	r3, #1
 8006be4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bf0:	2b80      	cmp	r3, #128	; 0x80
 8006bf2:	d0f2      	beq.n	8006bda <SPI_EndRxTxTransaction+0x52>
 8006bf4:	e000      	b.n	8006bf8 <SPI_EndRxTxTransaction+0x70>
        break;
 8006bf6:	bf00      	nop
  }

  return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3718      	adds	r7, #24
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	2000000c 	.word	0x2000000c
 8006c08:	165e9f81 	.word	0x165e9f81

08006c0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d101      	bne.n	8006c1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e03f      	b.n	8006c9e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d106      	bne.n	8006c38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f7fb f8c8 	bl	8001dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2224      	movs	r2, #36	; 0x24
 8006c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68da      	ldr	r2, [r3, #12]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 f9cb 	bl	8006fec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	691a      	ldr	r2, [r3, #16]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	695a      	ldr	r2, [r3, #20]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68da      	ldr	r2, [r3, #12]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2220      	movs	r2, #32
 8006c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2220      	movs	r2, #32
 8006c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3708      	adds	r7, #8
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b08a      	sub	sp, #40	; 0x28
 8006caa:	af02      	add	r7, sp, #8
 8006cac:	60f8      	str	r0, [r7, #12]
 8006cae:	60b9      	str	r1, [r7, #8]
 8006cb0:	603b      	str	r3, [r7, #0]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	2b20      	cmp	r3, #32
 8006cc4:	d17c      	bne.n	8006dc0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d002      	beq.n	8006cd2 <HAL_UART_Transmit+0x2c>
 8006ccc:	88fb      	ldrh	r3, [r7, #6]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d101      	bne.n	8006cd6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e075      	b.n	8006dc2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d101      	bne.n	8006ce4 <HAL_UART_Transmit+0x3e>
 8006ce0:	2302      	movs	r3, #2
 8006ce2:	e06e      	b.n	8006dc2 <HAL_UART_Transmit+0x11c>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2221      	movs	r2, #33	; 0x21
 8006cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006cfa:	f7fb f9a1 	bl	8002040 <HAL_GetTick>
 8006cfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	88fa      	ldrh	r2, [r7, #6]
 8006d04:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	88fa      	ldrh	r2, [r7, #6]
 8006d0a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d14:	d108      	bne.n	8006d28 <HAL_UART_Transmit+0x82>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d104      	bne.n	8006d28 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	61bb      	str	r3, [r7, #24]
 8006d26:	e003      	b.n	8006d30 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006d38:	e02a      	b.n	8006d90 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	9300      	str	r3, [sp, #0]
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	2200      	movs	r2, #0
 8006d42:	2180      	movs	r1, #128	; 0x80
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f000 f8e2 	bl	8006f0e <UART_WaitOnFlagUntilTimeout>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d001      	beq.n	8006d54 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006d50:	2303      	movs	r3, #3
 8006d52:	e036      	b.n	8006dc2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d10b      	bne.n	8006d72 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	881b      	ldrh	r3, [r3, #0]
 8006d5e:	461a      	mov	r2, r3
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	3302      	adds	r3, #2
 8006d6e:	61bb      	str	r3, [r7, #24]
 8006d70:	e007      	b.n	8006d82 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	781a      	ldrb	r2, [r3, #0]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	3301      	adds	r3, #1
 8006d80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	b29a      	uxth	r2, r3
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d1cf      	bne.n	8006d3a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	9300      	str	r3, [sp, #0]
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	2200      	movs	r2, #0
 8006da2:	2140      	movs	r1, #64	; 0x40
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f000 f8b2 	bl	8006f0e <UART_WaitOnFlagUntilTimeout>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d001      	beq.n	8006db4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006db0:	2303      	movs	r3, #3
 8006db2:	e006      	b.n	8006dc2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2220      	movs	r2, #32
 8006db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	e000      	b.n	8006dc2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006dc0:	2302      	movs	r3, #2
  }
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3720      	adds	r7, #32
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b08a      	sub	sp, #40	; 0x28
 8006dce:	af02      	add	r7, sp, #8
 8006dd0:	60f8      	str	r0, [r7, #12]
 8006dd2:	60b9      	str	r1, [r7, #8]
 8006dd4:	603b      	str	r3, [r7, #0]
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	2b20      	cmp	r3, #32
 8006de8:	f040 808c 	bne.w	8006f04 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d002      	beq.n	8006df8 <HAL_UART_Receive+0x2e>
 8006df2:	88fb      	ldrh	r3, [r7, #6]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d101      	bne.n	8006dfc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e084      	b.n	8006f06 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d101      	bne.n	8006e0a <HAL_UART_Receive+0x40>
 8006e06:	2302      	movs	r3, #2
 8006e08:	e07d      	b.n	8006f06 <HAL_UART_Receive+0x13c>
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2222      	movs	r2, #34	; 0x22
 8006e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e26:	f7fb f90b 	bl	8002040 <HAL_GetTick>
 8006e2a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	88fa      	ldrh	r2, [r7, #6]
 8006e30:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	88fa      	ldrh	r2, [r7, #6]
 8006e36:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e40:	d108      	bne.n	8006e54 <HAL_UART_Receive+0x8a>
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d104      	bne.n	8006e54 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	61bb      	str	r3, [r7, #24]
 8006e52:	e003      	b.n	8006e5c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006e64:	e043      	b.n	8006eee <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	9300      	str	r3, [sp, #0]
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	2120      	movs	r1, #32
 8006e70:	68f8      	ldr	r0, [r7, #12]
 8006e72:	f000 f84c 	bl	8006f0e <UART_WaitOnFlagUntilTimeout>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d001      	beq.n	8006e80 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	e042      	b.n	8006f06 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d10c      	bne.n	8006ea0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	3302      	adds	r3, #2
 8006e9c:	61bb      	str	r3, [r7, #24]
 8006e9e:	e01f      	b.n	8006ee0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ea8:	d007      	beq.n	8006eba <HAL_UART_Receive+0xf0>
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d10a      	bne.n	8006ec8 <HAL_UART_Receive+0xfe>
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d106      	bne.n	8006ec8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	b2da      	uxtb	r2, r3
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	701a      	strb	r2, [r3, #0]
 8006ec6:	e008      	b.n	8006eda <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ed4:	b2da      	uxtb	r2, r3
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	3301      	adds	r3, #1
 8006ede:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d1b6      	bne.n	8006e66 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2220      	movs	r2, #32
 8006efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006f00:	2300      	movs	r3, #0
 8006f02:	e000      	b.n	8006f06 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8006f04:	2302      	movs	r3, #2
  }
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3720      	adds	r7, #32
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b090      	sub	sp, #64	; 0x40
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	60f8      	str	r0, [r7, #12]
 8006f16:	60b9      	str	r1, [r7, #8]
 8006f18:	603b      	str	r3, [r7, #0]
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f1e:	e050      	b.n	8006fc2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f26:	d04c      	beq.n	8006fc2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d007      	beq.n	8006f3e <UART_WaitOnFlagUntilTimeout+0x30>
 8006f2e:	f7fb f887 	bl	8002040 <HAL_GetTick>
 8006f32:	4602      	mov	r2, r0
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d241      	bcs.n	8006fc2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	330c      	adds	r3, #12
 8006f44:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f48:	e853 3f00 	ldrex	r3, [r3]
 8006f4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	330c      	adds	r3, #12
 8006f5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f5e:	637a      	str	r2, [r7, #52]	; 0x34
 8006f60:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f66:	e841 2300 	strex	r3, r2, [r1]
 8006f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d1e5      	bne.n	8006f3e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	3314      	adds	r3, #20
 8006f78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	e853 3f00 	ldrex	r3, [r3]
 8006f80:	613b      	str	r3, [r7, #16]
   return(result);
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	f023 0301 	bic.w	r3, r3, #1
 8006f88:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	3314      	adds	r3, #20
 8006f90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f92:	623a      	str	r2, [r7, #32]
 8006f94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f96:	69f9      	ldr	r1, [r7, #28]
 8006f98:	6a3a      	ldr	r2, [r7, #32]
 8006f9a:	e841 2300 	strex	r3, r2, [r1]
 8006f9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d1e5      	bne.n	8006f72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2220      	movs	r2, #32
 8006faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2220      	movs	r2, #32
 8006fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e00f      	b.n	8006fe2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	4013      	ands	r3, r2
 8006fcc:	68ba      	ldr	r2, [r7, #8]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	bf0c      	ite	eq
 8006fd2:	2301      	moveq	r3, #1
 8006fd4:	2300      	movne	r3, #0
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	461a      	mov	r2, r3
 8006fda:	79fb      	ldrb	r3, [r7, #7]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d09f      	beq.n	8006f20 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3740      	adds	r7, #64	; 0x40
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
	...

08006fec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ff0:	b0c0      	sub	sp, #256	; 0x100
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007008:	68d9      	ldr	r1, [r3, #12]
 800700a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	ea40 0301 	orr.w	r3, r0, r1
 8007014:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800701a:	689a      	ldr	r2, [r3, #8]
 800701c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	431a      	orrs	r2, r3
 8007024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	431a      	orrs	r2, r3
 800702c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007030:	69db      	ldr	r3, [r3, #28]
 8007032:	4313      	orrs	r3, r2
 8007034:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007044:	f021 010c 	bic.w	r1, r1, #12
 8007048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007052:	430b      	orrs	r3, r1
 8007054:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	695b      	ldr	r3, [r3, #20]
 800705e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007066:	6999      	ldr	r1, [r3, #24]
 8007068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	ea40 0301 	orr.w	r3, r0, r1
 8007072:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	4b8f      	ldr	r3, [pc, #572]	; (80072b8 <UART_SetConfig+0x2cc>)
 800707c:	429a      	cmp	r2, r3
 800707e:	d005      	beq.n	800708c <UART_SetConfig+0xa0>
 8007080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	4b8d      	ldr	r3, [pc, #564]	; (80072bc <UART_SetConfig+0x2d0>)
 8007088:	429a      	cmp	r2, r3
 800708a:	d104      	bne.n	8007096 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800708c:	f7fe fa22 	bl	80054d4 <HAL_RCC_GetPCLK2Freq>
 8007090:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007094:	e003      	b.n	800709e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007096:	f7fe fa09 	bl	80054ac <HAL_RCC_GetPCLK1Freq>
 800709a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800709e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070a2:	69db      	ldr	r3, [r3, #28]
 80070a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070a8:	f040 810c 	bne.w	80072c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80070ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070b0:	2200      	movs	r2, #0
 80070b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80070b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80070ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80070be:	4622      	mov	r2, r4
 80070c0:	462b      	mov	r3, r5
 80070c2:	1891      	adds	r1, r2, r2
 80070c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80070c6:	415b      	adcs	r3, r3
 80070c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80070ce:	4621      	mov	r1, r4
 80070d0:	eb12 0801 	adds.w	r8, r2, r1
 80070d4:	4629      	mov	r1, r5
 80070d6:	eb43 0901 	adc.w	r9, r3, r1
 80070da:	f04f 0200 	mov.w	r2, #0
 80070de:	f04f 0300 	mov.w	r3, #0
 80070e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80070e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80070ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80070ee:	4690      	mov	r8, r2
 80070f0:	4699      	mov	r9, r3
 80070f2:	4623      	mov	r3, r4
 80070f4:	eb18 0303 	adds.w	r3, r8, r3
 80070f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80070fc:	462b      	mov	r3, r5
 80070fe:	eb49 0303 	adc.w	r3, r9, r3
 8007102:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007112:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007116:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800711a:	460b      	mov	r3, r1
 800711c:	18db      	adds	r3, r3, r3
 800711e:	653b      	str	r3, [r7, #80]	; 0x50
 8007120:	4613      	mov	r3, r2
 8007122:	eb42 0303 	adc.w	r3, r2, r3
 8007126:	657b      	str	r3, [r7, #84]	; 0x54
 8007128:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800712c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007130:	f7f9 f868 	bl	8000204 <__aeabi_uldivmod>
 8007134:	4602      	mov	r2, r0
 8007136:	460b      	mov	r3, r1
 8007138:	4b61      	ldr	r3, [pc, #388]	; (80072c0 <UART_SetConfig+0x2d4>)
 800713a:	fba3 2302 	umull	r2, r3, r3, r2
 800713e:	095b      	lsrs	r3, r3, #5
 8007140:	011c      	lsls	r4, r3, #4
 8007142:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007146:	2200      	movs	r2, #0
 8007148:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800714c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007150:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007154:	4642      	mov	r2, r8
 8007156:	464b      	mov	r3, r9
 8007158:	1891      	adds	r1, r2, r2
 800715a:	64b9      	str	r1, [r7, #72]	; 0x48
 800715c:	415b      	adcs	r3, r3
 800715e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007160:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007164:	4641      	mov	r1, r8
 8007166:	eb12 0a01 	adds.w	sl, r2, r1
 800716a:	4649      	mov	r1, r9
 800716c:	eb43 0b01 	adc.w	fp, r3, r1
 8007170:	f04f 0200 	mov.w	r2, #0
 8007174:	f04f 0300 	mov.w	r3, #0
 8007178:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800717c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007180:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007184:	4692      	mov	sl, r2
 8007186:	469b      	mov	fp, r3
 8007188:	4643      	mov	r3, r8
 800718a:	eb1a 0303 	adds.w	r3, sl, r3
 800718e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007192:	464b      	mov	r3, r9
 8007194:	eb4b 0303 	adc.w	r3, fp, r3
 8007198:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800719c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80071a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80071ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80071b0:	460b      	mov	r3, r1
 80071b2:	18db      	adds	r3, r3, r3
 80071b4:	643b      	str	r3, [r7, #64]	; 0x40
 80071b6:	4613      	mov	r3, r2
 80071b8:	eb42 0303 	adc.w	r3, r2, r3
 80071bc:	647b      	str	r3, [r7, #68]	; 0x44
 80071be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80071c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80071c6:	f7f9 f81d 	bl	8000204 <__aeabi_uldivmod>
 80071ca:	4602      	mov	r2, r0
 80071cc:	460b      	mov	r3, r1
 80071ce:	4611      	mov	r1, r2
 80071d0:	4b3b      	ldr	r3, [pc, #236]	; (80072c0 <UART_SetConfig+0x2d4>)
 80071d2:	fba3 2301 	umull	r2, r3, r3, r1
 80071d6:	095b      	lsrs	r3, r3, #5
 80071d8:	2264      	movs	r2, #100	; 0x64
 80071da:	fb02 f303 	mul.w	r3, r2, r3
 80071de:	1acb      	subs	r3, r1, r3
 80071e0:	00db      	lsls	r3, r3, #3
 80071e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80071e6:	4b36      	ldr	r3, [pc, #216]	; (80072c0 <UART_SetConfig+0x2d4>)
 80071e8:	fba3 2302 	umull	r2, r3, r3, r2
 80071ec:	095b      	lsrs	r3, r3, #5
 80071ee:	005b      	lsls	r3, r3, #1
 80071f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80071f4:	441c      	add	r4, r3
 80071f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071fa:	2200      	movs	r2, #0
 80071fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007200:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007204:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007208:	4642      	mov	r2, r8
 800720a:	464b      	mov	r3, r9
 800720c:	1891      	adds	r1, r2, r2
 800720e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007210:	415b      	adcs	r3, r3
 8007212:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007214:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007218:	4641      	mov	r1, r8
 800721a:	1851      	adds	r1, r2, r1
 800721c:	6339      	str	r1, [r7, #48]	; 0x30
 800721e:	4649      	mov	r1, r9
 8007220:	414b      	adcs	r3, r1
 8007222:	637b      	str	r3, [r7, #52]	; 0x34
 8007224:	f04f 0200 	mov.w	r2, #0
 8007228:	f04f 0300 	mov.w	r3, #0
 800722c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007230:	4659      	mov	r1, fp
 8007232:	00cb      	lsls	r3, r1, #3
 8007234:	4651      	mov	r1, sl
 8007236:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800723a:	4651      	mov	r1, sl
 800723c:	00ca      	lsls	r2, r1, #3
 800723e:	4610      	mov	r0, r2
 8007240:	4619      	mov	r1, r3
 8007242:	4603      	mov	r3, r0
 8007244:	4642      	mov	r2, r8
 8007246:	189b      	adds	r3, r3, r2
 8007248:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800724c:	464b      	mov	r3, r9
 800724e:	460a      	mov	r2, r1
 8007250:	eb42 0303 	adc.w	r3, r2, r3
 8007254:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007264:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007268:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800726c:	460b      	mov	r3, r1
 800726e:	18db      	adds	r3, r3, r3
 8007270:	62bb      	str	r3, [r7, #40]	; 0x28
 8007272:	4613      	mov	r3, r2
 8007274:	eb42 0303 	adc.w	r3, r2, r3
 8007278:	62fb      	str	r3, [r7, #44]	; 0x2c
 800727a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800727e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007282:	f7f8 ffbf 	bl	8000204 <__aeabi_uldivmod>
 8007286:	4602      	mov	r2, r0
 8007288:	460b      	mov	r3, r1
 800728a:	4b0d      	ldr	r3, [pc, #52]	; (80072c0 <UART_SetConfig+0x2d4>)
 800728c:	fba3 1302 	umull	r1, r3, r3, r2
 8007290:	095b      	lsrs	r3, r3, #5
 8007292:	2164      	movs	r1, #100	; 0x64
 8007294:	fb01 f303 	mul.w	r3, r1, r3
 8007298:	1ad3      	subs	r3, r2, r3
 800729a:	00db      	lsls	r3, r3, #3
 800729c:	3332      	adds	r3, #50	; 0x32
 800729e:	4a08      	ldr	r2, [pc, #32]	; (80072c0 <UART_SetConfig+0x2d4>)
 80072a0:	fba2 2303 	umull	r2, r3, r2, r3
 80072a4:	095b      	lsrs	r3, r3, #5
 80072a6:	f003 0207 	and.w	r2, r3, #7
 80072aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4422      	add	r2, r4
 80072b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80072b4:	e106      	b.n	80074c4 <UART_SetConfig+0x4d8>
 80072b6:	bf00      	nop
 80072b8:	40011000 	.word	0x40011000
 80072bc:	40011400 	.word	0x40011400
 80072c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80072c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072c8:	2200      	movs	r2, #0
 80072ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80072ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80072d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80072d6:	4642      	mov	r2, r8
 80072d8:	464b      	mov	r3, r9
 80072da:	1891      	adds	r1, r2, r2
 80072dc:	6239      	str	r1, [r7, #32]
 80072de:	415b      	adcs	r3, r3
 80072e0:	627b      	str	r3, [r7, #36]	; 0x24
 80072e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80072e6:	4641      	mov	r1, r8
 80072e8:	1854      	adds	r4, r2, r1
 80072ea:	4649      	mov	r1, r9
 80072ec:	eb43 0501 	adc.w	r5, r3, r1
 80072f0:	f04f 0200 	mov.w	r2, #0
 80072f4:	f04f 0300 	mov.w	r3, #0
 80072f8:	00eb      	lsls	r3, r5, #3
 80072fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80072fe:	00e2      	lsls	r2, r4, #3
 8007300:	4614      	mov	r4, r2
 8007302:	461d      	mov	r5, r3
 8007304:	4643      	mov	r3, r8
 8007306:	18e3      	adds	r3, r4, r3
 8007308:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800730c:	464b      	mov	r3, r9
 800730e:	eb45 0303 	adc.w	r3, r5, r3
 8007312:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007322:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007326:	f04f 0200 	mov.w	r2, #0
 800732a:	f04f 0300 	mov.w	r3, #0
 800732e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007332:	4629      	mov	r1, r5
 8007334:	008b      	lsls	r3, r1, #2
 8007336:	4621      	mov	r1, r4
 8007338:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800733c:	4621      	mov	r1, r4
 800733e:	008a      	lsls	r2, r1, #2
 8007340:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007344:	f7f8 ff5e 	bl	8000204 <__aeabi_uldivmod>
 8007348:	4602      	mov	r2, r0
 800734a:	460b      	mov	r3, r1
 800734c:	4b60      	ldr	r3, [pc, #384]	; (80074d0 <UART_SetConfig+0x4e4>)
 800734e:	fba3 2302 	umull	r2, r3, r3, r2
 8007352:	095b      	lsrs	r3, r3, #5
 8007354:	011c      	lsls	r4, r3, #4
 8007356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800735a:	2200      	movs	r2, #0
 800735c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007360:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007364:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007368:	4642      	mov	r2, r8
 800736a:	464b      	mov	r3, r9
 800736c:	1891      	adds	r1, r2, r2
 800736e:	61b9      	str	r1, [r7, #24]
 8007370:	415b      	adcs	r3, r3
 8007372:	61fb      	str	r3, [r7, #28]
 8007374:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007378:	4641      	mov	r1, r8
 800737a:	1851      	adds	r1, r2, r1
 800737c:	6139      	str	r1, [r7, #16]
 800737e:	4649      	mov	r1, r9
 8007380:	414b      	adcs	r3, r1
 8007382:	617b      	str	r3, [r7, #20]
 8007384:	f04f 0200 	mov.w	r2, #0
 8007388:	f04f 0300 	mov.w	r3, #0
 800738c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007390:	4659      	mov	r1, fp
 8007392:	00cb      	lsls	r3, r1, #3
 8007394:	4651      	mov	r1, sl
 8007396:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800739a:	4651      	mov	r1, sl
 800739c:	00ca      	lsls	r2, r1, #3
 800739e:	4610      	mov	r0, r2
 80073a0:	4619      	mov	r1, r3
 80073a2:	4603      	mov	r3, r0
 80073a4:	4642      	mov	r2, r8
 80073a6:	189b      	adds	r3, r3, r2
 80073a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80073ac:	464b      	mov	r3, r9
 80073ae:	460a      	mov	r2, r1
 80073b0:	eb42 0303 	adc.w	r3, r2, r3
 80073b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80073b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80073c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80073c4:	f04f 0200 	mov.w	r2, #0
 80073c8:	f04f 0300 	mov.w	r3, #0
 80073cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80073d0:	4649      	mov	r1, r9
 80073d2:	008b      	lsls	r3, r1, #2
 80073d4:	4641      	mov	r1, r8
 80073d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073da:	4641      	mov	r1, r8
 80073dc:	008a      	lsls	r2, r1, #2
 80073de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80073e2:	f7f8 ff0f 	bl	8000204 <__aeabi_uldivmod>
 80073e6:	4602      	mov	r2, r0
 80073e8:	460b      	mov	r3, r1
 80073ea:	4611      	mov	r1, r2
 80073ec:	4b38      	ldr	r3, [pc, #224]	; (80074d0 <UART_SetConfig+0x4e4>)
 80073ee:	fba3 2301 	umull	r2, r3, r3, r1
 80073f2:	095b      	lsrs	r3, r3, #5
 80073f4:	2264      	movs	r2, #100	; 0x64
 80073f6:	fb02 f303 	mul.w	r3, r2, r3
 80073fa:	1acb      	subs	r3, r1, r3
 80073fc:	011b      	lsls	r3, r3, #4
 80073fe:	3332      	adds	r3, #50	; 0x32
 8007400:	4a33      	ldr	r2, [pc, #204]	; (80074d0 <UART_SetConfig+0x4e4>)
 8007402:	fba2 2303 	umull	r2, r3, r2, r3
 8007406:	095b      	lsrs	r3, r3, #5
 8007408:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800740c:	441c      	add	r4, r3
 800740e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007412:	2200      	movs	r2, #0
 8007414:	673b      	str	r3, [r7, #112]	; 0x70
 8007416:	677a      	str	r2, [r7, #116]	; 0x74
 8007418:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800741c:	4642      	mov	r2, r8
 800741e:	464b      	mov	r3, r9
 8007420:	1891      	adds	r1, r2, r2
 8007422:	60b9      	str	r1, [r7, #8]
 8007424:	415b      	adcs	r3, r3
 8007426:	60fb      	str	r3, [r7, #12]
 8007428:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800742c:	4641      	mov	r1, r8
 800742e:	1851      	adds	r1, r2, r1
 8007430:	6039      	str	r1, [r7, #0]
 8007432:	4649      	mov	r1, r9
 8007434:	414b      	adcs	r3, r1
 8007436:	607b      	str	r3, [r7, #4]
 8007438:	f04f 0200 	mov.w	r2, #0
 800743c:	f04f 0300 	mov.w	r3, #0
 8007440:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007444:	4659      	mov	r1, fp
 8007446:	00cb      	lsls	r3, r1, #3
 8007448:	4651      	mov	r1, sl
 800744a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800744e:	4651      	mov	r1, sl
 8007450:	00ca      	lsls	r2, r1, #3
 8007452:	4610      	mov	r0, r2
 8007454:	4619      	mov	r1, r3
 8007456:	4603      	mov	r3, r0
 8007458:	4642      	mov	r2, r8
 800745a:	189b      	adds	r3, r3, r2
 800745c:	66bb      	str	r3, [r7, #104]	; 0x68
 800745e:	464b      	mov	r3, r9
 8007460:	460a      	mov	r2, r1
 8007462:	eb42 0303 	adc.w	r3, r2, r3
 8007466:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	663b      	str	r3, [r7, #96]	; 0x60
 8007472:	667a      	str	r2, [r7, #100]	; 0x64
 8007474:	f04f 0200 	mov.w	r2, #0
 8007478:	f04f 0300 	mov.w	r3, #0
 800747c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007480:	4649      	mov	r1, r9
 8007482:	008b      	lsls	r3, r1, #2
 8007484:	4641      	mov	r1, r8
 8007486:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800748a:	4641      	mov	r1, r8
 800748c:	008a      	lsls	r2, r1, #2
 800748e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007492:	f7f8 feb7 	bl	8000204 <__aeabi_uldivmod>
 8007496:	4602      	mov	r2, r0
 8007498:	460b      	mov	r3, r1
 800749a:	4b0d      	ldr	r3, [pc, #52]	; (80074d0 <UART_SetConfig+0x4e4>)
 800749c:	fba3 1302 	umull	r1, r3, r3, r2
 80074a0:	095b      	lsrs	r3, r3, #5
 80074a2:	2164      	movs	r1, #100	; 0x64
 80074a4:	fb01 f303 	mul.w	r3, r1, r3
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	011b      	lsls	r3, r3, #4
 80074ac:	3332      	adds	r3, #50	; 0x32
 80074ae:	4a08      	ldr	r2, [pc, #32]	; (80074d0 <UART_SetConfig+0x4e4>)
 80074b0:	fba2 2303 	umull	r2, r3, r2, r3
 80074b4:	095b      	lsrs	r3, r3, #5
 80074b6:	f003 020f 	and.w	r2, r3, #15
 80074ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4422      	add	r2, r4
 80074c2:	609a      	str	r2, [r3, #8]
}
 80074c4:	bf00      	nop
 80074c6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80074ca:	46bd      	mov	sp, r7
 80074cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074d0:	51eb851f 	.word	0x51eb851f

080074d4 <memset>:
 80074d4:	4402      	add	r2, r0
 80074d6:	4603      	mov	r3, r0
 80074d8:	4293      	cmp	r3, r2
 80074da:	d100      	bne.n	80074de <memset+0xa>
 80074dc:	4770      	bx	lr
 80074de:	f803 1b01 	strb.w	r1, [r3], #1
 80074e2:	e7f9      	b.n	80074d8 <memset+0x4>

080074e4 <__libc_init_array>:
 80074e4:	b570      	push	{r4, r5, r6, lr}
 80074e6:	4d0d      	ldr	r5, [pc, #52]	; (800751c <__libc_init_array+0x38>)
 80074e8:	4c0d      	ldr	r4, [pc, #52]	; (8007520 <__libc_init_array+0x3c>)
 80074ea:	1b64      	subs	r4, r4, r5
 80074ec:	10a4      	asrs	r4, r4, #2
 80074ee:	2600      	movs	r6, #0
 80074f0:	42a6      	cmp	r6, r4
 80074f2:	d109      	bne.n	8007508 <__libc_init_array+0x24>
 80074f4:	4d0b      	ldr	r5, [pc, #44]	; (8007524 <__libc_init_array+0x40>)
 80074f6:	4c0c      	ldr	r4, [pc, #48]	; (8007528 <__libc_init_array+0x44>)
 80074f8:	f000 f818 	bl	800752c <_init>
 80074fc:	1b64      	subs	r4, r4, r5
 80074fe:	10a4      	asrs	r4, r4, #2
 8007500:	2600      	movs	r6, #0
 8007502:	42a6      	cmp	r6, r4
 8007504:	d105      	bne.n	8007512 <__libc_init_array+0x2e>
 8007506:	bd70      	pop	{r4, r5, r6, pc}
 8007508:	f855 3b04 	ldr.w	r3, [r5], #4
 800750c:	4798      	blx	r3
 800750e:	3601      	adds	r6, #1
 8007510:	e7ee      	b.n	80074f0 <__libc_init_array+0xc>
 8007512:	f855 3b04 	ldr.w	r3, [r5], #4
 8007516:	4798      	blx	r3
 8007518:	3601      	adds	r6, #1
 800751a:	e7f2      	b.n	8007502 <__libc_init_array+0x1e>
 800751c:	08007a20 	.word	0x08007a20
 8007520:	08007a20 	.word	0x08007a20
 8007524:	08007a20 	.word	0x08007a20
 8007528:	08007a24 	.word	0x08007a24

0800752c <_init>:
 800752c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800752e:	bf00      	nop
 8007530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007532:	bc08      	pop	{r3}
 8007534:	469e      	mov	lr, r3
 8007536:	4770      	bx	lr

08007538 <_fini>:
 8007538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800753a:	bf00      	nop
 800753c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800753e:	bc08      	pop	{r3}
 8007540:	469e      	mov	lr, r3
 8007542:	4770      	bx	lr
