
STLib_MegaProject1_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025e0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080026ec  080026ec  000126ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800271c  0800271c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  0800271c  0800271c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800271c  0800271c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800271c  0800271c  0001271c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002720  08002720  00012720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08002724  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000064  08002788  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08002788  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY
 13 .debug_info   000067e5  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001abb  00000000  00000000  000268b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000768  00000000  00000000  00028370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000576  00000000  00000000  00028ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000167cf  00000000  00000000  0002904e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000095b4  00000000  00000000  0003f81d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007eefb  00000000  00000000  00048dd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001bb4  00000000  00000000  000c7ccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000093  00000000  00000000  000c9880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	080026d4 	.word	0x080026d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	080026d4 	.word	0x080026d4

0800014c <IsBzrConfigValid>:
#include "BZR_prv.h"

/* Private Functions */

static uint8_t IsBzrConfigValid(BZR_t *BzrConfig)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    if ((BzrConfig->Port > GPIOE) || (BzrConfig->Port < GPIOA) || (BzrConfig->Pin > GPIO_PIN_15) || (BzrConfig->Pin < GPIO_PIN_0)
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	4a0e      	ldr	r2, [pc, #56]	; (8000194 <IsBzrConfigValid+0x48>)
 800015a:	4293      	cmp	r3, r2
 800015c:	d811      	bhi.n	8000182 <IsBzrConfigValid+0x36>
 800015e:	687b      	ldr	r3, [r7, #4]
 8000160:	681b      	ldr	r3, [r3, #0]
 8000162:	4a0d      	ldr	r2, [pc, #52]	; (8000198 <IsBzrConfigValid+0x4c>)
 8000164:	4293      	cmp	r3, r2
 8000166:	d90c      	bls.n	8000182 <IsBzrConfigValid+0x36>
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	889b      	ldrh	r3, [r3, #4]
 800016c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000170:	d807      	bhi.n	8000182 <IsBzrConfigValid+0x36>
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	889b      	ldrh	r3, [r3, #4]
 8000176:	2b00      	cmp	r3, #0
 8000178:	d003      	beq.n	8000182 <IsBzrConfigValid+0x36>
        || (BzrConfig->ConnectionType > BZR_SOURCE_CONNECTION) || (BzrConfig->ConnectionType < BZR_SINK_CONNECTION)
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	799b      	ldrb	r3, [r3, #6]
 800017e:	2b01      	cmp	r3, #1
 8000180:	d901      	bls.n	8000186 <IsBzrConfigValid+0x3a>
        )
    {
        return INVALID;
 8000182:	2300      	movs	r3, #0
 8000184:	e000      	b.n	8000188 <IsBzrConfigValid+0x3c>
    }
    
    return VALID;
 8000186:	2301      	movs	r3, #1
}
 8000188:	4618      	mov	r0, r3
 800018a:	370c      	adds	r7, #12
 800018c:	46bd      	mov	sp, r7
 800018e:	bc80      	pop	{r7}
 8000190:	4770      	bx	lr
 8000192:	bf00      	nop
 8000194:	40011800 	.word	0x40011800
 8000198:	400107ff 	.word	0x400107ff

0800019c <BZR_u8Beep>:

    return OK;
}

uint8_t BZR_u8Beep(BZR_t *BzrConfig, uint16_t Copy_u16BeepsNumber, uint16_t Copy_u16BeepTimeMs)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b084      	sub	sp, #16
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]
 80001a4:	460b      	mov	r3, r1
 80001a6:	807b      	strh	r3, [r7, #2]
 80001a8:	4613      	mov	r3, r2
 80001aa:	803b      	strh	r3, [r7, #0]
    /* Check buzzer config, then early return if it's not valid */
    if (NULL == BzrConfig)
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d101      	bne.n	80001b6 <BZR_u8Beep+0x1a>
    {
        return NULL_PTR_ERR;
 80001b2:	2303      	movs	r3, #3
 80001b4:	e031      	b.n	800021a <BZR_u8Beep+0x7e>
    }
    else if (!IsBzrConfigValid(BzrConfig))
 80001b6:	6878      	ldr	r0, [r7, #4]
 80001b8:	f7ff ffc8 	bl	800014c <IsBzrConfigValid>
 80001bc:	4603      	mov	r3, r0
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d101      	bne.n	80001c6 <BZR_u8Beep+0x2a>
    {
        return NOK;
 80001c2:	2302      	movs	r3, #2
 80001c4:	e029      	b.n	800021a <BZR_u8Beep+0x7e>
    }

    for (uint16_t LoopCounter = 0; LoopCounter < Copy_u16BeepsNumber; LoopCounter++)
 80001c6:	2300      	movs	r3, #0
 80001c8:	81fb      	strh	r3, [r7, #14]
 80001ca:	e021      	b.n	8000210 <BZR_u8Beep+0x74>
    {
        /* Turn the buzzer on. The pin value depends on the connection type */
        HAL_GPIO_WritePin(BzrConfig->Port, BzrConfig->Pin, BzrConfig->ConnectionType);
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	6818      	ldr	r0, [r3, #0]
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	8899      	ldrh	r1, [r3, #4]
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	799b      	ldrb	r3, [r3, #6]
 80001d8:	461a      	mov	r2, r3
 80001da:	f001 f901 	bl	80013e0 <HAL_GPIO_WritePin>
        /* Keep the buzzer on for the desired amount of time */
        HAL_Delay(Copy_u16BeepTimeMs);
 80001de:	883b      	ldrh	r3, [r7, #0]
 80001e0:	4618      	mov	r0, r3
 80001e2:	f000 fdcf 	bl	8000d84 <HAL_Delay>
        /* Turn the buzzer off. The pin value depends on the connection type */
        HAL_GPIO_WritePin(BzrConfig->Port, BzrConfig->Pin, !(BzrConfig->ConnectionType));
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	6818      	ldr	r0, [r3, #0]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	8899      	ldrh	r1, [r3, #4]
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	799b      	ldrb	r3, [r3, #6]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	bf0c      	ite	eq
 80001f6:	2301      	moveq	r3, #1
 80001f8:	2300      	movne	r3, #0
 80001fa:	b2db      	uxtb	r3, r3
 80001fc:	461a      	mov	r2, r3
 80001fe:	f001 f8ef 	bl	80013e0 <HAL_GPIO_WritePin>
        /* Keep the buzzer off for the desired amount of time */
        HAL_Delay(Copy_u16BeepTimeMs);
 8000202:	883b      	ldrh	r3, [r7, #0]
 8000204:	4618      	mov	r0, r3
 8000206:	f000 fdbd 	bl	8000d84 <HAL_Delay>
    for (uint16_t LoopCounter = 0; LoopCounter < Copy_u16BeepsNumber; LoopCounter++)
 800020a:	89fb      	ldrh	r3, [r7, #14]
 800020c:	3301      	adds	r3, #1
 800020e:	81fb      	strh	r3, [r7, #14]
 8000210:	89fa      	ldrh	r2, [r7, #14]
 8000212:	887b      	ldrh	r3, [r7, #2]
 8000214:	429a      	cmp	r2, r3
 8000216:	d3d9      	bcc.n	80001cc <BZR_u8Beep+0x30>
    }
    
    return OK;
 8000218:	2301      	movs	r3, #1
}
 800021a:	4618      	mov	r0, r3
 800021c:	3710      	adds	r7, #16
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}

08000222 <CLCD_voidSendCommand>:
/* Private Variables */

/* Public Functions Prototype */

void CLCD_voidSendCommand(const CLCD_Config_t *Copy_CLCDConfig, uint8_t Copy_u8Command)
{
 8000222:	b590      	push	{r4, r7, lr}
 8000224:	b085      	sub	sp, #20
 8000226:	af00      	add	r7, sp, #0
 8000228:	6078      	str	r0, [r7, #4]
 800022a:	460b      	mov	r3, r1
 800022c:	70fb      	strb	r3, [r7, #3]
    uint8_t Local_u8HigherBitShift = (CLCD_MODE_4BIT == Copy_CLCDConfig->Mode)? 4 : 0;
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	7c1b      	ldrb	r3, [r3, #16]
 8000232:	2b04      	cmp	r3, #4
 8000234:	d101      	bne.n	800023a <CLCD_voidSendCommand+0x18>
 8000236:	2304      	movs	r3, #4
 8000238:	e000      	b.n	800023c <CLCD_voidSendCommand+0x1a>
 800023a:	2300      	movs	r3, #0
 800023c:	737b      	strb	r3, [r7, #13]
    /* Set RS pin to low for command */
    HAL_GPIO_WritePin(Copy_CLCDConfig->CtrlPorts[0], Copy_CLCDConfig->CtrlPins[0], GPIO_PIN_RESET);
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	685b      	ldr	r3, [r3, #4]
 8000242:	6818      	ldr	r0, [r3, #0]
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	68db      	ldr	r3, [r3, #12]
 8000248:	881b      	ldrh	r3, [r3, #0]
 800024a:	2200      	movs	r2, #0
 800024c:	4619      	mov	r1, r3
 800024e:	f001 f8c7 	bl	80013e0 <HAL_GPIO_WritePin>
    /* Set RW pin to low for write */
    // HAL_GPIO_WritePin(Copy_CLCDConfig->CtrlPorts[1], Copy_CLCDConfig->CtrlPins[1], GPIO_PIN_RESET);
    /* Set command(higher 4 bits in case of 4-bit mode) to data pins */
    for (uint8_t LoopCounter = 0; LoopCounter < Copy_CLCDConfig->Mode; LoopCounter++)
 8000252:	2300      	movs	r3, #0
 8000254:	73fb      	strb	r3, [r7, #15]
 8000256:	e01c      	b.n	8000292 <CLCD_voidSendCommand+0x70>
    {
        HAL_GPIO_WritePin(Copy_CLCDConfig->DataPorts[LoopCounter], Copy_CLCDConfig->DataPins[LoopCounter], GET_BIT(Copy_u8Command, (LoopCounter + Local_u8HigherBitShift)));
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	681a      	ldr	r2, [r3, #0]
 800025c:	7bfb      	ldrb	r3, [r7, #15]
 800025e:	009b      	lsls	r3, r3, #2
 8000260:	4413      	add	r3, r2
 8000262:	6818      	ldr	r0, [r3, #0]
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	689a      	ldr	r2, [r3, #8]
 8000268:	7bfb      	ldrb	r3, [r7, #15]
 800026a:	005b      	lsls	r3, r3, #1
 800026c:	4413      	add	r3, r2
 800026e:	881c      	ldrh	r4, [r3, #0]
 8000270:	78fa      	ldrb	r2, [r7, #3]
 8000272:	7bf9      	ldrb	r1, [r7, #15]
 8000274:	7b7b      	ldrb	r3, [r7, #13]
 8000276:	440b      	add	r3, r1
 8000278:	fa42 f303 	asr.w	r3, r2, r3
 800027c:	b2db      	uxtb	r3, r3
 800027e:	f003 0301 	and.w	r3, r3, #1
 8000282:	b2db      	uxtb	r3, r3
 8000284:	461a      	mov	r2, r3
 8000286:	4621      	mov	r1, r4
 8000288:	f001 f8aa 	bl	80013e0 <HAL_GPIO_WritePin>
    for (uint8_t LoopCounter = 0; LoopCounter < Copy_CLCDConfig->Mode; LoopCounter++)
 800028c:	7bfb      	ldrb	r3, [r7, #15]
 800028e:	3301      	adds	r3, #1
 8000290:	73fb      	strb	r3, [r7, #15]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	7c1b      	ldrb	r3, [r3, #16]
 8000296:	7bfa      	ldrb	r2, [r7, #15]
 8000298:	429a      	cmp	r2, r3
 800029a:	d3dd      	bcc.n	8000258 <CLCD_voidSendCommand+0x36>
    }
    /* Send enable pulse */
    HAL_GPIO_WritePin(Copy_CLCDConfig->CtrlPorts[2], Copy_CLCDConfig->CtrlPins[2], GPIO_PIN_SET);
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	685b      	ldr	r3, [r3, #4]
 80002a0:	3308      	adds	r3, #8
 80002a2:	6818      	ldr	r0, [r3, #0]
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	68db      	ldr	r3, [r3, #12]
 80002a8:	3304      	adds	r3, #4
 80002aa:	881b      	ldrh	r3, [r3, #0]
 80002ac:	2201      	movs	r2, #1
 80002ae:	4619      	mov	r1, r3
 80002b0:	f001 f896 	bl	80013e0 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80002b4:	2001      	movs	r0, #1
 80002b6:	f000 fd65 	bl	8000d84 <HAL_Delay>
    HAL_GPIO_WritePin(Copy_CLCDConfig->CtrlPorts[2], Copy_CLCDConfig->CtrlPins[2], GPIO_PIN_RESET);
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	685b      	ldr	r3, [r3, #4]
 80002be:	3308      	adds	r3, #8
 80002c0:	6818      	ldr	r0, [r3, #0]
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	68db      	ldr	r3, [r3, #12]
 80002c6:	3304      	adds	r3, #4
 80002c8:	881b      	ldrh	r3, [r3, #0]
 80002ca:	2200      	movs	r2, #0
 80002cc:	4619      	mov	r1, r3
 80002ce:	f001 f887 	bl	80013e0 <HAL_GPIO_WritePin>

    if (CLCD_MODE_4BIT == Copy_CLCDConfig->Mode)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	7c1b      	ldrb	r3, [r3, #16]
 80002d6:	2b04      	cmp	r3, #4
 80002d8:	d13f      	bne.n	800035a <CLCD_voidSendCommand+0x138>
    {
    	HAL_Delay(1);
 80002da:	2001      	movs	r0, #1
 80002dc:	f000 fd52 	bl	8000d84 <HAL_Delay>
        /* Set command(lower 4 bits) to data pins */
        for (uint8_t LoopCounter = 0; LoopCounter < Copy_CLCDConfig->Mode; LoopCounter++)
 80002e0:	2300      	movs	r3, #0
 80002e2:	73bb      	strb	r3, [r7, #14]
 80002e4:	e019      	b.n	800031a <CLCD_voidSendCommand+0xf8>
        {
            HAL_GPIO_WritePin(Copy_CLCDConfig->DataPorts[LoopCounter], Copy_CLCDConfig->DataPins[LoopCounter], GET_BIT(Copy_u8Command, LoopCounter));
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	681a      	ldr	r2, [r3, #0]
 80002ea:	7bbb      	ldrb	r3, [r7, #14]
 80002ec:	009b      	lsls	r3, r3, #2
 80002ee:	4413      	add	r3, r2
 80002f0:	6818      	ldr	r0, [r3, #0]
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	689a      	ldr	r2, [r3, #8]
 80002f6:	7bbb      	ldrb	r3, [r7, #14]
 80002f8:	005b      	lsls	r3, r3, #1
 80002fa:	4413      	add	r3, r2
 80002fc:	8819      	ldrh	r1, [r3, #0]
 80002fe:	78fa      	ldrb	r2, [r7, #3]
 8000300:	7bbb      	ldrb	r3, [r7, #14]
 8000302:	fa42 f303 	asr.w	r3, r2, r3
 8000306:	b2db      	uxtb	r3, r3
 8000308:	f003 0301 	and.w	r3, r3, #1
 800030c:	b2db      	uxtb	r3, r3
 800030e:	461a      	mov	r2, r3
 8000310:	f001 f866 	bl	80013e0 <HAL_GPIO_WritePin>
        for (uint8_t LoopCounter = 0; LoopCounter < Copy_CLCDConfig->Mode; LoopCounter++)
 8000314:	7bbb      	ldrb	r3, [r7, #14]
 8000316:	3301      	adds	r3, #1
 8000318:	73bb      	strb	r3, [r7, #14]
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	7c1b      	ldrb	r3, [r3, #16]
 800031e:	7bba      	ldrb	r2, [r7, #14]
 8000320:	429a      	cmp	r2, r3
 8000322:	d3e0      	bcc.n	80002e6 <CLCD_voidSendCommand+0xc4>
        }
        /* Send enable pulse */
        HAL_GPIO_WritePin(Copy_CLCDConfig->CtrlPorts[2], Copy_CLCDConfig->CtrlPins[2], GPIO_PIN_SET);
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	685b      	ldr	r3, [r3, #4]
 8000328:	3308      	adds	r3, #8
 800032a:	6818      	ldr	r0, [r3, #0]
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	68db      	ldr	r3, [r3, #12]
 8000330:	3304      	adds	r3, #4
 8000332:	881b      	ldrh	r3, [r3, #0]
 8000334:	2201      	movs	r2, #1
 8000336:	4619      	mov	r1, r3
 8000338:	f001 f852 	bl	80013e0 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800033c:	2001      	movs	r0, #1
 800033e:	f000 fd21 	bl	8000d84 <HAL_Delay>
        HAL_GPIO_WritePin(Copy_CLCDConfig->CtrlPorts[2], Copy_CLCDConfig->CtrlPins[2], GPIO_PIN_RESET);
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	685b      	ldr	r3, [r3, #4]
 8000346:	3308      	adds	r3, #8
 8000348:	6818      	ldr	r0, [r3, #0]
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	68db      	ldr	r3, [r3, #12]
 800034e:	3304      	adds	r3, #4
 8000350:	881b      	ldrh	r3, [r3, #0]
 8000352:	2200      	movs	r2, #0
 8000354:	4619      	mov	r1, r3
 8000356:	f001 f843 	bl	80013e0 <HAL_GPIO_WritePin>
    }
    /* Wait for the command */
    HAL_Delay(2);
 800035a:	2002      	movs	r0, #2
 800035c:	f000 fd12 	bl	8000d84 <HAL_Delay>
}
 8000360:	bf00      	nop
 8000362:	3714      	adds	r7, #20
 8000364:	46bd      	mov	sp, r7
 8000366:	bd90      	pop	{r4, r7, pc}

08000368 <CLCD_voidSendData>:

void CLCD_voidSendData(const CLCD_Config_t *Copy_CLCDConfig, uint8_t Copy_u8Data)
{
 8000368:	b590      	push	{r4, r7, lr}
 800036a:	b085      	sub	sp, #20
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	460b      	mov	r3, r1
 8000372:	70fb      	strb	r3, [r7, #3]
    uint8_t Local_u8HigherBitShift = (CLCD_MODE_4BIT == Copy_CLCDConfig->Mode)? 4 : 0;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	7c1b      	ldrb	r3, [r3, #16]
 8000378:	2b04      	cmp	r3, #4
 800037a:	d101      	bne.n	8000380 <CLCD_voidSendData+0x18>
 800037c:	2304      	movs	r3, #4
 800037e:	e000      	b.n	8000382 <CLCD_voidSendData+0x1a>
 8000380:	2300      	movs	r3, #0
 8000382:	737b      	strb	r3, [r7, #13]
    /* Set RS pin to high for data */
    HAL_GPIO_WritePin(Copy_CLCDConfig->CtrlPorts[0], Copy_CLCDConfig->CtrlPins[0], GPIO_PIN_SET);
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	685b      	ldr	r3, [r3, #4]
 8000388:	6818      	ldr	r0, [r3, #0]
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	68db      	ldr	r3, [r3, #12]
 800038e:	881b      	ldrh	r3, [r3, #0]
 8000390:	2201      	movs	r2, #1
 8000392:	4619      	mov	r1, r3
 8000394:	f001 f824 	bl	80013e0 <HAL_GPIO_WritePin>
    /* Set RW pin to low for write */
    // HAL_GPIO_WritePin(Copy_CLCDConfig->CtrlPorts[1], Copy_CLCDConfig->CtrlPins[1], GPIO_PIN_RESET);
    /* Set data(higher 4 bits in case of 4-bit mode) to data pins */
    for (uint8_t LoopCounter = 0; LoopCounter < Copy_CLCDConfig->Mode; LoopCounter++)
 8000398:	2300      	movs	r3, #0
 800039a:	73fb      	strb	r3, [r7, #15]
 800039c:	e01c      	b.n	80003d8 <CLCD_voidSendData+0x70>
    {
        HAL_GPIO_WritePin(Copy_CLCDConfig->DataPorts[LoopCounter], Copy_CLCDConfig->DataPins[LoopCounter], GET_BIT(Copy_u8Data, (LoopCounter + Local_u8HigherBitShift)));
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	681a      	ldr	r2, [r3, #0]
 80003a2:	7bfb      	ldrb	r3, [r7, #15]
 80003a4:	009b      	lsls	r3, r3, #2
 80003a6:	4413      	add	r3, r2
 80003a8:	6818      	ldr	r0, [r3, #0]
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	689a      	ldr	r2, [r3, #8]
 80003ae:	7bfb      	ldrb	r3, [r7, #15]
 80003b0:	005b      	lsls	r3, r3, #1
 80003b2:	4413      	add	r3, r2
 80003b4:	881c      	ldrh	r4, [r3, #0]
 80003b6:	78fa      	ldrb	r2, [r7, #3]
 80003b8:	7bf9      	ldrb	r1, [r7, #15]
 80003ba:	7b7b      	ldrb	r3, [r7, #13]
 80003bc:	440b      	add	r3, r1
 80003be:	fa42 f303 	asr.w	r3, r2, r3
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	f003 0301 	and.w	r3, r3, #1
 80003c8:	b2db      	uxtb	r3, r3
 80003ca:	461a      	mov	r2, r3
 80003cc:	4621      	mov	r1, r4
 80003ce:	f001 f807 	bl	80013e0 <HAL_GPIO_WritePin>
    for (uint8_t LoopCounter = 0; LoopCounter < Copy_CLCDConfig->Mode; LoopCounter++)
 80003d2:	7bfb      	ldrb	r3, [r7, #15]
 80003d4:	3301      	adds	r3, #1
 80003d6:	73fb      	strb	r3, [r7, #15]
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	7c1b      	ldrb	r3, [r3, #16]
 80003dc:	7bfa      	ldrb	r2, [r7, #15]
 80003de:	429a      	cmp	r2, r3
 80003e0:	d3dd      	bcc.n	800039e <CLCD_voidSendData+0x36>
    }
    /* Send enable pulse */
    HAL_GPIO_WritePin(Copy_CLCDConfig->CtrlPorts[2], Copy_CLCDConfig->CtrlPins[2], GPIO_PIN_SET);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	685b      	ldr	r3, [r3, #4]
 80003e6:	3308      	adds	r3, #8
 80003e8:	6818      	ldr	r0, [r3, #0]
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	68db      	ldr	r3, [r3, #12]
 80003ee:	3304      	adds	r3, #4
 80003f0:	881b      	ldrh	r3, [r3, #0]
 80003f2:	2201      	movs	r2, #1
 80003f4:	4619      	mov	r1, r3
 80003f6:	f000 fff3 	bl	80013e0 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80003fa:	2001      	movs	r0, #1
 80003fc:	f000 fcc2 	bl	8000d84 <HAL_Delay>
    HAL_GPIO_WritePin(Copy_CLCDConfig->CtrlPorts[2], Copy_CLCDConfig->CtrlPins[2], GPIO_PIN_RESET);
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	685b      	ldr	r3, [r3, #4]
 8000404:	3308      	adds	r3, #8
 8000406:	6818      	ldr	r0, [r3, #0]
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	68db      	ldr	r3, [r3, #12]
 800040c:	3304      	adds	r3, #4
 800040e:	881b      	ldrh	r3, [r3, #0]
 8000410:	2200      	movs	r2, #0
 8000412:	4619      	mov	r1, r3
 8000414:	f000 ffe4 	bl	80013e0 <HAL_GPIO_WritePin>

    if (CLCD_MODE_4BIT == Copy_CLCDConfig->Mode)
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	7c1b      	ldrb	r3, [r3, #16]
 800041c:	2b04      	cmp	r3, #4
 800041e:	d13f      	bne.n	80004a0 <CLCD_voidSendData+0x138>
    {
    	HAL_Delay(1);
 8000420:	2001      	movs	r0, #1
 8000422:	f000 fcaf 	bl	8000d84 <HAL_Delay>
        /* Set data(lower 4 bits) to data pins */
        for (uint8_t LoopCounter = 0; LoopCounter < Copy_CLCDConfig->Mode; LoopCounter++)
 8000426:	2300      	movs	r3, #0
 8000428:	73bb      	strb	r3, [r7, #14]
 800042a:	e019      	b.n	8000460 <CLCD_voidSendData+0xf8>
        {
            HAL_GPIO_WritePin(Copy_CLCDConfig->DataPorts[LoopCounter], Copy_CLCDConfig->DataPins[LoopCounter], GET_BIT(Copy_u8Data, LoopCounter));
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	681a      	ldr	r2, [r3, #0]
 8000430:	7bbb      	ldrb	r3, [r7, #14]
 8000432:	009b      	lsls	r3, r3, #2
 8000434:	4413      	add	r3, r2
 8000436:	6818      	ldr	r0, [r3, #0]
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	689a      	ldr	r2, [r3, #8]
 800043c:	7bbb      	ldrb	r3, [r7, #14]
 800043e:	005b      	lsls	r3, r3, #1
 8000440:	4413      	add	r3, r2
 8000442:	8819      	ldrh	r1, [r3, #0]
 8000444:	78fa      	ldrb	r2, [r7, #3]
 8000446:	7bbb      	ldrb	r3, [r7, #14]
 8000448:	fa42 f303 	asr.w	r3, r2, r3
 800044c:	b2db      	uxtb	r3, r3
 800044e:	f003 0301 	and.w	r3, r3, #1
 8000452:	b2db      	uxtb	r3, r3
 8000454:	461a      	mov	r2, r3
 8000456:	f000 ffc3 	bl	80013e0 <HAL_GPIO_WritePin>
        for (uint8_t LoopCounter = 0; LoopCounter < Copy_CLCDConfig->Mode; LoopCounter++)
 800045a:	7bbb      	ldrb	r3, [r7, #14]
 800045c:	3301      	adds	r3, #1
 800045e:	73bb      	strb	r3, [r7, #14]
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	7c1b      	ldrb	r3, [r3, #16]
 8000464:	7bba      	ldrb	r2, [r7, #14]
 8000466:	429a      	cmp	r2, r3
 8000468:	d3e0      	bcc.n	800042c <CLCD_voidSendData+0xc4>
        }
        /* Send enable pulse */
        HAL_GPIO_WritePin(Copy_CLCDConfig->CtrlPorts[2], Copy_CLCDConfig->CtrlPins[2], GPIO_PIN_SET);
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	685b      	ldr	r3, [r3, #4]
 800046e:	3308      	adds	r3, #8
 8000470:	6818      	ldr	r0, [r3, #0]
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	68db      	ldr	r3, [r3, #12]
 8000476:	3304      	adds	r3, #4
 8000478:	881b      	ldrh	r3, [r3, #0]
 800047a:	2201      	movs	r2, #1
 800047c:	4619      	mov	r1, r3
 800047e:	f000 ffaf 	bl	80013e0 <HAL_GPIO_WritePin>
        HAL_Delay(11);
 8000482:	200b      	movs	r0, #11
 8000484:	f000 fc7e 	bl	8000d84 <HAL_Delay>
        HAL_GPIO_WritePin(Copy_CLCDConfig->CtrlPorts[2], Copy_CLCDConfig->CtrlPins[2], GPIO_PIN_RESET);
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	3308      	adds	r3, #8
 800048e:	6818      	ldr	r0, [r3, #0]
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	68db      	ldr	r3, [r3, #12]
 8000494:	3304      	adds	r3, #4
 8000496:	881b      	ldrh	r3, [r3, #0]
 8000498:	2200      	movs	r2, #0
 800049a:	4619      	mov	r1, r3
 800049c:	f000 ffa0 	bl	80013e0 <HAL_GPIO_WritePin>
    }
    /* Wait for the data */
    HAL_Delay(2);
 80004a0:	2002      	movs	r0, #2
 80004a2:	f000 fc6f 	bl	8000d84 <HAL_Delay>
}
 80004a6:	bf00      	nop
 80004a8:	3714      	adds	r7, #20
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd90      	pop	{r4, r7, pc}

080004ae <CLCD_voidInit>:

void CLCD_voidInit(const CLCD_Config_t *Copy_CLCDConfig)
{
 80004ae:	b580      	push	{r7, lr}
 80004b0:	b082      	sub	sp, #8
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	6078      	str	r0, [r7, #4]
    /* Wait for more than 30 ms */
    HAL_Delay(40);
 80004b6:	2028      	movs	r0, #40	; 0x28
 80004b8:	f000 fc64 	bl	8000d84 <HAL_Delay>
    if (CLCD_MODE_8BIT == Copy_CLCDConfig->Mode)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	7c1b      	ldrb	r3, [r3, #16]
 80004c0:	2b08      	cmp	r3, #8
 80004c2:	d104      	bne.n	80004ce <CLCD_voidInit+0x20>
    {
        /* Function set command: 2 lines, 5x8 font size */
        CLCD_voidSendCommand(Copy_CLCDConfig, 0b00111000);
 80004c4:	2138      	movs	r1, #56	; 0x38
 80004c6:	6878      	ldr	r0, [r7, #4]
 80004c8:	f7ff feab 	bl	8000222 <CLCD_voidSendCommand>
 80004cc:	e00b      	b.n	80004e6 <CLCD_voidInit+0x38>
    }
    else if (CLCD_MODE_4BIT == Copy_CLCDConfig->Mode)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	7c1b      	ldrb	r3, [r3, #16]
 80004d2:	2b04      	cmp	r3, #4
 80004d4:	d107      	bne.n	80004e6 <CLCD_voidInit+0x38>
    {
        /* Function set command: 2 lines, 5x8 font size */
        CLCD_voidSendCommand(Copy_CLCDConfig, 0b00000010);
 80004d6:	2102      	movs	r1, #2
 80004d8:	6878      	ldr	r0, [r7, #4]
 80004da:	f7ff fea2 	bl	8000222 <CLCD_voidSendCommand>
        CLCD_voidSendCommand(Copy_CLCDConfig, 0b00101000);
 80004de:	2128      	movs	r1, #40	; 0x28
 80004e0:	6878      	ldr	r0, [r7, #4]
 80004e2:	f7ff fe9e 	bl	8000222 <CLCD_voidSendCommand>
    }
    /* Display on/off control: display enable, disable cursor, no blink cursor */
    CLCD_voidSendCommand(Copy_CLCDConfig, 0b00001100);
 80004e6:	210c      	movs	r1, #12
 80004e8:	6878      	ldr	r0, [r7, #4]
 80004ea:	f7ff fe9a 	bl	8000222 <CLCD_voidSendCommand>
    /* Clear display */
    CLCD_voidSendCommand(Copy_CLCDConfig, 0b00000001);
 80004ee:	2101      	movs	r1, #1
 80004f0:	6878      	ldr	r0, [r7, #4]
 80004f2:	f7ff fe96 	bl	8000222 <CLCD_voidSendCommand>
}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <CLCD_voidSendString>:

void CLCD_voidSendString(const CLCD_Config_t *Copy_CLCDConfig, const char *Copy_pcString)
{
 80004fe:	b580      	push	{r7, lr}
 8000500:	b082      	sub	sp, #8
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
 8000506:	6039      	str	r1, [r7, #0]
    while (NULL_CHARACTER != *Copy_pcString)
 8000508:	e007      	b.n	800051a <CLCD_voidSendString+0x1c>
    {
        /* Send the current char then increment the pointer to the next char */
        CLCD_voidSendData(Copy_CLCDConfig, *Copy_pcString++);
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	1c5a      	adds	r2, r3, #1
 800050e:	603a      	str	r2, [r7, #0]
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	4619      	mov	r1, r3
 8000514:	6878      	ldr	r0, [r7, #4]
 8000516:	f7ff ff27 	bl	8000368 <CLCD_voidSendData>
    while (NULL_CHARACTER != *Copy_pcString)
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d1f3      	bne.n	800050a <CLCD_voidSendString+0xc>
    }
}
 8000522:	bf00      	nop
 8000524:	bf00      	nop
 8000526:	3708      	adds	r7, #8
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}

0800052c <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(const CLCD_Config_t *Copy_CLCDConfig, uint8_t Copy_u8XPos, uint8_t Copy_u8YPos)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	460b      	mov	r3, r1
 8000536:	70fb      	strb	r3, [r7, #3]
 8000538:	4613      	mov	r3, r2
 800053a:	70bb      	strb	r3, [r7, #2]
    uint8_t Local_u8Address;

    if (0 == Copy_u8XPos)
 800053c:	78fb      	ldrb	r3, [r7, #3]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d102      	bne.n	8000548 <CLCD_voidGoToXY+0x1c>
    {
        /* Location is at first line */
        Local_u8Address = Copy_u8YPos;
 8000542:	78bb      	ldrb	r3, [r7, #2]
 8000544:	73fb      	strb	r3, [r7, #15]
 8000546:	e005      	b.n	8000554 <CLCD_voidGoToXY+0x28>
    }
    else if (1 == Copy_u8XPos)
 8000548:	78fb      	ldrb	r3, [r7, #3]
 800054a:	2b01      	cmp	r3, #1
 800054c:	d102      	bne.n	8000554 <CLCD_voidGoToXY+0x28>
    {
        /* Location is at second line */
        Local_u8Address = Copy_u8YPos + 0x40;
 800054e:	78bb      	ldrb	r3, [r7, #2]
 8000550:	3340      	adds	r3, #64	; 0x40
 8000552:	73fb      	strb	r3, [r7, #15]
    }

    /* Set bit number 7 for set DDRAM Address command then send the command */
    CLCD_voidSendCommand(Copy_CLCDConfig, Local_u8Address + 128);
 8000554:	7bfb      	ldrb	r3, [r7, #15]
 8000556:	3b80      	subs	r3, #128	; 0x80
 8000558:	b2db      	uxtb	r3, r3
 800055a:	4619      	mov	r1, r3
 800055c:	6878      	ldr	r0, [r7, #4]
 800055e:	f7ff fe60 	bl	8000222 <CLCD_voidSendCommand>
}
 8000562:	bf00      	nop
 8000564:	3710      	adds	r7, #16
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}

0800056a <CLCD_voidClearDisplay>:
        }
    }
}

void CLCD_voidClearDisplay(const CLCD_Config_t *Copy_CLCDConfig)
{
 800056a:	b580      	push	{r7, lr}
 800056c:	b082      	sub	sp, #8
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
    CLCD_voidSendCommand(Copy_CLCDConfig, 0b00000001);
 8000572:	2101      	movs	r1, #1
 8000574:	6878      	ldr	r0, [r7, #4]
 8000576:	f7ff fe54 	bl	8000222 <CLCD_voidSendCommand>
}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
	...

08000584 <LED_u8TurnOn>:
#include "LED_prv.h"

/* Public Functions */

uint8_t LED_u8TurnOn(LED_t *LedConfig)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
    /* Check LED config, then early return if it's not valid */
    if (NULL == LedConfig)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d101      	bne.n	8000596 <LED_u8TurnOn+0x12>
    {
        return NULL_PTR_ERR;
 8000592:	2303      	movs	r3, #3
 8000594:	e038      	b.n	8000608 <LED_u8TurnOn+0x84>
    }
    else if ((LedConfig->Port > GPIOE) || (LedConfig->Port < GPIOA) || (LedConfig->Pin > GPIO_PIN_15) || (LedConfig->Pin < GPIO_PIN_0))
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a1d      	ldr	r2, [pc, #116]	; (8000610 <LED_u8TurnOn+0x8c>)
 800059c:	4293      	cmp	r3, r2
 800059e:	d80d      	bhi.n	80005bc <LED_u8TurnOn+0x38>
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a1b      	ldr	r2, [pc, #108]	; (8000614 <LED_u8TurnOn+0x90>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d908      	bls.n	80005bc <LED_u8TurnOn+0x38>
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	889b      	ldrh	r3, [r3, #4]
 80005ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80005b2:	d803      	bhi.n	80005bc <LED_u8TurnOn+0x38>
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	889b      	ldrh	r3, [r3, #4]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d101      	bne.n	80005c0 <LED_u8TurnOn+0x3c>
    {
        return NOK;
 80005bc:	2302      	movs	r3, #2
 80005be:	e023      	b.n	8000608 <LED_u8TurnOn+0x84>
    }
    else if (LedConfig->ConnectionType != LED_SOURCE_CONNECTION && LedConfig->ConnectionType != LED_SINK_CONNECTION)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	799b      	ldrb	r3, [r3, #6]
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d005      	beq.n	80005d4 <LED_u8TurnOn+0x50>
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	799b      	ldrb	r3, [r3, #6]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <LED_u8TurnOn+0x50>
    {
        return NOK;
 80005d0:	2302      	movs	r3, #2
 80005d2:	e019      	b.n	8000608 <LED_u8TurnOn+0x84>
    }

    if (LED_SOURCE_CONNECTION == LedConfig->ConnectionType)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	799b      	ldrb	r3, [r3, #6]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d108      	bne.n	80005ee <LED_u8TurnOn+0x6a>
    {
        HAL_GPIO_WritePin(LedConfig->Port, LedConfig->Pin, GPIO_PIN_SET);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	6818      	ldr	r0, [r3, #0]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	889b      	ldrh	r3, [r3, #4]
 80005e4:	2201      	movs	r2, #1
 80005e6:	4619      	mov	r1, r3
 80005e8:	f000 fefa 	bl	80013e0 <HAL_GPIO_WritePin>
 80005ec:	e00b      	b.n	8000606 <LED_u8TurnOn+0x82>
    }
    else if (LED_SINK_CONNECTION == LedConfig->ConnectionType)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	799b      	ldrb	r3, [r3, #6]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d107      	bne.n	8000606 <LED_u8TurnOn+0x82>
    {
        HAL_GPIO_WritePin(LedConfig->Port, LedConfig->Pin, GPIO_PIN_RESET);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	6818      	ldr	r0, [r3, #0]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	889b      	ldrh	r3, [r3, #4]
 80005fe:	2200      	movs	r2, #0
 8000600:	4619      	mov	r1, r3
 8000602:	f000 feed 	bl	80013e0 <HAL_GPIO_WritePin>
    }

    return OK;
 8000606:	2301      	movs	r3, #1
}
 8000608:	4618      	mov	r0, r3
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40011800 	.word	0x40011800
 8000614:	400107ff 	.word	0x400107ff

08000618 <LED_u8TurnOff>:

uint8_t LED_u8TurnOff(LED_t *LedConfig)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
    /* Check LED config, then early return if it's not valid */
    if (NULL == LedConfig)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d101      	bne.n	800062a <LED_u8TurnOff+0x12>
    {
        return NULL_PTR_ERR;
 8000626:	2303      	movs	r3, #3
 8000628:	e038      	b.n	800069c <LED_u8TurnOff+0x84>
    }
    else if ((LedConfig->Port > GPIOE) || (LedConfig->Port < GPIOA) || (LedConfig->Pin > GPIO_PIN_15) || (LedConfig->Pin < GPIO_PIN_0))
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a1d      	ldr	r2, [pc, #116]	; (80006a4 <LED_u8TurnOff+0x8c>)
 8000630:	4293      	cmp	r3, r2
 8000632:	d80d      	bhi.n	8000650 <LED_u8TurnOff+0x38>
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a1b      	ldr	r2, [pc, #108]	; (80006a8 <LED_u8TurnOff+0x90>)
 800063a:	4293      	cmp	r3, r2
 800063c:	d908      	bls.n	8000650 <LED_u8TurnOff+0x38>
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	889b      	ldrh	r3, [r3, #4]
 8000642:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000646:	d803      	bhi.n	8000650 <LED_u8TurnOff+0x38>
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	889b      	ldrh	r3, [r3, #4]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d101      	bne.n	8000654 <LED_u8TurnOff+0x3c>
    {
        return NOK;
 8000650:	2302      	movs	r3, #2
 8000652:	e023      	b.n	800069c <LED_u8TurnOff+0x84>
    }
    else if (LedConfig->ConnectionType != LED_SOURCE_CONNECTION && LedConfig->ConnectionType != LED_SINK_CONNECTION)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	799b      	ldrb	r3, [r3, #6]
 8000658:	2b01      	cmp	r3, #1
 800065a:	d005      	beq.n	8000668 <LED_u8TurnOff+0x50>
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	799b      	ldrb	r3, [r3, #6]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <LED_u8TurnOff+0x50>
    {
        return NOK;
 8000664:	2302      	movs	r3, #2
 8000666:	e019      	b.n	800069c <LED_u8TurnOff+0x84>
    }

    if (LED_SOURCE_CONNECTION == LedConfig->ConnectionType)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	799b      	ldrb	r3, [r3, #6]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d108      	bne.n	8000682 <LED_u8TurnOff+0x6a>
    {
        HAL_GPIO_WritePin(LedConfig->Port, LedConfig->Pin, GPIO_PIN_RESET);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	6818      	ldr	r0, [r3, #0]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	889b      	ldrh	r3, [r3, #4]
 8000678:	2200      	movs	r2, #0
 800067a:	4619      	mov	r1, r3
 800067c:	f000 feb0 	bl	80013e0 <HAL_GPIO_WritePin>
 8000680:	e00b      	b.n	800069a <LED_u8TurnOff+0x82>
    }
    else if (LED_SINK_CONNECTION == LedConfig->ConnectionType)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	799b      	ldrb	r3, [r3, #6]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d107      	bne.n	800069a <LED_u8TurnOff+0x82>
    {
        HAL_GPIO_WritePin(LedConfig->Port, LedConfig->Pin, GPIO_PIN_SET);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	6818      	ldr	r0, [r3, #0]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	889b      	ldrh	r3, [r3, #4]
 8000692:	2201      	movs	r2, #1
 8000694:	4619      	mov	r1, r3
 8000696:	f000 fea3 	bl	80013e0 <HAL_GPIO_WritePin>
    }

    return OK;
 800069a:	2301      	movs	r3, #1
}
 800069c:	4618      	mov	r0, r3
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40011800 	.word	0x40011800
 80006a8:	400107ff 	.word	0x400107ff

080006ac <StringLength>:

	return Local_u8Length;
}

uint16_t StringLength(const char *Copy_pcString)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	uint16_t Local_u16Length = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	81fb      	strh	r3, [r7, #14]

	while (*Copy_pcString != '\0')
 80006b8:	e005      	b.n	80006c6 <StringLength+0x1a>
	{
		Local_u16Length++;
 80006ba:	89fb      	ldrh	r3, [r7, #14]
 80006bc:	3301      	adds	r3, #1
 80006be:	81fb      	strh	r3, [r7, #14]
		Copy_pcString++;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	3301      	adds	r3, #1
 80006c4:	607b      	str	r3, [r7, #4]
	while (*Copy_pcString != '\0')
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d1f5      	bne.n	80006ba <StringLength+0xe>
	}

	return Local_u16Length;
 80006ce:	89fb      	ldrh	r3, [r7, #14]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr
	...

080006dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e0:	f000 faee 	bl	8000cc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e4:	f000 f84e 	bl	8000784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e8:	f000 f8ba 	bl	8000860 <MX_GPIO_Init>
  MX_SPI1_Init();
 80006ec:	f000 f886 	bl	80007fc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  CLCD_voidInit(&CLCDConfig);
 80006f0:	481f      	ldr	r0, [pc, #124]	; (8000770 <main+0x94>)
 80006f2:	f7ff fedc 	bl	80004ae <CLCD_voidInit>

  CLCD_voidSendString(&CLCDConfig, "Startig...");
 80006f6:	491f      	ldr	r1, [pc, #124]	; (8000774 <main+0x98>)
 80006f8:	481d      	ldr	r0, [pc, #116]	; (8000770 <main+0x94>)
 80006fa:	f7ff ff00 	bl	80004fe <CLCD_voidSendString>
//  LED_u8TurnOn(&RedLed);
//  LED_u8TurnOn(&GreenLed);
  HAL_Delay(1500);
 80006fe:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000702:	f000 fb3f 	bl	8000d84 <HAL_Delay>
  CLCD_voidClearDisplay(&CLCDConfig);
 8000706:	481a      	ldr	r0, [pc, #104]	; (8000770 <main+0x94>)
 8000708:	f7ff ff2f 	bl	800056a <CLCD_voidClearDisplay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SPIReceive(SPICmdCode, 2);
 800070c:	2102      	movs	r1, #2
 800070e:	481a      	ldr	r0, [pc, #104]	; (8000778 <main+0x9c>)
 8000710:	f000 f9d4 	bl	8000abc <SPIReceive>
//
//	  if (1 == RxCmpltFlag)
//	  {
	  switch (SPICmdCode[0])
 8000714:	4b18      	ldr	r3, [pc, #96]	; (8000778 <main+0x9c>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	3be0      	subs	r3, #224	; 0xe0
 800071a:	2b03      	cmp	r3, #3
 800071c:	d81b      	bhi.n	8000756 <main+0x7a>
 800071e:	a201      	add	r2, pc, #4	; (adr r2, 8000724 <main+0x48>)
 8000720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000724:	08000735 	.word	0x08000735
 8000728:	08000743 	.word	0x08000743
 800072c:	08000751 	.word	0x08000751
 8000730:	08000757 	.word	0x08000757
	  {
	  case SPI_CODE_WRONG_PASSWORD: LED_u8TurnOn(&RedLed); LED_u8TurnOff(&GreenLed); break;
 8000734:	4811      	ldr	r0, [pc, #68]	; (800077c <main+0xa0>)
 8000736:	f7ff ff25 	bl	8000584 <LED_u8TurnOn>
 800073a:	4811      	ldr	r0, [pc, #68]	; (8000780 <main+0xa4>)
 800073c:	f7ff ff6c 	bl	8000618 <LED_u8TurnOff>
 8000740:	e00a      	b.n	8000758 <main+0x7c>
	  case SPI_CODE_CORRECT_PASSWORD: LED_u8TurnOn(&GreenLed); LED_u8TurnOff(&RedLed); break;
 8000742:	480f      	ldr	r0, [pc, #60]	; (8000780 <main+0xa4>)
 8000744:	f7ff ff1e 	bl	8000584 <LED_u8TurnOn>
 8000748:	480c      	ldr	r0, [pc, #48]	; (800077c <main+0xa0>)
 800074a:	f7ff ff65 	bl	8000618 <LED_u8TurnOff>
 800074e:	e003      	b.n	8000758 <main+0x7c>
	  case SPI_CODE_DISPLAY_TIME_DATE: DisplayTimeDate(); break;
 8000750:	f000 f922 	bl	8000998 <DisplayTimeDate>
 8000754:	e000      	b.n	8000758 <main+0x7c>
	  case SPI_CODE_DISPLAY_ALARM_MESSAGE: break;
	  default: break;
 8000756:	bf00      	nop
	  }

	  /* Clear SPICmdCode array */
	  ClearArray(SPICmdCode, sizeof(SPICmdCode));
 8000758:	2102      	movs	r1, #2
 800075a:	4807      	ldr	r0, [pc, #28]	; (8000778 <main+0x9c>)
 800075c:	f000 f992 	bl	8000a84 <ClearArray>
	  HAL_Delay(1000);
 8000760:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000764:	f000 fb0e 	bl	8000d84 <HAL_Delay>
	  LED_u8TurnOff(&GreenLed);
 8000768:	4805      	ldr	r0, [pc, #20]	; (8000780 <main+0xa4>)
 800076a:	f7ff ff55 	bl	8000618 <LED_u8TurnOff>
	  SPIReceive(SPICmdCode, 2);
 800076e:	e7cd      	b.n	800070c <main+0x30>
 8000770:	2000002c 	.word	0x2000002c
 8000774:	080026ec 	.word	0x080026ec
 8000778:	200000d8 	.word	0x200000d8
 800077c:	20000040 	.word	0x20000040
 8000780:	20000048 	.word	0x20000048

08000784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b090      	sub	sp, #64	; 0x40
 8000788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078a:	f107 0318 	add.w	r3, r7, #24
 800078e:	2228      	movs	r2, #40	; 0x28
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f001 ff72 	bl	800267c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a6:	2302      	movs	r3, #2
 80007a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007aa:	2301      	movs	r3, #1
 80007ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ae:	2310      	movs	r3, #16
 80007b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007b2:	2300      	movs	r3, #0
 80007b4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b6:	f107 0318 	add.w	r3, r7, #24
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 fe40 	bl	8001440 <HAL_RCC_OscConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0x46>
  {
    Error_Handler();
 80007c6:	f000 f99b 	bl	8000b00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ca:	230f      	movs	r3, #15
 80007cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f001 f8ae 	bl	8001944 <HAL_RCC_ClockConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80007ee:	f000 f987 	bl	8000b00 <Error_Handler>
  }
}
 80007f2:	bf00      	nop
 80007f4:	3740      	adds	r7, #64	; 0x40
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
	...

080007fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000800:	4b15      	ldr	r3, [pc, #84]	; (8000858 <MX_SPI1_Init+0x5c>)
 8000802:	4a16      	ldr	r2, [pc, #88]	; (800085c <MX_SPI1_Init+0x60>)
 8000804:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000806:	4b14      	ldr	r3, [pc, #80]	; (8000858 <MX_SPI1_Init+0x5c>)
 8000808:	2200      	movs	r2, #0
 800080a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <MX_SPI1_Init+0x5c>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_SPI1_Init+0x5c>)
 8000814:	2200      	movs	r2, #0
 8000816:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <MX_SPI1_Init+0x5c>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_SPI1_Init+0x5c>)
 8000820:	2200      	movs	r2, #0
 8000822:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_SPI1_Init+0x5c>)
 8000826:	f44f 7200 	mov.w	r2, #512	; 0x200
 800082a:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800082c:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <MX_SPI1_Init+0x5c>)
 800082e:	2200      	movs	r2, #0
 8000830:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_SPI1_Init+0x5c>)
 8000834:	2200      	movs	r2, #0
 8000836:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000838:	4b07      	ldr	r3, [pc, #28]	; (8000858 <MX_SPI1_Init+0x5c>)
 800083a:	2200      	movs	r2, #0
 800083c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_SPI1_Init+0x5c>)
 8000840:	220a      	movs	r2, #10
 8000842:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000844:	4804      	ldr	r0, [pc, #16]	; (8000858 <MX_SPI1_Init+0x5c>)
 8000846:	f001 f9d9 	bl	8001bfc <HAL_SPI_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 8000850:	f000 f956 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000080 	.word	0x20000080
 800085c:	40013000 	.word	0x40013000

08000860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b088      	sub	sp, #32
 8000864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	f107 0310 	add.w	r3, r7, #16
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000874:	4b43      	ldr	r3, [pc, #268]	; (8000984 <MX_GPIO_Init+0x124>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	4a42      	ldr	r2, [pc, #264]	; (8000984 <MX_GPIO_Init+0x124>)
 800087a:	f043 0310 	orr.w	r3, r3, #16
 800087e:	6193      	str	r3, [r2, #24]
 8000880:	4b40      	ldr	r3, [pc, #256]	; (8000984 <MX_GPIO_Init+0x124>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	f003 0310 	and.w	r3, r3, #16
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088c:	4b3d      	ldr	r3, [pc, #244]	; (8000984 <MX_GPIO_Init+0x124>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	4a3c      	ldr	r2, [pc, #240]	; (8000984 <MX_GPIO_Init+0x124>)
 8000892:	f043 0304 	orr.w	r3, r3, #4
 8000896:	6193      	str	r3, [r2, #24]
 8000898:	4b3a      	ldr	r3, [pc, #232]	; (8000984 <MX_GPIO_Init+0x124>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	f003 0304 	and.w	r3, r3, #4
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a4:	4b37      	ldr	r3, [pc, #220]	; (8000984 <MX_GPIO_Init+0x124>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	4a36      	ldr	r2, [pc, #216]	; (8000984 <MX_GPIO_Init+0x124>)
 80008aa:	f043 0308 	orr.w	r3, r3, #8
 80008ae:	6193      	str	r3, [r2, #24]
 80008b0:	4b34      	ldr	r3, [pc, #208]	; (8000984 <MX_GPIO_Init+0x124>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	f003 0308 	and.w	r3, r3, #8
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GRN_GPIO_Port, LED_GRN_Pin, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008c2:	4831      	ldr	r0, [pc, #196]	; (8000988 <MX_GPIO_Init+0x128>)
 80008c4:	f000 fd8c 	bl	80013e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buz_Pin|LED_RED1_Pin|CLCD_EN_Pin|CLCD_RS_Pin, GPIO_PIN_RESET);
 80008c8:	2200      	movs	r2, #0
 80008ca:	f640 1105 	movw	r1, #2309	; 0x905
 80008ce:	482f      	ldr	r0, [pc, #188]	; (800098c <MX_GPIO_Init+0x12c>)
 80008d0:	f000 fd86 	bl	80013e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CLCD_D7_Pin|CLCD_D6_Pin|CLCD_D5_Pin|CLCD_D4_Pin, GPIO_PIN_RESET);
 80008d4:	2200      	movs	r2, #0
 80008d6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80008da:	482d      	ldr	r0, [pc, #180]	; (8000990 <MX_GPIO_Init+0x130>)
 80008dc:	f000 fd80 	bl	80013e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EXTI_Pin_Pin */
  GPIO_InitStruct.Pin = EXTI_Pin_Pin;
 80008e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008e6:	4b2b      	ldr	r3, [pc, #172]	; (8000994 <MX_GPIO_Init+0x134>)
 80008e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EXTI_Pin_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 0310 	add.w	r3, r7, #16
 80008f2:	4619      	mov	r1, r3
 80008f4:	4824      	ldr	r0, [pc, #144]	; (8000988 <MX_GPIO_Init+0x128>)
 80008f6:	f000 fbef 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GRN_Pin */
  GPIO_InitStruct.Pin = LED_GRN_Pin;
 80008fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	2301      	movs	r3, #1
 8000902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2302      	movs	r3, #2
 800090a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GRN_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 0310 	add.w	r3, r7, #16
 8000910:	4619      	mov	r1, r3
 8000912:	481d      	ldr	r0, [pc, #116]	; (8000988 <MX_GPIO_Init+0x128>)
 8000914:	f000 fbe0 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Buz_Pin LED_RED1_Pin CLCD_EN_Pin CLCD_RS_Pin */
  GPIO_InitStruct.Pin = Buz_Pin|LED_RED1_Pin|CLCD_EN_Pin|CLCD_RS_Pin;
 8000918:	f640 1305 	movw	r3, #2309	; 0x905
 800091c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091e:	2301      	movs	r3, #1
 8000920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2302      	movs	r3, #2
 8000928:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092a:	f107 0310 	add.w	r3, r7, #16
 800092e:	4619      	mov	r1, r3
 8000930:	4816      	ldr	r0, [pc, #88]	; (800098c <MX_GPIO_Init+0x12c>)
 8000932:	f000 fbd1 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000936:	2310      	movs	r3, #16
 8000938:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000942:	f107 0310 	add.w	r3, r7, #16
 8000946:	4619      	mov	r1, r3
 8000948:	4810      	ldr	r0, [pc, #64]	; (800098c <MX_GPIO_Init+0x12c>)
 800094a:	f000 fbc5 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLCD_D7_Pin CLCD_D6_Pin CLCD_D5_Pin CLCD_D4_Pin */
  GPIO_InitStruct.Pin = CLCD_D7_Pin|CLCD_D6_Pin|CLCD_D5_Pin|CLCD_D4_Pin;
 800094e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000952:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000954:	2301      	movs	r3, #1
 8000956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2302      	movs	r3, #2
 800095e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000960:	f107 0310 	add.w	r3, r7, #16
 8000964:	4619      	mov	r1, r3
 8000966:	480a      	ldr	r0, [pc, #40]	; (8000990 <MX_GPIO_Init+0x130>)
 8000968:	f000 fbb6 	bl	80010d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800096c:	2200      	movs	r2, #0
 800096e:	2100      	movs	r1, #0
 8000970:	2028      	movs	r0, #40	; 0x28
 8000972:	f000 fb02 	bl	8000f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000976:	2028      	movs	r0, #40	; 0x28
 8000978:	f000 fb1b 	bl	8000fb2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800097c:	bf00      	nop
 800097e:	3720      	adds	r7, #32
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40021000 	.word	0x40021000
 8000988:	40011000 	.word	0x40011000
 800098c:	40010800 	.word	0x40010800
 8000990:	40010c00 	.word	0x40010c00
 8000994:	10110000 	.word	0x10110000

08000998 <DisplayTimeDate>:

/* USER CODE BEGIN 4 */

static inline void DisplayTimeDate(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
	uint8_t Local_u8LoopCounter = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8NumOfStr = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8StrLen = StringLength((char*) &ReceiveBuffer[Local_u8LoopCounter]);
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	4a26      	ldr	r2, [pc, #152]	; (8000a44 <DisplayTimeDate+0xac>)
 80009aa:	4413      	add	r3, r2
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff fe7d 	bl	80006ac <StringLength>
 80009b2:	4603      	mov	r3, r0
 80009b4:	717b      	strb	r3, [r7, #5]

	/* Clear receiving buffer */
	ClearArray(ReceiveBuffer, sizeof(ReceiveBuffer));
 80009b6:	2123      	movs	r1, #35	; 0x23
 80009b8:	4822      	ldr	r0, [pc, #136]	; (8000a44 <DisplayTimeDate+0xac>)
 80009ba:	f000 f863 	bl	8000a84 <ClearArray>

	SPIReceive(ReceiveBuffer, 27U);
 80009be:	211b      	movs	r1, #27
 80009c0:	4820      	ldr	r0, [pc, #128]	; (8000a44 <DisplayTimeDate+0xac>)
 80009c2:	f000 f87b 	bl	8000abc <SPIReceive>
//	HAL_SPI_Receive(&hspi1, ReceiveBuffer, 27U, HAL_MAX_DELAY);


	CLCD_voidClearDisplay(&CLCDConfig);
 80009c6:	4820      	ldr	r0, [pc, #128]	; (8000a48 <DisplayTimeDate+0xb0>)
 80009c8:	f7ff fdcf 	bl	800056a <CLCD_voidClearDisplay>

	CLCD_voidGoToXY(&CLCDConfig, 0U, ((16U - Local_u8StrLen) >> 1U));
 80009cc:	797b      	ldrb	r3, [r7, #5]
 80009ce:	f1c3 0310 	rsb	r3, r3, #16
 80009d2:	085b      	lsrs	r3, r3, #1
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	461a      	mov	r2, r3
 80009d8:	2100      	movs	r1, #0
 80009da:	481b      	ldr	r0, [pc, #108]	; (8000a48 <DisplayTimeDate+0xb0>)
 80009dc:	f7ff fda6 	bl	800052c <CLCD_voidGoToXY>

	while(('\n' != ReceiveBuffer[Local_u8LoopCounter]) && (Local_u8NumOfStr < 2))
 80009e0:	e024      	b.n	8000a2c <DisplayTimeDate+0x94>
	{
		Local_u8StrLen = StringLength((char*) &ReceiveBuffer[Local_u8LoopCounter]);
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	4a17      	ldr	r2, [pc, #92]	; (8000a44 <DisplayTimeDate+0xac>)
 80009e6:	4413      	add	r3, r2
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff fe5f 	bl	80006ac <StringLength>
 80009ee:	4603      	mov	r3, r0
 80009f0:	717b      	strb	r3, [r7, #5]

		CLCD_voidSendString(&CLCDConfig, (char*) &ReceiveBuffer[Local_u8LoopCounter]);
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	4a13      	ldr	r2, [pc, #76]	; (8000a44 <DisplayTimeDate+0xac>)
 80009f6:	4413      	add	r3, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	4813      	ldr	r0, [pc, #76]	; (8000a48 <DisplayTimeDate+0xb0>)
 80009fc:	f7ff fd7f 	bl	80004fe <CLCD_voidSendString>

		Local_u8NumOfStr++;
 8000a00:	79bb      	ldrb	r3, [r7, #6]
 8000a02:	3301      	adds	r3, #1
 8000a04:	71bb      	strb	r3, [r7, #6]

		if (2 == Local_u8NumOfStr)
 8000a06:	79bb      	ldrb	r3, [r7, #6]
 8000a08:	2b02      	cmp	r3, #2
 8000a0a:	d109      	bne.n	8000a20 <DisplayTimeDate+0x88>
		{
			CLCD_voidGoToXY(&CLCDConfig, 1U, ((16U - Local_u8StrLen) >> 1U));
 8000a0c:	797b      	ldrb	r3, [r7, #5]
 8000a0e:	f1c3 0310 	rsb	r3, r3, #16
 8000a12:	085b      	lsrs	r3, r3, #1
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	461a      	mov	r2, r3
 8000a18:	2101      	movs	r1, #1
 8000a1a:	480b      	ldr	r0, [pc, #44]	; (8000a48 <DisplayTimeDate+0xb0>)
 8000a1c:	f7ff fd86 	bl	800052c <CLCD_voidGoToXY>
		}

		Local_u8LoopCounter += (Local_u8StrLen + 1U);
 8000a20:	79fa      	ldrb	r2, [r7, #7]
 8000a22:	797b      	ldrb	r3, [r7, #5]
 8000a24:	4413      	add	r3, r2
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	3301      	adds	r3, #1
 8000a2a:	71fb      	strb	r3, [r7, #7]
	while(('\n' != ReceiveBuffer[Local_u8LoopCounter]) && (Local_u8NumOfStr < 2))
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	4a05      	ldr	r2, [pc, #20]	; (8000a44 <DisplayTimeDate+0xac>)
 8000a30:	5cd3      	ldrb	r3, [r2, r3]
 8000a32:	2b0a      	cmp	r3, #10
 8000a34:	d002      	beq.n	8000a3c <DisplayTimeDate+0xa4>
 8000a36:	79bb      	ldrb	r3, [r7, #6]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d9d2      	bls.n	80009e2 <DisplayTimeDate+0x4a>
	}
}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	200000dc 	.word	0x200000dc
 8000a48:	2000002c 	.word	0x2000002c

08000a4c <HAL_GPIO_EXTI_Callback>:
//
//	RxCmpltFlag = 1;
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	80fb      	strh	r3, [r7, #6]
	/* Clear receiving buffer */
	ClearArray(ReceiveBuffer, sizeof(ReceiveBuffer));
 8000a56:	2123      	movs	r1, #35	; 0x23
 8000a58:	4808      	ldr	r0, [pc, #32]	; (8000a7c <HAL_GPIO_EXTI_Callback+0x30>)
 8000a5a:	f000 f813 	bl	8000a84 <ClearArray>

	SPIReceive(ReceiveBuffer, 17U);
 8000a5e:	2111      	movs	r1, #17
 8000a60:	4806      	ldr	r0, [pc, #24]	; (8000a7c <HAL_GPIO_EXTI_Callback+0x30>)
 8000a62:	f000 f82b 	bl	8000abc <SPIReceive>
//	HAL_SPI_Receive(&hspi1, ReceiveBuffer, 17U, HAL_MAX_DELAY);

	BZR_u8Beep(&BuzConfig, 20U, 500U);
 8000a66:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000a6a:	2114      	movs	r1, #20
 8000a6c:	4804      	ldr	r0, [pc, #16]	; (8000a80 <HAL_GPIO_EXTI_Callback+0x34>)
 8000a6e:	f7ff fb95 	bl	800019c <BZR_u8Beep>
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	200000dc 	.word	0x200000dc
 8000a80:	20000050 	.word	0x20000050

08000a84 <ClearArray>:

void ClearArray(uint8_t *Array, uint16_t Size)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	807b      	strh	r3, [r7, #2]
	for (uint16_t LoopCounter = 0; LoopCounter < Size; LoopCounter++)
 8000a90:	2300      	movs	r3, #0
 8000a92:	81fb      	strh	r3, [r7, #14]
 8000a94:	e007      	b.n	8000aa6 <ClearArray+0x22>
	{
		Array[LoopCounter] = 0;
 8000a96:	89fb      	ldrh	r3, [r7, #14]
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	701a      	strb	r2, [r3, #0]
	for (uint16_t LoopCounter = 0; LoopCounter < Size; LoopCounter++)
 8000aa0:	89fb      	ldrh	r3, [r7, #14]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	81fb      	strh	r3, [r7, #14]
 8000aa6:	89fa      	ldrh	r2, [r7, #14]
 8000aa8:	887b      	ldrh	r3, [r7, #2]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d3f3      	bcc.n	8000a96 <ClearArray+0x12>
	}
}
 8000aae:	bf00      	nop
 8000ab0:	bf00      	nop
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr
	...

08000abc <SPIReceive>:

static inline void SPIReceive(uint8_t *Buf, uint16_t Size)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	807b      	strh	r3, [r7, #2]
	for(uint8_t LoopCounter = 0; LoopCounter < Size; LoopCounter++)
 8000ac8:	2300      	movs	r3, #0
 8000aca:	73fb      	strb	r3, [r7, #15]
 8000acc:	e00b      	b.n	8000ae6 <SPIReceive+0x2a>
	{
		HAL_SPI_Receive(&hspi1, &Buf[LoopCounter], 1U, HAL_MAX_DELAY);
 8000ace:	7bfb      	ldrb	r3, [r7, #15]
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	18d1      	adds	r1, r2, r3
 8000ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad8:	2201      	movs	r2, #1
 8000ada:	4808      	ldr	r0, [pc, #32]	; (8000afc <SPIReceive+0x40>)
 8000adc:	f001 f912 	bl	8001d04 <HAL_SPI_Receive>
	for(uint8_t LoopCounter = 0; LoopCounter < Size; LoopCounter++)
 8000ae0:	7bfb      	ldrb	r3, [r7, #15]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	73fb      	strb	r3, [r7, #15]
 8000ae6:	7bfb      	ldrb	r3, [r7, #15]
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	887a      	ldrh	r2, [r7, #2]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d8ee      	bhi.n	8000ace <SPIReceive+0x12>
	}
}
 8000af0:	bf00      	nop
 8000af2:	bf00      	nop
 8000af4:	3710      	adds	r7, #16
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000080 	.word	0x20000080

08000b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b04:	b672      	cpsid	i
}
 8000b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <Error_Handler+0x8>
	...

08000b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <HAL_MspInit+0x40>)
 8000b14:	699b      	ldr	r3, [r3, #24]
 8000b16:	4a0d      	ldr	r2, [pc, #52]	; (8000b4c <HAL_MspInit+0x40>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6193      	str	r3, [r2, #24]
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <HAL_MspInit+0x40>)
 8000b20:	699b      	ldr	r3, [r3, #24]
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2a:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <HAL_MspInit+0x40>)
 8000b2c:	69db      	ldr	r3, [r3, #28]
 8000b2e:	4a07      	ldr	r2, [pc, #28]	; (8000b4c <HAL_MspInit+0x40>)
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b34:	61d3      	str	r3, [r2, #28]
 8000b36:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <HAL_MspInit+0x40>)
 8000b38:	69db      	ldr	r3, [r3, #28]
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr
 8000b4c:	40021000 	.word	0x40021000

08000b50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b088      	sub	sp, #32
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 0310 	add.w	r3, r7, #16
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a1f      	ldr	r2, [pc, #124]	; (8000be8 <HAL_SPI_MspInit+0x98>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d137      	bne.n	8000be0 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b70:	4b1e      	ldr	r3, [pc, #120]	; (8000bec <HAL_SPI_MspInit+0x9c>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	4a1d      	ldr	r2, [pc, #116]	; (8000bec <HAL_SPI_MspInit+0x9c>)
 8000b76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b7a:	6193      	str	r3, [r2, #24]
 8000b7c:	4b1b      	ldr	r3, [pc, #108]	; (8000bec <HAL_SPI_MspInit+0x9c>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b88:	4b18      	ldr	r3, [pc, #96]	; (8000bec <HAL_SPI_MspInit+0x9c>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	4a17      	ldr	r2, [pc, #92]	; (8000bec <HAL_SPI_MspInit+0x9c>)
 8000b8e:	f043 0304 	orr.w	r3, r3, #4
 8000b92:	6193      	str	r3, [r2, #24]
 8000b94:	4b15      	ldr	r3, [pc, #84]	; (8000bec <HAL_SPI_MspInit+0x9c>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	f003 0304 	and.w	r3, r3, #4
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000ba0:	23a0      	movs	r3, #160	; 0xa0
 8000ba2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bac:	f107 0310 	add.w	r3, r7, #16
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	480f      	ldr	r0, [pc, #60]	; (8000bf0 <HAL_SPI_MspInit+0xa0>)
 8000bb4:	f000 fa90 	bl	80010d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bb8:	2340      	movs	r3, #64	; 0x40
 8000bba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc4:	f107 0310 	add.w	r3, r7, #16
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4809      	ldr	r0, [pc, #36]	; (8000bf0 <HAL_SPI_MspInit+0xa0>)
 8000bcc:	f000 fa84 	bl	80010d8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	2023      	movs	r0, #35	; 0x23
 8000bd6:	f000 f9d0 	bl	8000f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000bda:	2023      	movs	r0, #35	; 0x23
 8000bdc:	f000 f9e9 	bl	8000fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000be0:	bf00      	nop
 8000be2:	3720      	adds	r7, #32
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40013000 	.word	0x40013000
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	40010800 	.word	0x40010800

08000bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <NMI_Handler+0x4>

08000bfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <HardFault_Handler+0x4>

08000c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <MemManage_Handler+0x4>

08000c06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <BusFault_Handler+0x4>

08000c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <UsageFault_Handler+0x4>

08000c12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr

08000c1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr

08000c2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr

08000c36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c3a:	f000 f887 	bl	8000d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000c48:	4802      	ldr	r0, [pc, #8]	; (8000c54 <SPI1_IRQHandler+0x10>)
 8000c4a:	f001 fb23 	bl	8002294 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000080 	.word	0x20000080

08000c58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI_Pin_Pin);
 8000c5c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c60:	f000 fbd6 	bl	8001410 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr

08000c74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c74:	f7ff fff8 	bl	8000c68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c78:	480b      	ldr	r0, [pc, #44]	; (8000ca8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c7a:	490c      	ldr	r1, [pc, #48]	; (8000cac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c7c:	4a0c      	ldr	r2, [pc, #48]	; (8000cb0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c80:	e002      	b.n	8000c88 <LoopCopyDataInit>

08000c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c86:	3304      	adds	r3, #4

08000c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c8c:	d3f9      	bcc.n	8000c82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8e:	4a09      	ldr	r2, [pc, #36]	; (8000cb4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c90:	4c09      	ldr	r4, [pc, #36]	; (8000cb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c94:	e001      	b.n	8000c9a <LoopFillZerobss>

08000c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c98:	3204      	adds	r2, #4

08000c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c9c:	d3fb      	bcc.n	8000c96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c9e:	f001 fcf5 	bl	800268c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ca2:	f7ff fd1b 	bl	80006dc <main>
  bx lr
 8000ca6:	4770      	bx	lr
  ldr r0, =_sdata
 8000ca8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cac:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000cb0:	08002724 	.word	0x08002724
  ldr r2, =_sbss
 8000cb4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000cb8:	20000104 	.word	0x20000104

08000cbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cbc:	e7fe      	b.n	8000cbc <ADC1_2_IRQHandler>
	...

08000cc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc4:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <HAL_Init+0x28>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a07      	ldr	r2, [pc, #28]	; (8000ce8 <HAL_Init+0x28>)
 8000cca:	f043 0310 	orr.w	r3, r3, #16
 8000cce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd0:	2003      	movs	r0, #3
 8000cd2:	f000 f947 	bl	8000f64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cd6:	200f      	movs	r0, #15
 8000cd8:	f000 f808 	bl	8000cec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cdc:	f7ff ff16 	bl	8000b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40022000 	.word	0x40022000

08000cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cf4:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <HAL_InitTick+0x54>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <HAL_InitTick+0x58>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 f95f 	bl	8000fce <HAL_SYSTICK_Config>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e00e      	b.n	8000d38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2b0f      	cmp	r3, #15
 8000d1e:	d80a      	bhi.n	8000d36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d20:	2200      	movs	r2, #0
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	f04f 30ff 	mov.w	r0, #4294967295
 8000d28:	f000 f927 	bl	8000f7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d2c:	4a06      	ldr	r2, [pc, #24]	; (8000d48 <HAL_InitTick+0x5c>)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d32:	2300      	movs	r3, #0
 8000d34:	e000      	b.n	8000d38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000058 	.word	0x20000058
 8000d44:	20000060 	.word	0x20000060
 8000d48:	2000005c 	.word	0x2000005c

08000d4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <HAL_IncTick+0x1c>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	461a      	mov	r2, r3
 8000d56:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <HAL_IncTick+0x20>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	4a03      	ldr	r2, [pc, #12]	; (8000d6c <HAL_IncTick+0x20>)
 8000d5e:	6013      	str	r3, [r2, #0]
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr
 8000d68:	20000060 	.word	0x20000060
 8000d6c:	20000100 	.word	0x20000100

08000d70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return uwTick;
 8000d74:	4b02      	ldr	r3, [pc, #8]	; (8000d80 <HAL_GetTick+0x10>)
 8000d76:	681b      	ldr	r3, [r3, #0]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr
 8000d80:	20000100 	.word	0x20000100

08000d84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d8c:	f7ff fff0 	bl	8000d70 <HAL_GetTick>
 8000d90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d9c:	d005      	beq.n	8000daa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <HAL_Delay+0x44>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	461a      	mov	r2, r3
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	4413      	add	r3, r2
 8000da8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000daa:	bf00      	nop
 8000dac:	f7ff ffe0 	bl	8000d70 <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	68fa      	ldr	r2, [r7, #12]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d8f7      	bhi.n	8000dac <HAL_Delay+0x28>
  {
  }
}
 8000dbc:	bf00      	nop
 8000dbe:	bf00      	nop
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000060 	.word	0x20000060

08000dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <__NVIC_SetPriorityGrouping+0x44>)
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000de8:	4013      	ands	r3, r2
 8000dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000df4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dfe:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <__NVIC_SetPriorityGrouping+0x44>)
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	60d3      	str	r3, [r2, #12]
}
 8000e04:	bf00      	nop
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e18:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <__NVIC_GetPriorityGrouping+0x18>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	0a1b      	lsrs	r3, r3, #8
 8000e1e:	f003 0307 	and.w	r3, r3, #7
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	db0b      	blt.n	8000e5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	f003 021f 	and.w	r2, r3, #31
 8000e48:	4906      	ldr	r1, [pc, #24]	; (8000e64 <__NVIC_EnableIRQ+0x34>)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	095b      	lsrs	r3, r3, #5
 8000e50:	2001      	movs	r0, #1
 8000e52:	fa00 f202 	lsl.w	r2, r0, r2
 8000e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr
 8000e64:	e000e100 	.word	0xe000e100

08000e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	6039      	str	r1, [r7, #0]
 8000e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	db0a      	blt.n	8000e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	490c      	ldr	r1, [pc, #48]	; (8000eb4 <__NVIC_SetPriority+0x4c>)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	0112      	lsls	r2, r2, #4
 8000e88:	b2d2      	uxtb	r2, r2
 8000e8a:	440b      	add	r3, r1
 8000e8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e90:	e00a      	b.n	8000ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4908      	ldr	r1, [pc, #32]	; (8000eb8 <__NVIC_SetPriority+0x50>)
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	f003 030f 	and.w	r3, r3, #15
 8000e9e:	3b04      	subs	r3, #4
 8000ea0:	0112      	lsls	r2, r2, #4
 8000ea2:	b2d2      	uxtb	r2, r2
 8000ea4:	440b      	add	r3, r1
 8000ea6:	761a      	strb	r2, [r3, #24]
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	e000e100 	.word	0xe000e100
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b089      	sub	sp, #36	; 0x24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	f1c3 0307 	rsb	r3, r3, #7
 8000ed6:	2b04      	cmp	r3, #4
 8000ed8:	bf28      	it	cs
 8000eda:	2304      	movcs	r3, #4
 8000edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	3304      	adds	r3, #4
 8000ee2:	2b06      	cmp	r3, #6
 8000ee4:	d902      	bls.n	8000eec <NVIC_EncodePriority+0x30>
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3b03      	subs	r3, #3
 8000eea:	e000      	b.n	8000eee <NVIC_EncodePriority+0x32>
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43da      	mvns	r2, r3
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	401a      	ands	r2, r3
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f04:	f04f 31ff 	mov.w	r1, #4294967295
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0e:	43d9      	mvns	r1, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f14:	4313      	orrs	r3, r2
         );
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3724      	adds	r7, #36	; 0x24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr

08000f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f30:	d301      	bcc.n	8000f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f32:	2301      	movs	r3, #1
 8000f34:	e00f      	b.n	8000f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f36:	4a0a      	ldr	r2, [pc, #40]	; (8000f60 <SysTick_Config+0x40>)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f3e:	210f      	movs	r1, #15
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	f7ff ff90 	bl	8000e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <SysTick_Config+0x40>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f4e:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <SysTick_Config+0x40>)
 8000f50:	2207      	movs	r2, #7
 8000f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	e000e010 	.word	0xe000e010

08000f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff ff2d 	bl	8000dcc <__NVIC_SetPriorityGrouping>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b086      	sub	sp, #24
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	4603      	mov	r3, r0
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
 8000f86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f8c:	f7ff ff42 	bl	8000e14 <__NVIC_GetPriorityGrouping>
 8000f90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	68b9      	ldr	r1, [r7, #8]
 8000f96:	6978      	ldr	r0, [r7, #20]
 8000f98:	f7ff ff90 	bl	8000ebc <NVIC_EncodePriority>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ff5f 	bl	8000e68 <__NVIC_SetPriority>
}
 8000faa:	bf00      	nop
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	4603      	mov	r3, r0
 8000fba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff ff35 	bl	8000e30 <__NVIC_EnableIRQ>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f7ff ffa2 	bl	8000f20 <SysTick_Config>
 8000fdc:	4603      	mov	r3, r0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
	...

08000fe8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d005      	beq.n	800100c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2204      	movs	r2, #4
 8001004:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	73fb      	strb	r3, [r7, #15]
 800100a:	e051      	b.n	80010b0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f022 020e 	bic.w	r2, r2, #14
 800101a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f022 0201 	bic.w	r2, r2, #1
 800102a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a22      	ldr	r2, [pc, #136]	; (80010bc <HAL_DMA_Abort_IT+0xd4>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d029      	beq.n	800108a <HAL_DMA_Abort_IT+0xa2>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a21      	ldr	r2, [pc, #132]	; (80010c0 <HAL_DMA_Abort_IT+0xd8>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d022      	beq.n	8001086 <HAL_DMA_Abort_IT+0x9e>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a1f      	ldr	r2, [pc, #124]	; (80010c4 <HAL_DMA_Abort_IT+0xdc>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d01a      	beq.n	8001080 <HAL_DMA_Abort_IT+0x98>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a1e      	ldr	r2, [pc, #120]	; (80010c8 <HAL_DMA_Abort_IT+0xe0>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d012      	beq.n	800107a <HAL_DMA_Abort_IT+0x92>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a1c      	ldr	r2, [pc, #112]	; (80010cc <HAL_DMA_Abort_IT+0xe4>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d00a      	beq.n	8001074 <HAL_DMA_Abort_IT+0x8c>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a1b      	ldr	r2, [pc, #108]	; (80010d0 <HAL_DMA_Abort_IT+0xe8>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d102      	bne.n	800106e <HAL_DMA_Abort_IT+0x86>
 8001068:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800106c:	e00e      	b.n	800108c <HAL_DMA_Abort_IT+0xa4>
 800106e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001072:	e00b      	b.n	800108c <HAL_DMA_Abort_IT+0xa4>
 8001074:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001078:	e008      	b.n	800108c <HAL_DMA_Abort_IT+0xa4>
 800107a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800107e:	e005      	b.n	800108c <HAL_DMA_Abort_IT+0xa4>
 8001080:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001084:	e002      	b.n	800108c <HAL_DMA_Abort_IT+0xa4>
 8001086:	2310      	movs	r3, #16
 8001088:	e000      	b.n	800108c <HAL_DMA_Abort_IT+0xa4>
 800108a:	2301      	movs	r3, #1
 800108c:	4a11      	ldr	r2, [pc, #68]	; (80010d4 <HAL_DMA_Abort_IT+0xec>)
 800108e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2201      	movs	r2, #1
 8001094:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d003      	beq.n	80010b0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	4798      	blx	r3
    } 
  }
  return status;
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40020008 	.word	0x40020008
 80010c0:	4002001c 	.word	0x4002001c
 80010c4:	40020030 	.word	0x40020030
 80010c8:	40020044 	.word	0x40020044
 80010cc:	40020058 	.word	0x40020058
 80010d0:	4002006c 	.word	0x4002006c
 80010d4:	40020000 	.word	0x40020000

080010d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d8:	b480      	push	{r7}
 80010da:	b08b      	sub	sp, #44	; 0x2c
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010e2:	2300      	movs	r3, #0
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010e6:	2300      	movs	r3, #0
 80010e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ea:	e169      	b.n	80013c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010ec:	2201      	movs	r2, #1
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	69fa      	ldr	r2, [r7, #28]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	429a      	cmp	r2, r3
 8001106:	f040 8158 	bne.w	80013ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	4a9a      	ldr	r2, [pc, #616]	; (8001378 <HAL_GPIO_Init+0x2a0>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d05e      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
 8001114:	4a98      	ldr	r2, [pc, #608]	; (8001378 <HAL_GPIO_Init+0x2a0>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d875      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 800111a:	4a98      	ldr	r2, [pc, #608]	; (800137c <HAL_GPIO_Init+0x2a4>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d058      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
 8001120:	4a96      	ldr	r2, [pc, #600]	; (800137c <HAL_GPIO_Init+0x2a4>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d86f      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 8001126:	4a96      	ldr	r2, [pc, #600]	; (8001380 <HAL_GPIO_Init+0x2a8>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d052      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
 800112c:	4a94      	ldr	r2, [pc, #592]	; (8001380 <HAL_GPIO_Init+0x2a8>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d869      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 8001132:	4a94      	ldr	r2, [pc, #592]	; (8001384 <HAL_GPIO_Init+0x2ac>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d04c      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
 8001138:	4a92      	ldr	r2, [pc, #584]	; (8001384 <HAL_GPIO_Init+0x2ac>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d863      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 800113e:	4a92      	ldr	r2, [pc, #584]	; (8001388 <HAL_GPIO_Init+0x2b0>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d046      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
 8001144:	4a90      	ldr	r2, [pc, #576]	; (8001388 <HAL_GPIO_Init+0x2b0>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d85d      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 800114a:	2b12      	cmp	r3, #18
 800114c:	d82a      	bhi.n	80011a4 <HAL_GPIO_Init+0xcc>
 800114e:	2b12      	cmp	r3, #18
 8001150:	d859      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 8001152:	a201      	add	r2, pc, #4	; (adr r2, 8001158 <HAL_GPIO_Init+0x80>)
 8001154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001158:	080011d3 	.word	0x080011d3
 800115c:	080011ad 	.word	0x080011ad
 8001160:	080011bf 	.word	0x080011bf
 8001164:	08001201 	.word	0x08001201
 8001168:	08001207 	.word	0x08001207
 800116c:	08001207 	.word	0x08001207
 8001170:	08001207 	.word	0x08001207
 8001174:	08001207 	.word	0x08001207
 8001178:	08001207 	.word	0x08001207
 800117c:	08001207 	.word	0x08001207
 8001180:	08001207 	.word	0x08001207
 8001184:	08001207 	.word	0x08001207
 8001188:	08001207 	.word	0x08001207
 800118c:	08001207 	.word	0x08001207
 8001190:	08001207 	.word	0x08001207
 8001194:	08001207 	.word	0x08001207
 8001198:	08001207 	.word	0x08001207
 800119c:	080011b5 	.word	0x080011b5
 80011a0:	080011c9 	.word	0x080011c9
 80011a4:	4a79      	ldr	r2, [pc, #484]	; (800138c <HAL_GPIO_Init+0x2b4>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d013      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011aa:	e02c      	b.n	8001206 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	623b      	str	r3, [r7, #32]
          break;
 80011b2:	e029      	b.n	8001208 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	3304      	adds	r3, #4
 80011ba:	623b      	str	r3, [r7, #32]
          break;
 80011bc:	e024      	b.n	8001208 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	3308      	adds	r3, #8
 80011c4:	623b      	str	r3, [r7, #32]
          break;
 80011c6:	e01f      	b.n	8001208 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	330c      	adds	r3, #12
 80011ce:	623b      	str	r3, [r7, #32]
          break;
 80011d0:	e01a      	b.n	8001208 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d102      	bne.n	80011e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011da:	2304      	movs	r3, #4
 80011dc:	623b      	str	r3, [r7, #32]
          break;
 80011de:	e013      	b.n	8001208 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d105      	bne.n	80011f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011e8:	2308      	movs	r3, #8
 80011ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	69fa      	ldr	r2, [r7, #28]
 80011f0:	611a      	str	r2, [r3, #16]
          break;
 80011f2:	e009      	b.n	8001208 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011f4:	2308      	movs	r3, #8
 80011f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	69fa      	ldr	r2, [r7, #28]
 80011fc:	615a      	str	r2, [r3, #20]
          break;
 80011fe:	e003      	b.n	8001208 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001200:	2300      	movs	r3, #0
 8001202:	623b      	str	r3, [r7, #32]
          break;
 8001204:	e000      	b.n	8001208 <HAL_GPIO_Init+0x130>
          break;
 8001206:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	2bff      	cmp	r3, #255	; 0xff
 800120c:	d801      	bhi.n	8001212 <HAL_GPIO_Init+0x13a>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	e001      	b.n	8001216 <HAL_GPIO_Init+0x13e>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3304      	adds	r3, #4
 8001216:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	2bff      	cmp	r3, #255	; 0xff
 800121c:	d802      	bhi.n	8001224 <HAL_GPIO_Init+0x14c>
 800121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	e002      	b.n	800122a <HAL_GPIO_Init+0x152>
 8001224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001226:	3b08      	subs	r3, #8
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	210f      	movs	r1, #15
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	fa01 f303 	lsl.w	r3, r1, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	401a      	ands	r2, r3
 800123c:	6a39      	ldr	r1, [r7, #32]
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	fa01 f303 	lsl.w	r3, r1, r3
 8001244:	431a      	orrs	r2, r3
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001252:	2b00      	cmp	r3, #0
 8001254:	f000 80b1 	beq.w	80013ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001258:	4b4d      	ldr	r3, [pc, #308]	; (8001390 <HAL_GPIO_Init+0x2b8>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a4c      	ldr	r2, [pc, #304]	; (8001390 <HAL_GPIO_Init+0x2b8>)
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	6193      	str	r3, [r2, #24]
 8001264:	4b4a      	ldr	r3, [pc, #296]	; (8001390 <HAL_GPIO_Init+0x2b8>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001270:	4a48      	ldr	r2, [pc, #288]	; (8001394 <HAL_GPIO_Init+0x2bc>)
 8001272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001274:	089b      	lsrs	r3, r3, #2
 8001276:	3302      	adds	r3, #2
 8001278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800127e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	220f      	movs	r2, #15
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	4013      	ands	r3, r2
 8001292:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a40      	ldr	r2, [pc, #256]	; (8001398 <HAL_GPIO_Init+0x2c0>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d013      	beq.n	80012c4 <HAL_GPIO_Init+0x1ec>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a3f      	ldr	r2, [pc, #252]	; (800139c <HAL_GPIO_Init+0x2c4>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d00d      	beq.n	80012c0 <HAL_GPIO_Init+0x1e8>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a3e      	ldr	r2, [pc, #248]	; (80013a0 <HAL_GPIO_Init+0x2c8>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d007      	beq.n	80012bc <HAL_GPIO_Init+0x1e4>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a3d      	ldr	r2, [pc, #244]	; (80013a4 <HAL_GPIO_Init+0x2cc>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d101      	bne.n	80012b8 <HAL_GPIO_Init+0x1e0>
 80012b4:	2303      	movs	r3, #3
 80012b6:	e006      	b.n	80012c6 <HAL_GPIO_Init+0x1ee>
 80012b8:	2304      	movs	r3, #4
 80012ba:	e004      	b.n	80012c6 <HAL_GPIO_Init+0x1ee>
 80012bc:	2302      	movs	r3, #2
 80012be:	e002      	b.n	80012c6 <HAL_GPIO_Init+0x1ee>
 80012c0:	2301      	movs	r3, #1
 80012c2:	e000      	b.n	80012c6 <HAL_GPIO_Init+0x1ee>
 80012c4:	2300      	movs	r3, #0
 80012c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012c8:	f002 0203 	and.w	r2, r2, #3
 80012cc:	0092      	lsls	r2, r2, #2
 80012ce:	4093      	lsls	r3, r2
 80012d0:	68fa      	ldr	r2, [r7, #12]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012d6:	492f      	ldr	r1, [pc, #188]	; (8001394 <HAL_GPIO_Init+0x2bc>)
 80012d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012da:	089b      	lsrs	r3, r3, #2
 80012dc:	3302      	adds	r3, #2
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d006      	beq.n	80012fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012f0:	4b2d      	ldr	r3, [pc, #180]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	492c      	ldr	r1, [pc, #176]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	608b      	str	r3, [r1, #8]
 80012fc:	e006      	b.n	800130c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012fe:	4b2a      	ldr	r3, [pc, #168]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	43db      	mvns	r3, r3
 8001306:	4928      	ldr	r1, [pc, #160]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001308:	4013      	ands	r3, r2
 800130a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d006      	beq.n	8001326 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001318:	4b23      	ldr	r3, [pc, #140]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 800131a:	68da      	ldr	r2, [r3, #12]
 800131c:	4922      	ldr	r1, [pc, #136]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	4313      	orrs	r3, r2
 8001322:	60cb      	str	r3, [r1, #12]
 8001324:	e006      	b.n	8001334 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001326:	4b20      	ldr	r3, [pc, #128]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001328:	68da      	ldr	r2, [r3, #12]
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	43db      	mvns	r3, r3
 800132e:	491e      	ldr	r1, [pc, #120]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001330:	4013      	ands	r3, r2
 8001332:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d006      	beq.n	800134e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001340:	4b19      	ldr	r3, [pc, #100]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	4918      	ldr	r1, [pc, #96]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	4313      	orrs	r3, r2
 800134a:	604b      	str	r3, [r1, #4]
 800134c:	e006      	b.n	800135c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800134e:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	43db      	mvns	r3, r3
 8001356:	4914      	ldr	r1, [pc, #80]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001358:	4013      	ands	r3, r2
 800135a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d021      	beq.n	80013ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001368:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	490e      	ldr	r1, [pc, #56]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	4313      	orrs	r3, r2
 8001372:	600b      	str	r3, [r1, #0]
 8001374:	e021      	b.n	80013ba <HAL_GPIO_Init+0x2e2>
 8001376:	bf00      	nop
 8001378:	10320000 	.word	0x10320000
 800137c:	10310000 	.word	0x10310000
 8001380:	10220000 	.word	0x10220000
 8001384:	10210000 	.word	0x10210000
 8001388:	10120000 	.word	0x10120000
 800138c:	10110000 	.word	0x10110000
 8001390:	40021000 	.word	0x40021000
 8001394:	40010000 	.word	0x40010000
 8001398:	40010800 	.word	0x40010800
 800139c:	40010c00 	.word	0x40010c00
 80013a0:	40011000 	.word	0x40011000
 80013a4:	40011400 	.word	0x40011400
 80013a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013ac:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <HAL_GPIO_Init+0x304>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	43db      	mvns	r3, r3
 80013b4:	4909      	ldr	r1, [pc, #36]	; (80013dc <HAL_GPIO_Init+0x304>)
 80013b6:	4013      	ands	r3, r2
 80013b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013bc:	3301      	adds	r3, #1
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c6:	fa22 f303 	lsr.w	r3, r2, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f47f ae8e 	bne.w	80010ec <HAL_GPIO_Init+0x14>
  }
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	372c      	adds	r7, #44	; 0x2c
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr
 80013dc:	40010400 	.word	0x40010400

080013e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	807b      	strh	r3, [r7, #2]
 80013ec:	4613      	mov	r3, r2
 80013ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013f0:	787b      	ldrb	r3, [r7, #1]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013f6:	887a      	ldrh	r2, [r7, #2]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013fc:	e003      	b.n	8001406 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013fe:	887b      	ldrh	r3, [r7, #2]
 8001400:	041a      	lsls	r2, r3, #16
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	611a      	str	r2, [r3, #16]
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr

08001410 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800141a:	4b08      	ldr	r3, [pc, #32]	; (800143c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800141c:	695a      	ldr	r2, [r3, #20]
 800141e:	88fb      	ldrh	r3, [r7, #6]
 8001420:	4013      	ands	r3, r2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d006      	beq.n	8001434 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001426:	4a05      	ldr	r2, [pc, #20]	; (800143c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001428:	88fb      	ldrh	r3, [r7, #6]
 800142a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800142c:	88fb      	ldrh	r3, [r7, #6]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff fb0c 	bl	8000a4c <HAL_GPIO_EXTI_Callback>
  }
}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40010400 	.word	0x40010400

08001440 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e272      	b.n	8001938 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	f000 8087 	beq.w	800156e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001460:	4b92      	ldr	r3, [pc, #584]	; (80016ac <HAL_RCC_OscConfig+0x26c>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f003 030c 	and.w	r3, r3, #12
 8001468:	2b04      	cmp	r3, #4
 800146a:	d00c      	beq.n	8001486 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800146c:	4b8f      	ldr	r3, [pc, #572]	; (80016ac <HAL_RCC_OscConfig+0x26c>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 030c 	and.w	r3, r3, #12
 8001474:	2b08      	cmp	r3, #8
 8001476:	d112      	bne.n	800149e <HAL_RCC_OscConfig+0x5e>
 8001478:	4b8c      	ldr	r3, [pc, #560]	; (80016ac <HAL_RCC_OscConfig+0x26c>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001484:	d10b      	bne.n	800149e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001486:	4b89      	ldr	r3, [pc, #548]	; (80016ac <HAL_RCC_OscConfig+0x26c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d06c      	beq.n	800156c <HAL_RCC_OscConfig+0x12c>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d168      	bne.n	800156c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e24c      	b.n	8001938 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014a6:	d106      	bne.n	80014b6 <HAL_RCC_OscConfig+0x76>
 80014a8:	4b80      	ldr	r3, [pc, #512]	; (80016ac <HAL_RCC_OscConfig+0x26c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a7f      	ldr	r2, [pc, #508]	; (80016ac <HAL_RCC_OscConfig+0x26c>)
 80014ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b2:	6013      	str	r3, [r2, #0]
 80014b4:	e02e      	b.n	8001514 <HAL_RCC_OscConfig+0xd4>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d10c      	bne.n	80014d8 <HAL_RCC_OscConfig+0x98>
 80014be:	4b7b      	ldr	r3, [pc, #492]	; (80016ac <HAL_RCC_OscConfig+0x26c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a7a      	ldr	r2, [pc, #488]	; (80016ac <HAL_RCC_OscConfig+0x26c>)
 80014c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	4b78      	ldr	r3, [pc, #480]	; (80016ac <HAL_RCC_OscConfig+0x26c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a77      	ldr	r2, [pc, #476]	; (80016ac <HAL_RCC_OscConfig+0x26c>)
 80014d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	e01d      	b.n	8001514 <HAL_RCC_OscConfig+0xd4>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014e0:	d10c      	bne.n	80014fc <HAL_RCC_OscConfig+0xbc>
 80014e2:	4b72      	ldr	r3, [pc, #456]	; (80016ac <HAL_RCC_OscConfig+0x26c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a71      	ldr	r2, [pc, #452]	; (80016ac <HAL_RCC_OscConfig+0x26c>)
 80014e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	4b6f      	ldr	r3, [pc, #444]	; (80016ac <HAL_RCC_OscConfig+0x26c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a6e      	ldr	r2, [pc, #440]	; (80016ac <HAL_RCC_OscConfig+0x26c>)
 80014f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	e00b      	b.n	8001514 <HAL_RCC_OscConfig+0xd4>
 80014fc:	4b6b      	ldr	r3, [pc, #428]	; (80016ac <HAL_RCC_OscConfig+0x26c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a6a      	ldr	r2, [pc, #424]	; (80016ac <HAL_RCC_OscConfig+0x26c>)
 8001502:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	4b68      	ldr	r3, [pc, #416]	; (80016ac <HAL_RCC_OscConfig+0x26c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a67      	ldr	r2, [pc, #412]	; (80016ac <HAL_RCC_OscConfig+0x26c>)
 800150e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001512:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d013      	beq.n	8001544 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151c:	f7ff fc28 	bl	8000d70 <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001524:	f7ff fc24 	bl	8000d70 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b64      	cmp	r3, #100	; 0x64
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e200      	b.n	8001938 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001536:	4b5d      	ldr	r3, [pc, #372]	; (80016ac <HAL_RCC_OscConfig+0x26c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d0f0      	beq.n	8001524 <HAL_RCC_OscConfig+0xe4>
 8001542:	e014      	b.n	800156e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001544:	f7ff fc14 	bl	8000d70 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800154c:	f7ff fc10 	bl	8000d70 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b64      	cmp	r3, #100	; 0x64
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e1ec      	b.n	8001938 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155e:	4b53      	ldr	r3, [pc, #332]	; (80016ac <HAL_RCC_OscConfig+0x26c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f0      	bne.n	800154c <HAL_RCC_OscConfig+0x10c>
 800156a:	e000      	b.n	800156e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800156c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d063      	beq.n	8001642 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800157a:	4b4c      	ldr	r3, [pc, #304]	; (80016ac <HAL_RCC_OscConfig+0x26c>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f003 030c 	and.w	r3, r3, #12
 8001582:	2b00      	cmp	r3, #0
 8001584:	d00b      	beq.n	800159e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001586:	4b49      	ldr	r3, [pc, #292]	; (80016ac <HAL_RCC_OscConfig+0x26c>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f003 030c 	and.w	r3, r3, #12
 800158e:	2b08      	cmp	r3, #8
 8001590:	d11c      	bne.n	80015cc <HAL_RCC_OscConfig+0x18c>
 8001592:	4b46      	ldr	r3, [pc, #280]	; (80016ac <HAL_RCC_OscConfig+0x26c>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d116      	bne.n	80015cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800159e:	4b43      	ldr	r3, [pc, #268]	; (80016ac <HAL_RCC_OscConfig+0x26c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d005      	beq.n	80015b6 <HAL_RCC_OscConfig+0x176>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d001      	beq.n	80015b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e1c0      	b.n	8001938 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b6:	4b3d      	ldr	r3, [pc, #244]	; (80016ac <HAL_RCC_OscConfig+0x26c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	4939      	ldr	r1, [pc, #228]	; (80016ac <HAL_RCC_OscConfig+0x26c>)
 80015c6:	4313      	orrs	r3, r2
 80015c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ca:	e03a      	b.n	8001642 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d020      	beq.n	8001616 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015d4:	4b36      	ldr	r3, [pc, #216]	; (80016b0 <HAL_RCC_OscConfig+0x270>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015da:	f7ff fbc9 	bl	8000d70 <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e0:	e008      	b.n	80015f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e2:	f7ff fbc5 	bl	8000d70 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e1a1      	b.n	8001938 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f4:	4b2d      	ldr	r3, [pc, #180]	; (80016ac <HAL_RCC_OscConfig+0x26c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d0f0      	beq.n	80015e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001600:	4b2a      	ldr	r3, [pc, #168]	; (80016ac <HAL_RCC_OscConfig+0x26c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	695b      	ldr	r3, [r3, #20]
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	4927      	ldr	r1, [pc, #156]	; (80016ac <HAL_RCC_OscConfig+0x26c>)
 8001610:	4313      	orrs	r3, r2
 8001612:	600b      	str	r3, [r1, #0]
 8001614:	e015      	b.n	8001642 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001616:	4b26      	ldr	r3, [pc, #152]	; (80016b0 <HAL_RCC_OscConfig+0x270>)
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161c:	f7ff fba8 	bl	8000d70 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001624:	f7ff fba4 	bl	8000d70 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e180      	b.n	8001938 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001636:	4b1d      	ldr	r3, [pc, #116]	; (80016ac <HAL_RCC_OscConfig+0x26c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f0      	bne.n	8001624 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0308 	and.w	r3, r3, #8
 800164a:	2b00      	cmp	r3, #0
 800164c:	d03a      	beq.n	80016c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d019      	beq.n	800168a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001656:	4b17      	ldr	r3, [pc, #92]	; (80016b4 <HAL_RCC_OscConfig+0x274>)
 8001658:	2201      	movs	r2, #1
 800165a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165c:	f7ff fb88 	bl	8000d70 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001664:	f7ff fb84 	bl	8000d70 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e160      	b.n	8001938 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001676:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <HAL_RCC_OscConfig+0x26c>)
 8001678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d0f0      	beq.n	8001664 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001682:	2001      	movs	r0, #1
 8001684:	f000 fa9c 	bl	8001bc0 <RCC_Delay>
 8001688:	e01c      	b.n	80016c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800168a:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <HAL_RCC_OscConfig+0x274>)
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001690:	f7ff fb6e 	bl	8000d70 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001696:	e00f      	b.n	80016b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001698:	f7ff fb6a 	bl	8000d70 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d908      	bls.n	80016b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e146      	b.n	8001938 <HAL_RCC_OscConfig+0x4f8>
 80016aa:	bf00      	nop
 80016ac:	40021000 	.word	0x40021000
 80016b0:	42420000 	.word	0x42420000
 80016b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b8:	4b92      	ldr	r3, [pc, #584]	; (8001904 <HAL_RCC_OscConfig+0x4c4>)
 80016ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1e9      	bne.n	8001698 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 80a6 	beq.w	800181e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016d2:	2300      	movs	r3, #0
 80016d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016d6:	4b8b      	ldr	r3, [pc, #556]	; (8001904 <HAL_RCC_OscConfig+0x4c4>)
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d10d      	bne.n	80016fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016e2:	4b88      	ldr	r3, [pc, #544]	; (8001904 <HAL_RCC_OscConfig+0x4c4>)
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	4a87      	ldr	r2, [pc, #540]	; (8001904 <HAL_RCC_OscConfig+0x4c4>)
 80016e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ec:	61d3      	str	r3, [r2, #28]
 80016ee:	4b85      	ldr	r3, [pc, #532]	; (8001904 <HAL_RCC_OscConfig+0x4c4>)
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016fa:	2301      	movs	r3, #1
 80016fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fe:	4b82      	ldr	r3, [pc, #520]	; (8001908 <HAL_RCC_OscConfig+0x4c8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001706:	2b00      	cmp	r3, #0
 8001708:	d118      	bne.n	800173c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800170a:	4b7f      	ldr	r3, [pc, #508]	; (8001908 <HAL_RCC_OscConfig+0x4c8>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a7e      	ldr	r2, [pc, #504]	; (8001908 <HAL_RCC_OscConfig+0x4c8>)
 8001710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001714:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001716:	f7ff fb2b 	bl	8000d70 <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800171e:	f7ff fb27 	bl	8000d70 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b64      	cmp	r3, #100	; 0x64
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e103      	b.n	8001938 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001730:	4b75      	ldr	r3, [pc, #468]	; (8001908 <HAL_RCC_OscConfig+0x4c8>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0f0      	beq.n	800171e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d106      	bne.n	8001752 <HAL_RCC_OscConfig+0x312>
 8001744:	4b6f      	ldr	r3, [pc, #444]	; (8001904 <HAL_RCC_OscConfig+0x4c4>)
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	4a6e      	ldr	r2, [pc, #440]	; (8001904 <HAL_RCC_OscConfig+0x4c4>)
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	6213      	str	r3, [r2, #32]
 8001750:	e02d      	b.n	80017ae <HAL_RCC_OscConfig+0x36e>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d10c      	bne.n	8001774 <HAL_RCC_OscConfig+0x334>
 800175a:	4b6a      	ldr	r3, [pc, #424]	; (8001904 <HAL_RCC_OscConfig+0x4c4>)
 800175c:	6a1b      	ldr	r3, [r3, #32]
 800175e:	4a69      	ldr	r2, [pc, #420]	; (8001904 <HAL_RCC_OscConfig+0x4c4>)
 8001760:	f023 0301 	bic.w	r3, r3, #1
 8001764:	6213      	str	r3, [r2, #32]
 8001766:	4b67      	ldr	r3, [pc, #412]	; (8001904 <HAL_RCC_OscConfig+0x4c4>)
 8001768:	6a1b      	ldr	r3, [r3, #32]
 800176a:	4a66      	ldr	r2, [pc, #408]	; (8001904 <HAL_RCC_OscConfig+0x4c4>)
 800176c:	f023 0304 	bic.w	r3, r3, #4
 8001770:	6213      	str	r3, [r2, #32]
 8001772:	e01c      	b.n	80017ae <HAL_RCC_OscConfig+0x36e>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	2b05      	cmp	r3, #5
 800177a:	d10c      	bne.n	8001796 <HAL_RCC_OscConfig+0x356>
 800177c:	4b61      	ldr	r3, [pc, #388]	; (8001904 <HAL_RCC_OscConfig+0x4c4>)
 800177e:	6a1b      	ldr	r3, [r3, #32]
 8001780:	4a60      	ldr	r2, [pc, #384]	; (8001904 <HAL_RCC_OscConfig+0x4c4>)
 8001782:	f043 0304 	orr.w	r3, r3, #4
 8001786:	6213      	str	r3, [r2, #32]
 8001788:	4b5e      	ldr	r3, [pc, #376]	; (8001904 <HAL_RCC_OscConfig+0x4c4>)
 800178a:	6a1b      	ldr	r3, [r3, #32]
 800178c:	4a5d      	ldr	r2, [pc, #372]	; (8001904 <HAL_RCC_OscConfig+0x4c4>)
 800178e:	f043 0301 	orr.w	r3, r3, #1
 8001792:	6213      	str	r3, [r2, #32]
 8001794:	e00b      	b.n	80017ae <HAL_RCC_OscConfig+0x36e>
 8001796:	4b5b      	ldr	r3, [pc, #364]	; (8001904 <HAL_RCC_OscConfig+0x4c4>)
 8001798:	6a1b      	ldr	r3, [r3, #32]
 800179a:	4a5a      	ldr	r2, [pc, #360]	; (8001904 <HAL_RCC_OscConfig+0x4c4>)
 800179c:	f023 0301 	bic.w	r3, r3, #1
 80017a0:	6213      	str	r3, [r2, #32]
 80017a2:	4b58      	ldr	r3, [pc, #352]	; (8001904 <HAL_RCC_OscConfig+0x4c4>)
 80017a4:	6a1b      	ldr	r3, [r3, #32]
 80017a6:	4a57      	ldr	r2, [pc, #348]	; (8001904 <HAL_RCC_OscConfig+0x4c4>)
 80017a8:	f023 0304 	bic.w	r3, r3, #4
 80017ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d015      	beq.n	80017e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b6:	f7ff fadb 	bl	8000d70 <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017bc:	e00a      	b.n	80017d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017be:	f7ff fad7 	bl	8000d70 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e0b1      	b.n	8001938 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d4:	4b4b      	ldr	r3, [pc, #300]	; (8001904 <HAL_RCC_OscConfig+0x4c4>)
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0ee      	beq.n	80017be <HAL_RCC_OscConfig+0x37e>
 80017e0:	e014      	b.n	800180c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e2:	f7ff fac5 	bl	8000d70 <HAL_GetTick>
 80017e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e8:	e00a      	b.n	8001800 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ea:	f7ff fac1 	bl	8000d70 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e09b      	b.n	8001938 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001800:	4b40      	ldr	r3, [pc, #256]	; (8001904 <HAL_RCC_OscConfig+0x4c4>)
 8001802:	6a1b      	ldr	r3, [r3, #32]
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1ee      	bne.n	80017ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800180c:	7dfb      	ldrb	r3, [r7, #23]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d105      	bne.n	800181e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001812:	4b3c      	ldr	r3, [pc, #240]	; (8001904 <HAL_RCC_OscConfig+0x4c4>)
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	4a3b      	ldr	r2, [pc, #236]	; (8001904 <HAL_RCC_OscConfig+0x4c4>)
 8001818:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800181c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	2b00      	cmp	r3, #0
 8001824:	f000 8087 	beq.w	8001936 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001828:	4b36      	ldr	r3, [pc, #216]	; (8001904 <HAL_RCC_OscConfig+0x4c4>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 030c 	and.w	r3, r3, #12
 8001830:	2b08      	cmp	r3, #8
 8001832:	d061      	beq.n	80018f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	69db      	ldr	r3, [r3, #28]
 8001838:	2b02      	cmp	r3, #2
 800183a:	d146      	bne.n	80018ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800183c:	4b33      	ldr	r3, [pc, #204]	; (800190c <HAL_RCC_OscConfig+0x4cc>)
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001842:	f7ff fa95 	bl	8000d70 <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800184a:	f7ff fa91 	bl	8000d70 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e06d      	b.n	8001938 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800185c:	4b29      	ldr	r3, [pc, #164]	; (8001904 <HAL_RCC_OscConfig+0x4c4>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1f0      	bne.n	800184a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001870:	d108      	bne.n	8001884 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001872:	4b24      	ldr	r3, [pc, #144]	; (8001904 <HAL_RCC_OscConfig+0x4c4>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	4921      	ldr	r1, [pc, #132]	; (8001904 <HAL_RCC_OscConfig+0x4c4>)
 8001880:	4313      	orrs	r3, r2
 8001882:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001884:	4b1f      	ldr	r3, [pc, #124]	; (8001904 <HAL_RCC_OscConfig+0x4c4>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a19      	ldr	r1, [r3, #32]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001894:	430b      	orrs	r3, r1
 8001896:	491b      	ldr	r1, [pc, #108]	; (8001904 <HAL_RCC_OscConfig+0x4c4>)
 8001898:	4313      	orrs	r3, r2
 800189a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800189c:	4b1b      	ldr	r3, [pc, #108]	; (800190c <HAL_RCC_OscConfig+0x4cc>)
 800189e:	2201      	movs	r2, #1
 80018a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a2:	f7ff fa65 	bl	8000d70 <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018aa:	f7ff fa61 	bl	8000d70 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e03d      	b.n	8001938 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018bc:	4b11      	ldr	r3, [pc, #68]	; (8001904 <HAL_RCC_OscConfig+0x4c4>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0f0      	beq.n	80018aa <HAL_RCC_OscConfig+0x46a>
 80018c8:	e035      	b.n	8001936 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <HAL_RCC_OscConfig+0x4cc>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d0:	f7ff fa4e 	bl	8000d70 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d8:	f7ff fa4a 	bl	8000d70 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e026      	b.n	8001938 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ea:	4b06      	ldr	r3, [pc, #24]	; (8001904 <HAL_RCC_OscConfig+0x4c4>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1f0      	bne.n	80018d8 <HAL_RCC_OscConfig+0x498>
 80018f6:	e01e      	b.n	8001936 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	69db      	ldr	r3, [r3, #28]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d107      	bne.n	8001910 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e019      	b.n	8001938 <HAL_RCC_OscConfig+0x4f8>
 8001904:	40021000 	.word	0x40021000
 8001908:	40007000 	.word	0x40007000
 800190c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001910:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <HAL_RCC_OscConfig+0x500>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a1b      	ldr	r3, [r3, #32]
 8001920:	429a      	cmp	r2, r3
 8001922:	d106      	bne.n	8001932 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800192e:	429a      	cmp	r2, r3
 8001930:	d001      	beq.n	8001936 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e000      	b.n	8001938 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40021000 	.word	0x40021000

08001944 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d101      	bne.n	8001958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e0d0      	b.n	8001afa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001958:	4b6a      	ldr	r3, [pc, #424]	; (8001b04 <HAL_RCC_ClockConfig+0x1c0>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0307 	and.w	r3, r3, #7
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	429a      	cmp	r2, r3
 8001964:	d910      	bls.n	8001988 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001966:	4b67      	ldr	r3, [pc, #412]	; (8001b04 <HAL_RCC_ClockConfig+0x1c0>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f023 0207 	bic.w	r2, r3, #7
 800196e:	4965      	ldr	r1, [pc, #404]	; (8001b04 <HAL_RCC_ClockConfig+0x1c0>)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	4313      	orrs	r3, r2
 8001974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001976:	4b63      	ldr	r3, [pc, #396]	; (8001b04 <HAL_RCC_ClockConfig+0x1c0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	429a      	cmp	r2, r3
 8001982:	d001      	beq.n	8001988 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e0b8      	b.n	8001afa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d020      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	2b00      	cmp	r3, #0
 800199e:	d005      	beq.n	80019ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019a0:	4b59      	ldr	r3, [pc, #356]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	4a58      	ldr	r2, [pc, #352]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 80019a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0308 	and.w	r3, r3, #8
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d005      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019b8:	4b53      	ldr	r3, [pc, #332]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	4a52      	ldr	r2, [pc, #328]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 80019be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c4:	4b50      	ldr	r3, [pc, #320]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	494d      	ldr	r1, [pc, #308]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d040      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d107      	bne.n	80019fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ea:	4b47      	ldr	r3, [pc, #284]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d115      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e07f      	b.n	8001afa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d107      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a02:	4b41      	ldr	r3, [pc, #260]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d109      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e073      	b.n	8001afa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a12:	4b3d      	ldr	r3, [pc, #244]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e06b      	b.n	8001afa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a22:	4b39      	ldr	r3, [pc, #228]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f023 0203 	bic.w	r2, r3, #3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	4936      	ldr	r1, [pc, #216]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a34:	f7ff f99c 	bl	8000d70 <HAL_GetTick>
 8001a38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3a:	e00a      	b.n	8001a52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a3c:	f7ff f998 	bl	8000d70 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e053      	b.n	8001afa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a52:	4b2d      	ldr	r3, [pc, #180]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f003 020c 	and.w	r2, r3, #12
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d1eb      	bne.n	8001a3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a64:	4b27      	ldr	r3, [pc, #156]	; (8001b04 <HAL_RCC_ClockConfig+0x1c0>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0307 	and.w	r3, r3, #7
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d210      	bcs.n	8001a94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a72:	4b24      	ldr	r3, [pc, #144]	; (8001b04 <HAL_RCC_ClockConfig+0x1c0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f023 0207 	bic.w	r2, r3, #7
 8001a7a:	4922      	ldr	r1, [pc, #136]	; (8001b04 <HAL_RCC_ClockConfig+0x1c0>)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a82:	4b20      	ldr	r3, [pc, #128]	; (8001b04 <HAL_RCC_ClockConfig+0x1c0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d001      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e032      	b.n	8001afa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d008      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aa0:	4b19      	ldr	r3, [pc, #100]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	4916      	ldr	r1, [pc, #88]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0308 	and.w	r3, r3, #8
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d009      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001abe:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	490e      	ldr	r1, [pc, #56]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ad2:	f000 f821 	bl	8001b18 <HAL_RCC_GetSysClockFreq>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	091b      	lsrs	r3, r3, #4
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	490a      	ldr	r1, [pc, #40]	; (8001b0c <HAL_RCC_ClockConfig+0x1c8>)
 8001ae4:	5ccb      	ldrb	r3, [r1, r3]
 8001ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aea:	4a09      	ldr	r2, [pc, #36]	; (8001b10 <HAL_RCC_ClockConfig+0x1cc>)
 8001aec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001aee:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <HAL_RCC_ClockConfig+0x1d0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff f8fa 	bl	8000cec <HAL_InitTick>

  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40022000 	.word	0x40022000
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	080026f8 	.word	0x080026f8
 8001b10:	20000058 	.word	0x20000058
 8001b14:	2000005c 	.word	0x2000005c

08001b18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b087      	sub	sp, #28
 8001b1c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	2300      	movs	r3, #0
 8001b24:	60bb      	str	r3, [r7, #8]
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b32:	4b1e      	ldr	r3, [pc, #120]	; (8001bac <HAL_RCC_GetSysClockFreq+0x94>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f003 030c 	and.w	r3, r3, #12
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	d002      	beq.n	8001b48 <HAL_RCC_GetSysClockFreq+0x30>
 8001b42:	2b08      	cmp	r3, #8
 8001b44:	d003      	beq.n	8001b4e <HAL_RCC_GetSysClockFreq+0x36>
 8001b46:	e027      	b.n	8001b98 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b48:	4b19      	ldr	r3, [pc, #100]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b4a:	613b      	str	r3, [r7, #16]
      break;
 8001b4c:	e027      	b.n	8001b9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	0c9b      	lsrs	r3, r3, #18
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	4a17      	ldr	r2, [pc, #92]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b58:	5cd3      	ldrb	r3, [r2, r3]
 8001b5a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d010      	beq.n	8001b88 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b66:	4b11      	ldr	r3, [pc, #68]	; (8001bac <HAL_RCC_GetSysClockFreq+0x94>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	0c5b      	lsrs	r3, r3, #17
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	4a11      	ldr	r2, [pc, #68]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b72:	5cd3      	ldrb	r3, [r2, r3]
 8001b74:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a0d      	ldr	r2, [pc, #52]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b7a:	fb03 f202 	mul.w	r2, r3, r2
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b84:	617b      	str	r3, [r7, #20]
 8001b86:	e004      	b.n	8001b92 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a0c      	ldr	r2, [pc, #48]	; (8001bbc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b8c:	fb02 f303 	mul.w	r3, r2, r3
 8001b90:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	613b      	str	r3, [r7, #16]
      break;
 8001b96:	e002      	b.n	8001b9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b98:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b9a:	613b      	str	r3, [r7, #16]
      break;
 8001b9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b9e:	693b      	ldr	r3, [r7, #16]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	371c      	adds	r7, #28
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	007a1200 	.word	0x007a1200
 8001bb4:	08002708 	.word	0x08002708
 8001bb8:	08002718 	.word	0x08002718
 8001bbc:	003d0900 	.word	0x003d0900

08001bc0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001bc8:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <RCC_Delay+0x34>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <RCC_Delay+0x38>)
 8001bce:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd2:	0a5b      	lsrs	r3, r3, #9
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	fb02 f303 	mul.w	r3, r2, r3
 8001bda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001bdc:	bf00      	nop
  }
  while (Delay --);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	1e5a      	subs	r2, r3, #1
 8001be2:	60fa      	str	r2, [r7, #12]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1f9      	bne.n	8001bdc <RCC_Delay+0x1c>
}
 8001be8:	bf00      	nop
 8001bea:	bf00      	nop
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr
 8001bf4:	20000058 	.word	0x20000058
 8001bf8:	10624dd3 	.word	0x10624dd3

08001bfc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e076      	b.n	8001cfc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d108      	bne.n	8001c28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c1e:	d009      	beq.n	8001c34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	61da      	str	r2, [r3, #28]
 8001c26:	e005      	b.n	8001c34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d106      	bne.n	8001c54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7fe ff7e 	bl	8000b50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2202      	movs	r2, #2
 8001c58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c6a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c86:	431a      	orrs	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	431a      	orrs	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb8:	ea42 0103 	orr.w	r1, r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	0c1a      	lsrs	r2, r3, #16
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f002 0204 	and.w	r2, r2, #4
 8001cda:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	69da      	ldr	r2, [r3, #28]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af02      	add	r7, sp, #8
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	603b      	str	r3, [r7, #0]
 8001d10:	4613      	mov	r3, r2
 8001d12:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d14:	2300      	movs	r3, #0
 8001d16:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d002      	beq.n	8001d2a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8001d24:	2302      	movs	r3, #2
 8001d26:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001d28:	e0fb      	b.n	8001f22 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d32:	d112      	bne.n	8001d5a <HAL_SPI_Receive+0x56>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d10e      	bne.n	8001d5a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2204      	movs	r2, #4
 8001d40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001d44:	88fa      	ldrh	r2, [r7, #6]
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	68ba      	ldr	r2, [r7, #8]
 8001d4e:	68b9      	ldr	r1, [r7, #8]
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f000 f8ef 	bl	8001f34 <HAL_SPI_TransmitReceive>
 8001d56:	4603      	mov	r3, r0
 8001d58:	e0e8      	b.n	8001f2c <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d101      	bne.n	8001d68 <HAL_SPI_Receive+0x64>
 8001d64:	2302      	movs	r3, #2
 8001d66:	e0e1      	b.n	8001f2c <HAL_SPI_Receive+0x228>
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d70:	f7fe fffe 	bl	8000d70 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d002      	beq.n	8001d82 <HAL_SPI_Receive+0x7e>
 8001d7c:	88fb      	ldrh	r3, [r7, #6]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d102      	bne.n	8001d88 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001d86:	e0cc      	b.n	8001f22 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2204      	movs	r2, #4
 8001d8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2200      	movs	r2, #0
 8001d94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	68ba      	ldr	r2, [r7, #8]
 8001d9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	88fa      	ldrh	r2, [r7, #6]
 8001da0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	88fa      	ldrh	r2, [r7, #6]
 8001da6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2200      	movs	r2, #0
 8001db8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dce:	d10f      	bne.n	8001df0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dde:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001dee:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dfa:	2b40      	cmp	r3, #64	; 0x40
 8001dfc:	d007      	beq.n	8001e0e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e0c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d16a      	bne.n	8001eec <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001e16:	e032      	b.n	8001e7e <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d115      	bne.n	8001e52 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f103 020c 	add.w	r2, r3, #12
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e32:	7812      	ldrb	r2, [r2, #0]
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e3c:	1c5a      	adds	r2, r3, #1
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001e50:	e015      	b.n	8001e7e <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e52:	f7fe ff8d 	bl	8000d70 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d803      	bhi.n	8001e6a <HAL_SPI_Receive+0x166>
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e68:	d102      	bne.n	8001e70 <HAL_SPI_Receive+0x16c>
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d106      	bne.n	8001e7e <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001e7c:	e051      	b.n	8001f22 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1c7      	bne.n	8001e18 <HAL_SPI_Receive+0x114>
 8001e88:	e035      	b.n	8001ef6 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d113      	bne.n	8001ec0 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68da      	ldr	r2, [r3, #12]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea2:	b292      	uxth	r2, r2
 8001ea4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eaa:	1c9a      	adds	r2, r3, #2
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001ebe:	e015      	b.n	8001eec <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ec0:	f7fe ff56 	bl	8000d70 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d803      	bhi.n	8001ed8 <HAL_SPI_Receive+0x1d4>
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed6:	d102      	bne.n	8001ede <HAL_SPI_Receive+0x1da>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d106      	bne.n	8001eec <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001eea:	e01a      	b.n	8001f22 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1c9      	bne.n	8001e8a <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	6839      	ldr	r1, [r7, #0]
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f000 fb4e 	bl	800259c <SPI_EndRxTransaction>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d002      	beq.n	8001f0c <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2220      	movs	r2, #32
 8001f0a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d002      	beq.n	8001f1a <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	75fb      	strb	r3, [r7, #23]
 8001f18:	e003      	b.n	8001f22 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08c      	sub	sp, #48	; 0x30
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
 8001f40:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001f42:	2301      	movs	r3, #1
 8001f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d101      	bne.n	8001f5a <HAL_SPI_TransmitReceive+0x26>
 8001f56:	2302      	movs	r3, #2
 8001f58:	e198      	b.n	800228c <HAL_SPI_TransmitReceive+0x358>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f62:	f7fe ff05 	bl	8000d70 <HAL_GetTick>
 8001f66:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001f78:	887b      	ldrh	r3, [r7, #2]
 8001f7a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001f7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d00f      	beq.n	8001fa4 <HAL_SPI_TransmitReceive+0x70>
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f8a:	d107      	bne.n	8001f9c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d103      	bne.n	8001f9c <HAL_SPI_TransmitReceive+0x68>
 8001f94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f98:	2b04      	cmp	r3, #4
 8001f9a:	d003      	beq.n	8001fa4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001fa2:	e16d      	b.n	8002280 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d005      	beq.n	8001fb6 <HAL_SPI_TransmitReceive+0x82>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d002      	beq.n	8001fb6 <HAL_SPI_TransmitReceive+0x82>
 8001fb0:	887b      	ldrh	r3, [r7, #2]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d103      	bne.n	8001fbe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001fbc:	e160      	b.n	8002280 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	d003      	beq.n	8001fd2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2205      	movs	r2, #5
 8001fce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	887a      	ldrh	r2, [r7, #2]
 8001fe2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	887a      	ldrh	r2, [r7, #2]
 8001fe8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	887a      	ldrh	r2, [r7, #2]
 8001ff4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	887a      	ldrh	r2, [r7, #2]
 8001ffa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2200      	movs	r2, #0
 8002000:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002012:	2b40      	cmp	r3, #64	; 0x40
 8002014:	d007      	beq.n	8002026 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002024:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800202e:	d17c      	bne.n	800212a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d002      	beq.n	800203e <HAL_SPI_TransmitReceive+0x10a>
 8002038:	8b7b      	ldrh	r3, [r7, #26]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d16a      	bne.n	8002114 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	881a      	ldrh	r2, [r3, #0]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	1c9a      	adds	r2, r3, #2
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002058:	b29b      	uxth	r3, r3
 800205a:	3b01      	subs	r3, #1
 800205c:	b29a      	uxth	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002062:	e057      	b.n	8002114 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b02      	cmp	r3, #2
 8002070:	d11b      	bne.n	80020aa <HAL_SPI_TransmitReceive+0x176>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002076:	b29b      	uxth	r3, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	d016      	beq.n	80020aa <HAL_SPI_TransmitReceive+0x176>
 800207c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800207e:	2b01      	cmp	r3, #1
 8002080:	d113      	bne.n	80020aa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	881a      	ldrh	r2, [r3, #0]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	1c9a      	adds	r2, r3, #2
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800209c:	b29b      	uxth	r3, r3
 800209e:	3b01      	subs	r3, #1
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80020a6:	2300      	movs	r3, #0
 80020a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d119      	bne.n	80020ec <HAL_SPI_TransmitReceive+0x1b8>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020bc:	b29b      	uxth	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d014      	beq.n	80020ec <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68da      	ldr	r2, [r3, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020cc:	b292      	uxth	r2, r2
 80020ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d4:	1c9a      	adds	r2, r3, #2
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020de:	b29b      	uxth	r3, r3
 80020e0:	3b01      	subs	r3, #1
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80020e8:	2301      	movs	r3, #1
 80020ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80020ec:	f7fe fe40 	bl	8000d70 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d80b      	bhi.n	8002114 <HAL_SPI_TransmitReceive+0x1e0>
 80020fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002102:	d007      	beq.n	8002114 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002112:	e0b5      	b.n	8002280 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002118:	b29b      	uxth	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1a2      	bne.n	8002064 <HAL_SPI_TransmitReceive+0x130>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002122:	b29b      	uxth	r3, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	d19d      	bne.n	8002064 <HAL_SPI_TransmitReceive+0x130>
 8002128:	e080      	b.n	800222c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d002      	beq.n	8002138 <HAL_SPI_TransmitReceive+0x204>
 8002132:	8b7b      	ldrh	r3, [r7, #26]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d16f      	bne.n	8002218 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	330c      	adds	r3, #12
 8002142:	7812      	ldrb	r2, [r2, #0]
 8002144:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	1c5a      	adds	r2, r3, #1
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002154:	b29b      	uxth	r3, r3
 8002156:	3b01      	subs	r3, #1
 8002158:	b29a      	uxth	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800215e:	e05b      	b.n	8002218 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b02      	cmp	r3, #2
 800216c:	d11c      	bne.n	80021a8 <HAL_SPI_TransmitReceive+0x274>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002172:	b29b      	uxth	r3, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	d017      	beq.n	80021a8 <HAL_SPI_TransmitReceive+0x274>
 8002178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800217a:	2b01      	cmp	r3, #1
 800217c:	d114      	bne.n	80021a8 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	330c      	adds	r3, #12
 8002188:	7812      	ldrb	r2, [r2, #0]
 800218a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002190:	1c5a      	adds	r2, r3, #1
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800219a:	b29b      	uxth	r3, r3
 800219c:	3b01      	subs	r3, #1
 800219e:	b29a      	uxth	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80021a4:	2300      	movs	r3, #0
 80021a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d119      	bne.n	80021ea <HAL_SPI_TransmitReceive+0x2b6>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d014      	beq.n	80021ea <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68da      	ldr	r2, [r3, #12]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021dc:	b29b      	uxth	r3, r3
 80021de:	3b01      	subs	r3, #1
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80021e6:	2301      	movs	r3, #1
 80021e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80021ea:	f7fe fdc1 	bl	8000d70 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d803      	bhi.n	8002202 <HAL_SPI_TransmitReceive+0x2ce>
 80021fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002200:	d102      	bne.n	8002208 <HAL_SPI_TransmitReceive+0x2d4>
 8002202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002204:	2b00      	cmp	r3, #0
 8002206:	d107      	bne.n	8002218 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002216:	e033      	b.n	8002280 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800221c:	b29b      	uxth	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d19e      	bne.n	8002160 <HAL_SPI_TransmitReceive+0x22c>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002226:	b29b      	uxth	r3, r3
 8002228:	2b00      	cmp	r3, #0
 800222a:	d199      	bne.n	8002160 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800222c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800222e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f000 fa05 	bl	8002640 <SPI_EndRxTxTransaction>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d006      	beq.n	800224a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2220      	movs	r2, #32
 8002246:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002248:	e01a      	b.n	8002280 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10a      	bne.n	8002268 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	617b      	str	r3, [r7, #20]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	617b      	str	r3, [r7, #20]
 8002266:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226c:	2b00      	cmp	r3, #0
 800226e:	d003      	beq.n	8002278 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002276:	e003      	b.n	8002280 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002288:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800228c:	4618      	mov	r0, r3
 800228e:	3730      	adds	r7, #48	; 0x30
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b088      	sub	sp, #32
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10e      	bne.n	80022d4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d009      	beq.n	80022d4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d004      	beq.n	80022d4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	4798      	blx	r3
    return;
 80022d2:	e0b7      	b.n	8002444 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d009      	beq.n	80022f2 <HAL_SPI_IRQHandler+0x5e>
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d004      	beq.n	80022f2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	4798      	blx	r3
    return;
 80022f0:	e0a8      	b.n	8002444 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	f003 0320 	and.w	r3, r3, #32
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d105      	bne.n	8002308 <HAL_SPI_IRQHandler+0x74>
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002302:	2b00      	cmp	r3, #0
 8002304:	f000 809e 	beq.w	8002444 <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	f003 0320 	and.w	r3, r3, #32
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 8098 	beq.w	8002444 <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800231a:	2b00      	cmp	r3, #0
 800231c:	d023      	beq.n	8002366 <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b03      	cmp	r3, #3
 8002328:	d011      	beq.n	800234e <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800232e:	f043 0204 	orr.w	r2, r3, #4
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	617b      	str	r3, [r7, #20]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	e00b      	b.n	8002366 <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800234e:	2300      	movs	r3, #0
 8002350:	613b      	str	r3, [r7, #16]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	613b      	str	r3, [r7, #16]
 8002362:	693b      	ldr	r3, [r7, #16]
        return;
 8002364:	e06e      	b.n	8002444 <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	f003 0320 	and.w	r3, r3, #32
 800236c:	2b00      	cmp	r3, #0
 800236e:	d014      	beq.n	800239a <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002374:	f043 0201 	orr.w	r2, r3, #1
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800237c:	2300      	movs	r3, #0
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d04f      	beq.n	8002442 <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80023b0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d104      	bne.n	80023ce <HAL_SPI_IRQHandler+0x13a>
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d034      	beq.n	8002438 <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 0203 	bic.w	r2, r2, #3
 80023dc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d011      	beq.n	800240a <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ea:	4a18      	ldr	r2, [pc, #96]	; (800244c <HAL_SPI_IRQHandler+0x1b8>)
 80023ec:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fe fdf8 	bl	8000fe8 <HAL_DMA_Abort_IT>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d005      	beq.n	800240a <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002402:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800240e:	2b00      	cmp	r3, #0
 8002410:	d016      	beq.n	8002440 <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002416:	4a0d      	ldr	r2, [pc, #52]	; (800244c <HAL_SPI_IRQHandler+0x1b8>)
 8002418:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800241e:	4618      	mov	r0, r3
 8002420:	f7fe fde2 	bl	8000fe8 <HAL_DMA_Abort_IT>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00a      	beq.n	8002440 <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002436:	e003      	b.n	8002440 <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 f809 	bl	8002450 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800243e:	e000      	b.n	8002442 <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 8002440:	bf00      	nop
    return;
 8002442:	bf00      	nop
  }
}
 8002444:	3720      	adds	r7, #32
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	08002463 	.word	0x08002463

08002450 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr

08002462 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b084      	sub	sp, #16
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f7ff ffe7 	bl	8002450 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002482:	bf00      	nop
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
	...

0800248c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b088      	sub	sp, #32
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	603b      	str	r3, [r7, #0]
 8002498:	4613      	mov	r3, r2
 800249a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800249c:	f7fe fc68 	bl	8000d70 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a4:	1a9b      	subs	r3, r3, r2
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	4413      	add	r3, r2
 80024aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80024ac:	f7fe fc60 	bl	8000d70 <HAL_GetTick>
 80024b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80024b2:	4b39      	ldr	r3, [pc, #228]	; (8002598 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	015b      	lsls	r3, r3, #5
 80024b8:	0d1b      	lsrs	r3, r3, #20
 80024ba:	69fa      	ldr	r2, [r7, #28]
 80024bc:	fb02 f303 	mul.w	r3, r2, r3
 80024c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024c2:	e054      	b.n	800256e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ca:	d050      	beq.n	800256e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80024cc:	f7fe fc50 	bl	8000d70 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	69fa      	ldr	r2, [r7, #28]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d902      	bls.n	80024e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d13d      	bne.n	800255e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80024f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024fa:	d111      	bne.n	8002520 <SPI_WaitFlagStateUntilTimeout+0x94>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002504:	d004      	beq.n	8002510 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800250e:	d107      	bne.n	8002520 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800251e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002528:	d10f      	bne.n	800254a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002548:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e017      	b.n	800258e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	3b01      	subs	r3, #1
 800256c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	4013      	ands	r3, r2
 8002578:	68ba      	ldr	r2, [r7, #8]
 800257a:	429a      	cmp	r2, r3
 800257c:	bf0c      	ite	eq
 800257e:	2301      	moveq	r3, #1
 8002580:	2300      	movne	r3, #0
 8002582:	b2db      	uxtb	r3, r3
 8002584:	461a      	mov	r2, r3
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	429a      	cmp	r2, r3
 800258a:	d19b      	bne.n	80024c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3720      	adds	r7, #32
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20000058 	.word	0x20000058

0800259c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af02      	add	r7, sp, #8
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025b0:	d111      	bne.n	80025d6 <SPI_EndRxTransaction+0x3a>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025ba:	d004      	beq.n	80025c6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025c4:	d107      	bne.n	80025d6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025d4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025de:	d117      	bne.n	8002610 <SPI_EndRxTransaction+0x74>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025e8:	d112      	bne.n	8002610 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	2200      	movs	r2, #0
 80025f2:	2101      	movs	r1, #1
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f7ff ff49 	bl	800248c <SPI_WaitFlagStateUntilTimeout>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d01a      	beq.n	8002636 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002604:	f043 0220 	orr.w	r2, r3, #32
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e013      	b.n	8002638 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	2200      	movs	r2, #0
 8002618:	2180      	movs	r1, #128	; 0x80
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f7ff ff36 	bl	800248c <SPI_WaitFlagStateUntilTimeout>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d007      	beq.n	8002636 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800262a:	f043 0220 	orr.w	r2, r3, #32
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e000      	b.n	8002638 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af02      	add	r7, sp, #8
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	2200      	movs	r2, #0
 8002654:	2180      	movs	r1, #128	; 0x80
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f7ff ff18 	bl	800248c <SPI_WaitFlagStateUntilTimeout>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d007      	beq.n	8002672 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002666:	f043 0220 	orr.w	r2, r3, #32
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e000      	b.n	8002674 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <memset>:
 800267c:	4603      	mov	r3, r0
 800267e:	4402      	add	r2, r0
 8002680:	4293      	cmp	r3, r2
 8002682:	d100      	bne.n	8002686 <memset+0xa>
 8002684:	4770      	bx	lr
 8002686:	f803 1b01 	strb.w	r1, [r3], #1
 800268a:	e7f9      	b.n	8002680 <memset+0x4>

0800268c <__libc_init_array>:
 800268c:	b570      	push	{r4, r5, r6, lr}
 800268e:	2600      	movs	r6, #0
 8002690:	4d0c      	ldr	r5, [pc, #48]	; (80026c4 <__libc_init_array+0x38>)
 8002692:	4c0d      	ldr	r4, [pc, #52]	; (80026c8 <__libc_init_array+0x3c>)
 8002694:	1b64      	subs	r4, r4, r5
 8002696:	10a4      	asrs	r4, r4, #2
 8002698:	42a6      	cmp	r6, r4
 800269a:	d109      	bne.n	80026b0 <__libc_init_array+0x24>
 800269c:	f000 f81a 	bl	80026d4 <_init>
 80026a0:	2600      	movs	r6, #0
 80026a2:	4d0a      	ldr	r5, [pc, #40]	; (80026cc <__libc_init_array+0x40>)
 80026a4:	4c0a      	ldr	r4, [pc, #40]	; (80026d0 <__libc_init_array+0x44>)
 80026a6:	1b64      	subs	r4, r4, r5
 80026a8:	10a4      	asrs	r4, r4, #2
 80026aa:	42a6      	cmp	r6, r4
 80026ac:	d105      	bne.n	80026ba <__libc_init_array+0x2e>
 80026ae:	bd70      	pop	{r4, r5, r6, pc}
 80026b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80026b4:	4798      	blx	r3
 80026b6:	3601      	adds	r6, #1
 80026b8:	e7ee      	b.n	8002698 <__libc_init_array+0xc>
 80026ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80026be:	4798      	blx	r3
 80026c0:	3601      	adds	r6, #1
 80026c2:	e7f2      	b.n	80026aa <__libc_init_array+0x1e>
 80026c4:	0800271c 	.word	0x0800271c
 80026c8:	0800271c 	.word	0x0800271c
 80026cc:	0800271c 	.word	0x0800271c
 80026d0:	08002720 	.word	0x08002720

080026d4 <_init>:
 80026d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026d6:	bf00      	nop
 80026d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026da:	bc08      	pop	{r3}
 80026dc:	469e      	mov	lr, r3
 80026de:	4770      	bx	lr

080026e0 <_fini>:
 80026e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026e2:	bf00      	nop
 80026e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026e6:	bc08      	pop	{r3}
 80026e8:	469e      	mov	lr, r3
 80026ea:	4770      	bx	lr
